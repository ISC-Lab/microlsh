
microlsh.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006244  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08006380  08006380  00007380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080064e4  080064e4  000074e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080064ec  080064ec  000074ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080064f0  080064f0  000074f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000068  20000008  080064f4  00008008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000300  20000070  0800655c  00008070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000370  0800655c  00008370  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012e6f  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002951  00000000  00000000  0001af0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014c8  00000000  00000000  0001d860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000fde  00000000  00000000  0001ed28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00022900  00000000  00000000  0001fd06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001189a  00000000  00000000  00042606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000da127  00000000  00000000  00053ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0012dfc7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005ce8  00000000  00000000  0012e00c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004e  00000000  00000000  00133cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	08006368 	.word	0x08006368

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	08006368 	.word	0x08006368

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800018c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000190:	f000 b96a 	b.w	8000468 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	460c      	mov	r4, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14e      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001b8:	4694      	mov	ip, r2
 80001ba:	458c      	cmp	ip, r1
 80001bc:	4686      	mov	lr, r0
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	d962      	bls.n	800028a <__udivmoddi4+0xde>
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c6:	f1c2 0320 	rsb	r3, r2, #32
 80001ca:	4091      	lsls	r1, r2
 80001cc:	fa20 f303 	lsr.w	r3, r0, r3
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	4319      	orrs	r1, r3
 80001d6:	fa00 fe02 	lsl.w	lr, r0, r2
 80001da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001de:	fa1f f68c 	uxth.w	r6, ip
 80001e2:	fbb1 f4f7 	udiv	r4, r1, r7
 80001e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001ea:	fb07 1114 	mls	r1, r7, r4, r1
 80001ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001f2:	fb04 f106 	mul.w	r1, r4, r6
 80001f6:	4299      	cmp	r1, r3
 80001f8:	d90a      	bls.n	8000210 <__udivmoddi4+0x64>
 80001fa:	eb1c 0303 	adds.w	r3, ip, r3
 80001fe:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000202:	f080 8112 	bcs.w	800042a <__udivmoddi4+0x27e>
 8000206:	4299      	cmp	r1, r3
 8000208:	f240 810f 	bls.w	800042a <__udivmoddi4+0x27e>
 800020c:	3c02      	subs	r4, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a59      	subs	r1, r3, r1
 8000212:	fa1f f38e 	uxth.w	r3, lr
 8000216:	fbb1 f0f7 	udiv	r0, r1, r7
 800021a:	fb07 1110 	mls	r1, r7, r0, r1
 800021e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000222:	fb00 f606 	mul.w	r6, r0, r6
 8000226:	429e      	cmp	r6, r3
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0303 	adds.w	r3, ip, r3
 800022e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000232:	f080 80fc 	bcs.w	800042e <__udivmoddi4+0x282>
 8000236:	429e      	cmp	r6, r3
 8000238:	f240 80f9 	bls.w	800042e <__udivmoddi4+0x282>
 800023c:	4463      	add	r3, ip
 800023e:	3802      	subs	r0, #2
 8000240:	1b9b      	subs	r3, r3, r6
 8000242:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000246:	2100      	movs	r1, #0
 8000248:	b11d      	cbz	r5, 8000252 <__udivmoddi4+0xa6>
 800024a:	40d3      	lsrs	r3, r2
 800024c:	2200      	movs	r2, #0
 800024e:	e9c5 3200 	strd	r3, r2, [r5]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d905      	bls.n	8000266 <__udivmoddi4+0xba>
 800025a:	b10d      	cbz	r5, 8000260 <__udivmoddi4+0xb4>
 800025c:	e9c5 0100 	strd	r0, r1, [r5]
 8000260:	2100      	movs	r1, #0
 8000262:	4608      	mov	r0, r1
 8000264:	e7f5      	b.n	8000252 <__udivmoddi4+0xa6>
 8000266:	fab3 f183 	clz	r1, r3
 800026a:	2900      	cmp	r1, #0
 800026c:	d146      	bne.n	80002fc <__udivmoddi4+0x150>
 800026e:	42a3      	cmp	r3, r4
 8000270:	d302      	bcc.n	8000278 <__udivmoddi4+0xcc>
 8000272:	4290      	cmp	r0, r2
 8000274:	f0c0 80f0 	bcc.w	8000458 <__udivmoddi4+0x2ac>
 8000278:	1a86      	subs	r6, r0, r2
 800027a:	eb64 0303 	sbc.w	r3, r4, r3
 800027e:	2001      	movs	r0, #1
 8000280:	2d00      	cmp	r5, #0
 8000282:	d0e6      	beq.n	8000252 <__udivmoddi4+0xa6>
 8000284:	e9c5 6300 	strd	r6, r3, [r5]
 8000288:	e7e3      	b.n	8000252 <__udivmoddi4+0xa6>
 800028a:	2a00      	cmp	r2, #0
 800028c:	f040 8090 	bne.w	80003b0 <__udivmoddi4+0x204>
 8000290:	eba1 040c 	sub.w	r4, r1, ip
 8000294:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000298:	fa1f f78c 	uxth.w	r7, ip
 800029c:	2101      	movs	r1, #1
 800029e:	fbb4 f6f8 	udiv	r6, r4, r8
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb08 4416 	mls	r4, r8, r6, r4
 80002aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002ae:	fb07 f006 	mul.w	r0, r7, r6
 80002b2:	4298      	cmp	r0, r3
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0x11c>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80002be:	d202      	bcs.n	80002c6 <__udivmoddi4+0x11a>
 80002c0:	4298      	cmp	r0, r3
 80002c2:	f200 80cd 	bhi.w	8000460 <__udivmoddi4+0x2b4>
 80002c6:	4626      	mov	r6, r4
 80002c8:	1a1c      	subs	r4, r3, r0
 80002ca:	fa1f f38e 	uxth.w	r3, lr
 80002ce:	fbb4 f0f8 	udiv	r0, r4, r8
 80002d2:	fb08 4410 	mls	r4, r8, r0, r4
 80002d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002da:	fb00 f707 	mul.w	r7, r0, r7
 80002de:	429f      	cmp	r7, r3
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0x148>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0x146>
 80002ec:	429f      	cmp	r7, r3
 80002ee:	f200 80b0 	bhi.w	8000452 <__udivmoddi4+0x2a6>
 80002f2:	4620      	mov	r0, r4
 80002f4:	1bdb      	subs	r3, r3, r7
 80002f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fa:	e7a5      	b.n	8000248 <__udivmoddi4+0x9c>
 80002fc:	f1c1 0620 	rsb	r6, r1, #32
 8000300:	408b      	lsls	r3, r1
 8000302:	fa22 f706 	lsr.w	r7, r2, r6
 8000306:	431f      	orrs	r7, r3
 8000308:	fa20 fc06 	lsr.w	ip, r0, r6
 800030c:	fa04 f301 	lsl.w	r3, r4, r1
 8000310:	ea43 030c 	orr.w	r3, r3, ip
 8000314:	40f4      	lsrs	r4, r6
 8000316:	fa00 f801 	lsl.w	r8, r0, r1
 800031a:	0c38      	lsrs	r0, r7, #16
 800031c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000320:	fbb4 fef0 	udiv	lr, r4, r0
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fb00 441e 	mls	r4, r0, lr, r4
 800032c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000330:	fb0e f90c 	mul.w	r9, lr, ip
 8000334:	45a1      	cmp	r9, r4
 8000336:	fa02 f201 	lsl.w	r2, r2, r1
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x1a6>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000342:	f080 8084 	bcs.w	800044e <__udivmoddi4+0x2a2>
 8000346:	45a1      	cmp	r9, r4
 8000348:	f240 8081 	bls.w	800044e <__udivmoddi4+0x2a2>
 800034c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000350:	443c      	add	r4, r7
 8000352:	eba4 0409 	sub.w	r4, r4, r9
 8000356:	fa1f f983 	uxth.w	r9, r3
 800035a:	fbb4 f3f0 	udiv	r3, r4, r0
 800035e:	fb00 4413 	mls	r4, r0, r3, r4
 8000362:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000366:	fb03 fc0c 	mul.w	ip, r3, ip
 800036a:	45a4      	cmp	ip, r4
 800036c:	d907      	bls.n	800037e <__udivmoddi4+0x1d2>
 800036e:	193c      	adds	r4, r7, r4
 8000370:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000374:	d267      	bcs.n	8000446 <__udivmoddi4+0x29a>
 8000376:	45a4      	cmp	ip, r4
 8000378:	d965      	bls.n	8000446 <__udivmoddi4+0x29a>
 800037a:	3b02      	subs	r3, #2
 800037c:	443c      	add	r4, r7
 800037e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000382:	fba0 9302 	umull	r9, r3, r0, r2
 8000386:	eba4 040c 	sub.w	r4, r4, ip
 800038a:	429c      	cmp	r4, r3
 800038c:	46ce      	mov	lr, r9
 800038e:	469c      	mov	ip, r3
 8000390:	d351      	bcc.n	8000436 <__udivmoddi4+0x28a>
 8000392:	d04e      	beq.n	8000432 <__udivmoddi4+0x286>
 8000394:	b155      	cbz	r5, 80003ac <__udivmoddi4+0x200>
 8000396:	ebb8 030e 	subs.w	r3, r8, lr
 800039a:	eb64 040c 	sbc.w	r4, r4, ip
 800039e:	fa04 f606 	lsl.w	r6, r4, r6
 80003a2:	40cb      	lsrs	r3, r1
 80003a4:	431e      	orrs	r6, r3
 80003a6:	40cc      	lsrs	r4, r1
 80003a8:	e9c5 6400 	strd	r6, r4, [r5]
 80003ac:	2100      	movs	r1, #0
 80003ae:	e750      	b.n	8000252 <__udivmoddi4+0xa6>
 80003b0:	f1c2 0320 	rsb	r3, r2, #32
 80003b4:	fa20 f103 	lsr.w	r1, r0, r3
 80003b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003bc:	fa24 f303 	lsr.w	r3, r4, r3
 80003c0:	4094      	lsls	r4, r2
 80003c2:	430c      	orrs	r4, r1
 80003c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003c8:	fa00 fe02 	lsl.w	lr, r0, r2
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3110 	mls	r1, r8, r0, r3
 80003d8:	0c23      	lsrs	r3, r4, #16
 80003da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003de:	fb00 f107 	mul.w	r1, r0, r7
 80003e2:	4299      	cmp	r1, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x24c>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80003ee:	d22c      	bcs.n	800044a <__udivmoddi4+0x29e>
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d92a      	bls.n	800044a <__udivmoddi4+0x29e>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4463      	add	r3, ip
 80003f8:	1a5b      	subs	r3, r3, r1
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000400:	fb08 3311 	mls	r3, r8, r1, r3
 8000404:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000408:	fb01 f307 	mul.w	r3, r1, r7
 800040c:	42a3      	cmp	r3, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x276>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000418:	d213      	bcs.n	8000442 <__udivmoddi4+0x296>
 800041a:	42a3      	cmp	r3, r4
 800041c:	d911      	bls.n	8000442 <__udivmoddi4+0x296>
 800041e:	3902      	subs	r1, #2
 8000420:	4464      	add	r4, ip
 8000422:	1ae4      	subs	r4, r4, r3
 8000424:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000428:	e739      	b.n	800029e <__udivmoddi4+0xf2>
 800042a:	4604      	mov	r4, r0
 800042c:	e6f0      	b.n	8000210 <__udivmoddi4+0x64>
 800042e:	4608      	mov	r0, r1
 8000430:	e706      	b.n	8000240 <__udivmoddi4+0x94>
 8000432:	45c8      	cmp	r8, r9
 8000434:	d2ae      	bcs.n	8000394 <__udivmoddi4+0x1e8>
 8000436:	ebb9 0e02 	subs.w	lr, r9, r2
 800043a:	eb63 0c07 	sbc.w	ip, r3, r7
 800043e:	3801      	subs	r0, #1
 8000440:	e7a8      	b.n	8000394 <__udivmoddi4+0x1e8>
 8000442:	4631      	mov	r1, r6
 8000444:	e7ed      	b.n	8000422 <__udivmoddi4+0x276>
 8000446:	4603      	mov	r3, r0
 8000448:	e799      	b.n	800037e <__udivmoddi4+0x1d2>
 800044a:	4630      	mov	r0, r6
 800044c:	e7d4      	b.n	80003f8 <__udivmoddi4+0x24c>
 800044e:	46d6      	mov	lr, sl
 8000450:	e77f      	b.n	8000352 <__udivmoddi4+0x1a6>
 8000452:	4463      	add	r3, ip
 8000454:	3802      	subs	r0, #2
 8000456:	e74d      	b.n	80002f4 <__udivmoddi4+0x148>
 8000458:	4606      	mov	r6, r0
 800045a:	4623      	mov	r3, r4
 800045c:	4608      	mov	r0, r1
 800045e:	e70f      	b.n	8000280 <__udivmoddi4+0xd4>
 8000460:	3e02      	subs	r6, #2
 8000462:	4463      	add	r3, ip
 8000464:	e730      	b.n	80002c8 <__udivmoddi4+0x11c>
 8000466:	bf00      	nop

08000468 <__aeabi_idiv0>:
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop

0800046c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000474:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000478:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800047c:	f003 0301 	and.w	r3, r3, #1
 8000480:	2b00      	cmp	r3, #0
 8000482:	d013      	beq.n	80004ac <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000484:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000488:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800048c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000490:	2b00      	cmp	r3, #0
 8000492:	d00b      	beq.n	80004ac <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000494:	e000      	b.n	8000498 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000496:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000498:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d0f9      	beq.n	8000496 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80004a2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004a6:	687a      	ldr	r2, [r7, #4]
 80004a8:	b2d2      	uxtb	r2, r2
 80004aa:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80004ac:	687b      	ldr	r3, [r7, #4]
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr

080004ba <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004ba:	b480      	push	{r7}
 80004bc:	b085      	sub	sp, #20
 80004be:	af00      	add	r7, sp, #0
 80004c0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80004c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004c6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80004c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4313      	orrs	r3, r2
 80004d0:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80004d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4013      	ands	r3, r2
 80004dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004de:	68fb      	ldr	r3, [r7, #12]
}
 80004e0:	bf00      	nop
 80004e2:	3714      	adds	r7, #20
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004f8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4313      	orrs	r3, r2
 8000502:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000504:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000508:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4013      	ands	r3, r2
 800050e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000510:	68fb      	ldr	r3, [r7, #12]
}
 8000512:	bf00      	nop
 8000514:	3714      	adds	r7, #20
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
	...

08000520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000524:	f000 fbf6 	bl	8000d14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000528:	f000 f816 	bl	8000558 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800052c:	f000 f87e 	bl	800062c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f000 f930 	bl	8000794 <MX_GPIO_Init>
  MX_DMA_Init();
 8000534:	f000 f91c 	bl	8000770 <MX_DMA_Init>
  MX_SAI1_Init();
 8000538:	f000 f8e4 	bl	8000704 <MX_SAI1_Init>
  MX_LPUART1_UART_Init();
 800053c:	f000 f894 	bl	8000668 <MX_LPUART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	printf("Hello world \n");
 8000540:	4804      	ldr	r0, [pc, #16]	@ (8000554 <main+0x34>)
 8000542:	f005 fb7d 	bl	8005c40 <puts>
	HAL_Delay(1000);
 8000546:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800054a:	f000 fc69 	bl	8000e20 <HAL_Delay>
	printf("Hello world \n");
 800054e:	bf00      	nop
 8000550:	e7f6      	b.n	8000540 <main+0x20>
 8000552:	bf00      	nop
 8000554:	08006380 	.word	0x08006380

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b09a      	sub	sp, #104	@ 0x68
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0320 	add.w	r3, r7, #32
 8000562:	2248      	movs	r2, #72	@ 0x48
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f005 fc4a 	bl	8005e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]
 8000578:	611a      	str	r2, [r3, #16]
 800057a:	615a      	str	r2, [r3, #20]
 800057c:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800057e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000582:	68db      	ldr	r3, [r3, #12]
 8000584:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000588:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800058c:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800058e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000592:	68db      	ldr	r3, [r3, #12]
 8000594:	f023 0303 	bic.w	r3, r3, #3
 8000598:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	60d3      	str	r3, [r2, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a2:	4b21      	ldr	r3, [pc, #132]	@ (8000628 <SystemClock_Config+0xd0>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80005aa:	4a1f      	ldr	r2, [pc, #124]	@ (8000628 <SystemClock_Config+0xd0>)
 80005ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005b0:	6013      	str	r3, [r2, #0]
 80005b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000628 <SystemClock_Config+0xd0>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 80005be:	2322      	movs	r3, #34	@ 0x22
 80005c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005c8:	2301      	movs	r3, #1
 80005ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005cc:	2340      	movs	r3, #64	@ 0x40
 80005ce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80005d0:	2300      	movs	r3, #0
 80005d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005d4:	2360      	movs	r3, #96	@ 0x60
 80005d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005d8:	2300      	movs	r3, #0
 80005da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005dc:	f107 0320 	add.w	r3, r7, #32
 80005e0:	4618      	mov	r0, r3
 80005e2:	f001 fccf 	bl	8001f84 <HAL_RCC_OscConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005ec:	f000 f8f8 	bl	80007e0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80005f0:	236f      	movs	r3, #111	@ 0x6f
 80005f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2100      	movs	r1, #0
 8000610:	4618      	mov	r0, r3
 8000612:	f002 f82b 	bl	800266c <HAL_RCC_ClockConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800061c:	f000 f8e0 	bl	80007e0 <Error_Handler>
  }
}
 8000620:	bf00      	nop
 8000622:	3768      	adds	r7, #104	@ 0x68
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	58000400 	.word	0x58000400

0800062c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	@ 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000632:	463b      	mov	r3, r7
 8000634:	2250      	movs	r2, #80	@ 0x50
 8000636:	2100      	movs	r1, #0
 8000638:	4618      	mov	r0, r3
 800063a:	f005 fbe1 	bl	8005e00 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800063e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000642:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000644:	2300      	movs	r3, #0
 8000646:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000648:	2310      	movs	r3, #16
 800064a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800064c:	463b      	mov	r3, r7
 800064e:	4618      	mov	r0, r3
 8000650:	f002 fe39 	bl	80032c6 <HAL_RCCEx_PeriphCLKConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800065a:	f000 f8c1 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800065e:	bf00      	nop
 8000660:	3750      	adds	r7, #80	@ 0x50
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
	...

08000668 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800066c:	4b22      	ldr	r3, [pc, #136]	@ (80006f8 <MX_LPUART1_UART_Init+0x90>)
 800066e:	4a23      	ldr	r2, [pc, #140]	@ (80006fc <MX_LPUART1_UART_Init+0x94>)
 8000670:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000672:	4b21      	ldr	r3, [pc, #132]	@ (80006f8 <MX_LPUART1_UART_Init+0x90>)
 8000674:	4a22      	ldr	r2, [pc, #136]	@ (8000700 <MX_LPUART1_UART_Init+0x98>)
 8000676:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000678:	4b1f      	ldr	r3, [pc, #124]	@ (80006f8 <MX_LPUART1_UART_Init+0x90>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800067e:	4b1e      	ldr	r3, [pc, #120]	@ (80006f8 <MX_LPUART1_UART_Init+0x90>)
 8000680:	2200      	movs	r2, #0
 8000682:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000684:	4b1c      	ldr	r3, [pc, #112]	@ (80006f8 <MX_LPUART1_UART_Init+0x90>)
 8000686:	2200      	movs	r2, #0
 8000688:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800068a:	4b1b      	ldr	r3, [pc, #108]	@ (80006f8 <MX_LPUART1_UART_Init+0x90>)
 800068c:	220c      	movs	r2, #12
 800068e:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000690:	4b19      	ldr	r3, [pc, #100]	@ (80006f8 <MX_LPUART1_UART_Init+0x90>)
 8000692:	2200      	movs	r2, #0
 8000694:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000696:	4b18      	ldr	r3, [pc, #96]	@ (80006f8 <MX_LPUART1_UART_Init+0x90>)
 8000698:	2200      	movs	r2, #0
 800069a:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800069c:	4b16      	ldr	r3, [pc, #88]	@ (80006f8 <MX_LPUART1_UART_Init+0x90>)
 800069e:	2200      	movs	r2, #0
 80006a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006a2:	4b15      	ldr	r3, [pc, #84]	@ (80006f8 <MX_LPUART1_UART_Init+0x90>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80006a8:	4b13      	ldr	r3, [pc, #76]	@ (80006f8 <MX_LPUART1_UART_Init+0x90>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006ae:	4812      	ldr	r0, [pc, #72]	@ (80006f8 <MX_LPUART1_UART_Init+0x90>)
 80006b0:	f004 fc13 	bl	8004eda <HAL_UART_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 80006ba:	f000 f891 	bl	80007e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006be:	2100      	movs	r1, #0
 80006c0:	480d      	ldr	r0, [pc, #52]	@ (80006f8 <MX_LPUART1_UART_Init+0x90>)
 80006c2:	f005 f8db 	bl	800587c <HAL_UARTEx_SetTxFifoThreshold>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 80006cc:	f000 f888 	bl	80007e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006d0:	2100      	movs	r1, #0
 80006d2:	4809      	ldr	r0, [pc, #36]	@ (80006f8 <MX_LPUART1_UART_Init+0x90>)
 80006d4:	f005 f910 	bl	80058f8 <HAL_UARTEx_SetRxFifoThreshold>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 80006de:	f000 f87f 	bl	80007e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80006e2:	4805      	ldr	r0, [pc, #20]	@ (80006f8 <MX_LPUART1_UART_Init+0x90>)
 80006e4:	f005 f891 	bl	800580a <HAL_UARTEx_DisableFifoMode>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 80006ee:	f000 f877 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	2000008c 	.word	0x2000008c
 80006fc:	40008000 	.word	0x40008000
 8000700:	00033324 	.word	0x00033324

08000704 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000708:	4b17      	ldr	r3, [pc, #92]	@ (8000768 <MX_SAI1_Init+0x64>)
 800070a:	4a18      	ldr	r2, [pc, #96]	@ (800076c <MX_SAI1_Init+0x68>)
 800070c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 800070e:	4b16      	ldr	r3, [pc, #88]	@ (8000768 <MX_SAI1_Init+0x64>)
 8000710:	2201      	movs	r2, #1
 8000712:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000714:	4b14      	ldr	r3, [pc, #80]	@ (8000768 <MX_SAI1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800071a:	4b13      	ldr	r3, [pc, #76]	@ (8000768 <MX_SAI1_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000720:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <MX_SAI1_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000726:	4b10      	ldr	r3, [pc, #64]	@ (8000768 <MX_SAI1_Init+0x64>)
 8000728:	2200      	movs	r2, #0
 800072a:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800072c:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <MX_SAI1_Init+0x64>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 8000732:	4b0d      	ldr	r3, [pc, #52]	@ (8000768 <MX_SAI1_Init+0x64>)
 8000734:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000738:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	@ (8000768 <MX_SAI1_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_MONOMODE;
 8000740:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <MX_SAI1_Init+0x64>)
 8000742:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000746:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000748:	4b07      	ldr	r3, [pc, #28]	@ (8000768 <MX_SAI1_Init+0x64>)
 800074a:	2200      	movs	r2, #0
 800074c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 800074e:	2302      	movs	r3, #2
 8000750:	2200      	movs	r2, #0
 8000752:	2101      	movs	r1, #1
 8000754:	4804      	ldr	r0, [pc, #16]	@ (8000768 <MX_SAI1_Init+0x64>)
 8000756:	f003 fe0b 	bl	8004370 <HAL_SAI_InitProtocol>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_SAI1_Init+0x60>
  {
    Error_Handler();
 8000760:	f000 f83e 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000120 	.word	0x20000120
 800076c:	40015404 	.word	0x40015404

08000770 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000774:	2004      	movs	r0, #4
 8000776:	f7ff fea0 	bl	80004ba <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800077a:	2001      	movs	r0, #1
 800077c:	f7ff fe9d 	bl	80004ba <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000780:	2200      	movs	r2, #0
 8000782:	2100      	movs	r1, #0
 8000784:	200b      	movs	r0, #11
 8000786:	f000 fc4a 	bl	800101e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800078a:	200b      	movs	r0, #11
 800078c:	f000 fc61 	bl	8001052 <HAL_NVIC_EnableIRQ>

}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000798:	2002      	movs	r0, #2
 800079a:	f7ff fea7 	bl	80004ec <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	2001      	movs	r0, #1
 80007a0:	f7ff fea4 	bl	80004ec <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	60f8      	str	r0, [r7, #12]
 80007b0:	60b9      	str	r1, [r7, #8]
 80007b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for(DataIdx = 0; DataIdx < len; DataIdx++){
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	e009      	b.n	80007ce <_write+0x26>
		ITM_SendChar(*ptr++);
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	1c5a      	adds	r2, r3, #1
 80007be:	60ba      	str	r2, [r7, #8]
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fe52 	bl	800046c <ITM_SendChar>
	for(DataIdx = 0; DataIdx < len; DataIdx++){
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	3301      	adds	r3, #1
 80007cc:	617b      	str	r3, [r7, #20]
 80007ce:	697a      	ldr	r2, [r7, #20]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	dbf1      	blt.n	80007ba <_write+0x12>
	}
	return len;
 80007d6:	687b      	ldr	r3, [r7, #4]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3718      	adds	r7, #24
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e4:	b672      	cpsid	i
}
 80007e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e8:	bf00      	nop
 80007ea:	e7fd      	b.n	80007e8 <Error_Handler+0x8>

080007ec <LL_AHB2_GRP1_EnableClock>:
{
 80007ec:	b480      	push	{r7}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007f8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80007fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4313      	orrs	r3, r2
 8000802:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000804:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000808:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4013      	ands	r3, r2
 800080e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000810:	68fb      	ldr	r3, [r7, #12]
}
 8000812:	bf00      	nop
 8000814:	3714      	adds	r7, #20
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr

0800081e <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800081e:	b480      	push	{r7}
 8000820:	b085      	sub	sp, #20
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000826:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800082a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800082c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4313      	orrs	r3, r2
 8000834:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000836:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800083a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4013      	ands	r3, r2
 8000840:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000842:	68fb      	ldr	r3, [r7, #12]
}
 8000844:	bf00      	nop
 8000846:	3714      	adds	r7, #20
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000858:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800085c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800085e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4313      	orrs	r3, r2
 8000866:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000868:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800086c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4013      	ands	r3, r2
 8000872:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000874:	68fb      	ldr	r3, [r7, #12]
}
 8000876:	bf00      	nop
 8000878:	3714      	adds	r7, #20
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b09c      	sub	sp, #112	@ 0x70
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	2250      	movs	r2, #80	@ 0x50
 80008ae:	2100      	movs	r1, #0
 80008b0:	4618      	mov	r0, r3
 80008b2:	f005 faa5 	bl	8005e00 <memset>
  if(huart->Instance==LPUART1)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a16      	ldr	r2, [pc, #88]	@ (8000914 <HAL_UART_MspInit+0x84>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d124      	bne.n	800090a <HAL_UART_MspInit+0x7a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80008c0:	2302      	movs	r3, #2
 80008c2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008c8:	f107 030c 	add.w	r3, r7, #12
 80008cc:	4618      	mov	r0, r3
 80008ce:	f002 fcfa 	bl	80032c6 <HAL_RCCEx_PeriphCLKConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008d8:	f7ff ff82 	bl	80007e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80008dc:	2001      	movs	r0, #1
 80008de:	f7ff ff9e 	bl	800081e <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	2001      	movs	r0, #1
 80008e4:	f7ff ff82 	bl	80007ec <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008e8:	230c      	movs	r3, #12
 80008ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80008f8:	2308      	movs	r3, #8
 80008fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000900:	4619      	mov	r1, r3
 8000902:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000906:	f000 fe39 	bl	800157c <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 800090a:	bf00      	nop
 800090c:	3770      	adds	r7, #112	@ 0x70
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40008000 	.word	0x40008000

08000918 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b09c      	sub	sp, #112	@ 0x70
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000920:	f107 030c 	add.w	r3, r7, #12
 8000924:	2250      	movs	r2, #80	@ 0x50
 8000926:	2100      	movs	r1, #0
 8000928:	4618      	mov	r0, r3
 800092a:	f005 fa69 	bl	8005e00 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a47      	ldr	r2, [pc, #284]	@ (8000a50 <HAL_SAI_MspInit+0x138>)
 8000934:	4293      	cmp	r3, r2
 8000936:	f040 8087 	bne.w	8000a48 <HAL_SAI_MspInit+0x130>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800093a:	2340      	movs	r3, #64	@ 0x40
 800093c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800093e:	2318      	movs	r3, #24
 8000940:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000942:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000946:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000948:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800094c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800094e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000952:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8000954:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000958:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 800095a:	2300      	movs	r3, #0
 800095c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800095e:	f107 030c 	add.w	r3, r7, #12
 8000962:	4618      	mov	r0, r3
 8000964:	f002 fcaf 	bl	80032c6 <HAL_RCCEx_PeriphCLKConfig>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <HAL_SAI_MspInit+0x5a>
    {
      Error_Handler();
 800096e:	f7ff ff37 	bl	80007e0 <Error_Handler>
    }

    if (SAI1_client == 0)
 8000972:	4b38      	ldr	r3, [pc, #224]	@ (8000a54 <HAL_SAI_MspInit+0x13c>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d10b      	bne.n	8000992 <HAL_SAI_MspInit+0x7a>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800097a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800097e:	f7ff ff67 	bl	8000850 <LL_APB2_GRP1_EnableClock>

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	2100      	movs	r1, #0
 8000986:	2026      	movs	r0, #38	@ 0x26
 8000988:	f000 fb49 	bl	800101e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 800098c:	2026      	movs	r0, #38	@ 0x26
 800098e:	f000 fb60 	bl	8001052 <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
 8000992:	4b30      	ldr	r3, [pc, #192]	@ (8000a54 <HAL_SAI_MspInit+0x13c>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	3301      	adds	r3, #1
 8000998:	4a2e      	ldr	r2, [pc, #184]	@ (8000a54 <HAL_SAI_MspInit+0x13c>)
 800099a:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PB9     ------> SAI1_FS_A
    PA8     ------> SAI1_SCK_A
    PA10     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800099c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80009ae:	230d      	movs	r3, #13
 80009b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80009b6:	4619      	mov	r1, r3
 80009b8:	4827      	ldr	r0, [pc, #156]	@ (8000a58 <HAL_SAI_MspInit+0x140>)
 80009ba:	f000 fddf 	bl	800157c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80009be:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80009c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c4:	2302      	movs	r3, #2
 80009c6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80009d0:	230d      	movs	r3, #13
 80009d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80009d8:	4619      	mov	r1, r3
 80009da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009de:	f000 fdcd 	bl	800157c <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Channel1;
 80009e2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a5c <HAL_SAI_MspInit+0x144>)
 80009e4:	4a1e      	ldr	r2, [pc, #120]	@ (8000a60 <HAL_SAI_MspInit+0x148>)
 80009e6:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 80009e8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a5c <HAL_SAI_MspInit+0x144>)
 80009ea:	2212      	movs	r2, #18
 80009ec:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009ee:	4b1b      	ldr	r3, [pc, #108]	@ (8000a5c <HAL_SAI_MspInit+0x144>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80009f4:	4b19      	ldr	r3, [pc, #100]	@ (8000a5c <HAL_SAI_MspInit+0x144>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80009fa:	4b18      	ldr	r3, [pc, #96]	@ (8000a5c <HAL_SAI_MspInit+0x144>)
 80009fc:	2280      	movs	r2, #128	@ 0x80
 80009fe:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a00:	4b16      	ldr	r3, [pc, #88]	@ (8000a5c <HAL_SAI_MspInit+0x144>)
 8000a02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a06:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a08:	4b14      	ldr	r3, [pc, #80]	@ (8000a5c <HAL_SAI_MspInit+0x144>)
 8000a0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a0e:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8000a10:	4b12      	ldr	r3, [pc, #72]	@ (8000a5c <HAL_SAI_MspInit+0x144>)
 8000a12:	2220      	movs	r2, #32
 8000a14:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 8000a16:	4b11      	ldr	r3, [pc, #68]	@ (8000a5c <HAL_SAI_MspInit+0x144>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8000a1c:	480f      	ldr	r0, [pc, #60]	@ (8000a5c <HAL_SAI_MspInit+0x144>)
 8000a1e:	f000 fb33 	bl	8001088 <HAL_DMA_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <HAL_SAI_MspInit+0x114>
    {
      Error_Handler();
 8000a28:	f7ff feda 	bl	80007e0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4a0b      	ldr	r2, [pc, #44]	@ (8000a5c <HAL_SAI_MspInit+0x144>)
 8000a30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8000a34:	4a09      	ldr	r2, [pc, #36]	@ (8000a5c <HAL_SAI_MspInit+0x144>)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6293      	str	r3, [r2, #40]	@ 0x28

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a07      	ldr	r2, [pc, #28]	@ (8000a5c <HAL_SAI_MspInit+0x144>)
 8000a3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000a42:	4a06      	ldr	r2, [pc, #24]	@ (8000a5c <HAL_SAI_MspInit+0x144>)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6293      	str	r3, [r2, #40]	@ 0x28

    }
}
 8000a48:	bf00      	nop
 8000a4a:	3770      	adds	r7, #112	@ 0x70
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40015404 	.word	0x40015404
 8000a54:	20000218 	.word	0x20000218
 8000a58:	48000400 	.word	0x48000400
 8000a5c:	200001b8 	.word	0x200001b8
 8000a60:	40020008 	.word	0x40020008

08000a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a68:	bf00      	nop
 8000a6a:	e7fd      	b.n	8000a68 <NMI_Handler+0x4>

08000a6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a70:	bf00      	nop
 8000a72:	e7fd      	b.n	8000a70 <HardFault_Handler+0x4>

08000a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <MemManage_Handler+0x4>

08000a7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <BusFault_Handler+0x4>

08000a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <UsageFault_Handler+0x4>

08000a8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aba:	f000 f985 	bl	8000dc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8000ac8:	4802      	ldr	r0, [pc, #8]	@ (8000ad4 <DMA1_Channel1_IRQHandler+0x10>)
 8000aca:	f000 fc43 	bl	8001354 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200001b8 	.word	0x200001b8

08000ad8 <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 8000adc:	4802      	ldr	r0, [pc, #8]	@ (8000ae8 <SAI1_IRQHandler+0x10>)
 8000ade:	f003 fe75 	bl	80047cc <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000120 	.word	0x20000120

08000aec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	e00a      	b.n	8000b14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000afe:	f3af 8000 	nop.w
 8000b02:	4601      	mov	r1, r0
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	1c5a      	adds	r2, r3, #1
 8000b08:	60ba      	str	r2, [r7, #8]
 8000b0a:	b2ca      	uxtb	r2, r1
 8000b0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	3301      	adds	r3, #1
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	697a      	ldr	r2, [r7, #20]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	dbf0      	blt.n	8000afe <_read+0x12>
  }

  return len;
 8000b1c:	687b      	ldr	r3, [r7, #4]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b083      	sub	sp, #12
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	b083      	sub	sp, #12
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
 8000b46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b4e:	605a      	str	r2, [r3, #4]
  return 0;
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <_isatty>:

int _isatty(int file)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	b083      	sub	sp, #12
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b66:	2301      	movs	r3, #1
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3714      	adds	r7, #20
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
	...

08000b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b98:	4a14      	ldr	r2, [pc, #80]	@ (8000bec <_sbrk+0x5c>)
 8000b9a:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <_sbrk+0x60>)
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba4:	4b13      	ldr	r3, [pc, #76]	@ (8000bf4 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d102      	bne.n	8000bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bac:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <_sbrk+0x64>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	@ (8000bf8 <_sbrk+0x68>)
 8000bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bb2:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <_sbrk+0x64>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d207      	bcs.n	8000bd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc0:	f005 f96c 	bl	8005e9c <__errno>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bce:	e009      	b.n	8000be4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd0:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <_sbrk+0x64>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd6:	4b07      	ldr	r3, [pc, #28]	@ (8000bf4 <_sbrk+0x64>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	4a05      	ldr	r2, [pc, #20]	@ (8000bf4 <_sbrk+0x64>)
 8000be0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000be2:	68fb      	ldr	r3, [r7, #12]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3718      	adds	r7, #24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20030000 	.word	0x20030000
 8000bf0:	00000400 	.word	0x00000400
 8000bf4:	2000021c 	.word	0x2000021c
 8000bf8:	20000370 	.word	0x20000370

08000bfc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000c00:	4b24      	ldr	r3, [pc, #144]	@ (8000c94 <SystemInit+0x98>)
 8000c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c06:	4a23      	ldr	r2, [pc, #140]	@ (8000c94 <SystemInit+0x98>)
 8000c08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000c1a:	f043 0301 	orr.w	r3, r3, #1
 8000c1e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000c20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c24:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000c28:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000c2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c34:	4b18      	ldr	r3, [pc, #96]	@ (8000c98 <SystemInit+0x9c>)
 8000c36:	4013      	ands	r3, r2
 8000c38:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000c3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000c42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000c46:	f023 0305 	bic.w	r3, r3, #5
 8000c4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000c4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000c56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000c5a:	f023 0301 	bic.w	r3, r3, #1
 8000c5e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000c62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c66:	4a0d      	ldr	r2, [pc, #52]	@ (8000c9c <SystemInit+0xa0>)
 8000c68:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000c6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000c9c <SystemInit+0xa0>)
 8000c70:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000c7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c80:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c86:	2200      	movs	r2, #0
 8000c88:	619a      	str	r2, [r3, #24]
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00
 8000c98:	faf6fefb 	.word	0xfaf6fefb
 8000c9c:	22041000 	.word	0x22041000

08000ca0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000ca0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca4:	3304      	adds	r3, #4

08000ca6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000caa:	d3f9      	bcc.n	8000ca0 <CopyDataInit>
  bx lr
 8000cac:	4770      	bx	lr

08000cae <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000cae:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000cb0:	3004      	adds	r0, #4

08000cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000cb2:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000cb4:	d3fb      	bcc.n	8000cae <FillZerobss>
  bx lr
 8000cb6:	4770      	bx	lr

08000cb8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cb8:	480c      	ldr	r0, [pc, #48]	@ (8000cec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cbc:	f7ff ff9e 	bl	8000bfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000cc0:	480b      	ldr	r0, [pc, #44]	@ (8000cf0 <LoopForever+0x6>)
 8000cc2:	490c      	ldr	r1, [pc, #48]	@ (8000cf4 <LoopForever+0xa>)
 8000cc4:	4a0c      	ldr	r2, [pc, #48]	@ (8000cf8 <LoopForever+0xe>)
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f7ff ffed 	bl	8000ca6 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000ccc:	480b      	ldr	r0, [pc, #44]	@ (8000cfc <LoopForever+0x12>)
 8000cce:	490c      	ldr	r1, [pc, #48]	@ (8000d00 <LoopForever+0x16>)
 8000cd0:	4a0c      	ldr	r2, [pc, #48]	@ (8000d04 <LoopForever+0x1a>)
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	f7ff ffe7 	bl	8000ca6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000cd8:	480b      	ldr	r0, [pc, #44]	@ (8000d08 <LoopForever+0x1e>)
 8000cda:	490c      	ldr	r1, [pc, #48]	@ (8000d0c <LoopForever+0x22>)
 8000cdc:	2300      	movs	r3, #0
 8000cde:	f7ff ffe8 	bl	8000cb2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ce2:	f005 f8e1 	bl	8005ea8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000ce6:	f7ff fc1b 	bl	8000520 <main>

08000cea <LoopForever>:

LoopForever:
  b LoopForever
 8000cea:	e7fe      	b.n	8000cea <LoopForever>
  ldr   r0, =_estack
 8000cec:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000cf0:	20000008 	.word	0x20000008
 8000cf4:	20000070 	.word	0x20000070
 8000cf8:	080064f4 	.word	0x080064f4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000cfc:	20030000 	.word	0x20030000
 8000d00:	20030000 	.word	0x20030000
 8000d04:	0800655c 	.word	0x0800655c
  INIT_BSS _sbss, _ebss
 8000d08:	20000070 	.word	0x20000070
 8000d0c:	20000370 	.word	0x20000370

08000d10 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d10:	e7fe      	b.n	8000d10 <ADC1_IRQHandler>
	...

08000d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <HAL_Init+0x3c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a0b      	ldr	r2, [pc, #44]	@ (8000d50 <HAL_Init+0x3c>)
 8000d24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d28:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d2a:	2003      	movs	r0, #3
 8000d2c:	f000 f96c 	bl	8001008 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d30:	200f      	movs	r0, #15
 8000d32:	f000 f80f 	bl	8000d54 <HAL_InitTick>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d002      	beq.n	8000d42 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	71fb      	strb	r3, [r7, #7]
 8000d40:	e001      	b.n	8000d46 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d42:	f7ff fd9e 	bl	8000882 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d46:	79fb      	ldrb	r3, [r7, #7]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	58004000 	.word	0x58004000

08000d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000d60:	4b17      	ldr	r3, [pc, #92]	@ (8000dc0 <HAL_InitTick+0x6c>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d024      	beq.n	8000db2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d68:	f001 fe2e 	bl	80029c8 <HAL_RCC_GetHCLKFreq>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	4b14      	ldr	r3, [pc, #80]	@ (8000dc0 <HAL_InitTick+0x6c>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	4619      	mov	r1, r3
 8000d74:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d78:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d80:	4618      	mov	r0, r3
 8000d82:	f000 f974 	bl	800106e <HAL_SYSTICK_Config>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d10f      	bne.n	8000dac <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b0f      	cmp	r3, #15
 8000d90:	d809      	bhi.n	8000da6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d92:	2200      	movs	r2, #0
 8000d94:	6879      	ldr	r1, [r7, #4]
 8000d96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d9a:	f000 f940 	bl	800101e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d9e:	4a09      	ldr	r2, [pc, #36]	@ (8000dc4 <HAL_InitTick+0x70>)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6013      	str	r3, [r2, #0]
 8000da4:	e007      	b.n	8000db6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	73fb      	strb	r3, [r7, #15]
 8000daa:	e004      	b.n	8000db6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	73fb      	strb	r3, [r7, #15]
 8000db0:	e001      	b.n	8000db6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000010 	.word	0x20000010
 8000dc4:	2000000c 	.word	0x2000000c

08000dc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dcc:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <HAL_IncTick+0x20>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <HAL_IncTick+0x24>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	4a04      	ldr	r2, [pc, #16]	@ (8000dec <HAL_IncTick+0x24>)
 8000dda:	6013      	str	r3, [r2, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20000010 	.word	0x20000010
 8000dec:	20000220 	.word	0x20000220

08000df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return uwTick;
 8000df4:	4b03      	ldr	r3, [pc, #12]	@ (8000e04 <HAL_GetTick+0x14>)
 8000df6:	681b      	ldr	r3, [r3, #0]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	20000220 	.word	0x20000220

08000e08 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000e0c:	4b03      	ldr	r3, [pc, #12]	@ (8000e1c <HAL_GetTickPrio+0x14>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	2000000c 	.word	0x2000000c

08000e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e28:	f7ff ffe2 	bl	8000df0 <HAL_GetTick>
 8000e2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e38:	d005      	beq.n	8000e46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e64 <HAL_Delay+0x44>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4413      	add	r3, r2
 8000e44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e46:	bf00      	nop
 8000e48:	f7ff ffd2 	bl	8000df0 <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d8f7      	bhi.n	8000e48 <HAL_Delay+0x28>
  {
  }
}
 8000e58:	bf00      	nop
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000010 	.word	0x20000010

08000e68 <__NVIC_SetPriorityGrouping>:
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e78:	4b0c      	ldr	r3, [pc, #48]	@ (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e84:	4013      	ands	r3, r2
 8000e86:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9a:	4a04      	ldr	r2, [pc, #16]	@ (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	60d3      	str	r3, [r2, #12]
}
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_GetPriorityGrouping>:
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb4:	4b04      	ldr	r3, [pc, #16]	@ (8000ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	f003 0307 	and.w	r3, r3, #7
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_EnableIRQ>:
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	db0b      	blt.n	8000ef6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	f003 021f 	and.w	r2, r3, #31
 8000ee4:	4907      	ldr	r1, [pc, #28]	@ (8000f04 <__NVIC_EnableIRQ+0x38>)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	095b      	lsrs	r3, r3, #5
 8000eec:	2001      	movs	r0, #1
 8000eee:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000e100 	.word	0xe000e100

08000f08 <__NVIC_SetPriority>:
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	db0a      	blt.n	8000f32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	490c      	ldr	r1, [pc, #48]	@ (8000f54 <__NVIC_SetPriority+0x4c>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	0112      	lsls	r2, r2, #4
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000f30:	e00a      	b.n	8000f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4908      	ldr	r1, [pc, #32]	@ (8000f58 <__NVIC_SetPriority+0x50>)
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	3b04      	subs	r3, #4
 8000f40:	0112      	lsls	r2, r2, #4
 8000f42:	b2d2      	uxtb	r2, r2
 8000f44:	440b      	add	r3, r1
 8000f46:	761a      	strb	r2, [r3, #24]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000e100 	.word	0xe000e100
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <NVIC_EncodePriority>:
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	@ 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f1c3 0307 	rsb	r3, r3, #7
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	bf28      	it	cs
 8000f7a:	2304      	movcs	r3, #4
 8000f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3304      	adds	r3, #4
 8000f82:	2b06      	cmp	r3, #6
 8000f84:	d902      	bls.n	8000f8c <NVIC_EncodePriority+0x30>
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3b03      	subs	r3, #3
 8000f8a:	e000      	b.n	8000f8e <NVIC_EncodePriority+0x32>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43da      	mvns	r2, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	43d9      	mvns	r1, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	4313      	orrs	r3, r2
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3724      	adds	r7, #36	@ 0x24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <SysTick_Config>:
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fd4:	d301      	bcc.n	8000fda <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e00f      	b.n	8000ffa <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fda:	4a0a      	ldr	r2, [pc, #40]	@ (8001004 <SysTick_Config+0x40>)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe2:	210f      	movs	r1, #15
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fe8:	f7ff ff8e 	bl	8000f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fec:	4b05      	ldr	r3, [pc, #20]	@ (8001004 <SysTick_Config+0x40>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff2:	4b04      	ldr	r3, [pc, #16]	@ (8001004 <SysTick_Config+0x40>)
 8000ff4:	2207      	movs	r2, #7
 8000ff6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	e000e010 	.word	0xe000e010

08001008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff ff29 	bl	8000e68 <__NVIC_SetPriorityGrouping>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b086      	sub	sp, #24
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	60b9      	str	r1, [r7, #8]
 8001028:	607a      	str	r2, [r7, #4]
 800102a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800102c:	f7ff ff40 	bl	8000eb0 <__NVIC_GetPriorityGrouping>
 8001030:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	6978      	ldr	r0, [r7, #20]
 8001038:	f7ff ff90 	bl	8000f5c <NVIC_EncodePriority>
 800103c:	4602      	mov	r2, r0
 800103e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001042:	4611      	mov	r1, r2
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff5f 	bl	8000f08 <__NVIC_SetPriority>
}
 800104a:	bf00      	nop
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	4603      	mov	r3, r0
 800105a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff33 	bl	8000ecc <__NVIC_EnableIRQ>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ffa4 	bl	8000fc4 <SysTick_Config>
 800107c:	4603      	mov	r3, r0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e08e      	b.n	80011b8 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	4b47      	ldr	r3, [pc, #284]	@ (80011c0 <HAL_DMA_Init+0x138>)
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d80f      	bhi.n	80010c6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	4b45      	ldr	r3, [pc, #276]	@ (80011c4 <HAL_DMA_Init+0x13c>)
 80010ae:	4413      	add	r3, r2
 80010b0:	4a45      	ldr	r2, [pc, #276]	@ (80011c8 <HAL_DMA_Init+0x140>)
 80010b2:	fba2 2303 	umull	r2, r3, r2, r3
 80010b6:	091b      	lsrs	r3, r3, #4
 80010b8:	009a      	lsls	r2, r3, #2
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a42      	ldr	r2, [pc, #264]	@ (80011cc <HAL_DMA_Init+0x144>)
 80010c2:	641a      	str	r2, [r3, #64]	@ 0x40
 80010c4:	e00e      	b.n	80010e4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	461a      	mov	r2, r3
 80010cc:	4b40      	ldr	r3, [pc, #256]	@ (80011d0 <HAL_DMA_Init+0x148>)
 80010ce:	4413      	add	r3, r2
 80010d0:	4a3d      	ldr	r2, [pc, #244]	@ (80011c8 <HAL_DMA_Init+0x140>)
 80010d2:	fba2 2303 	umull	r2, r3, r2, r3
 80010d6:	091b      	lsrs	r3, r3, #4
 80010d8:	009a      	lsls	r2, r3, #2
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a3c      	ldr	r2, [pc, #240]	@ (80011d4 <HAL_DMA_Init+0x14c>)
 80010e2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2202      	movs	r2, #2
 80010e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80010fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80010fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001108:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001114:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	699b      	ldr	r3, [r3, #24]
 800111a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001120:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a1b      	ldr	r3, [r3, #32]
 8001126:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001128:	68fa      	ldr	r2, [r7, #12]
 800112a:	4313      	orrs	r3, r2
 800112c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f000 f9bc 	bl	80014b4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001144:	d102      	bne.n	800114c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685a      	ldr	r2, [r3, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001154:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001158:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001162:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d010      	beq.n	800118e <HAL_DMA_Init+0x106>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	2b04      	cmp	r3, #4
 8001172:	d80c      	bhi.n	800118e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f000 f9db 	bl	8001530 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	e008      	b.n	80011a0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2201      	movs	r2, #1
 80011aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40020407 	.word	0x40020407
 80011c4:	bffdfff8 	.word	0xbffdfff8
 80011c8:	cccccccd 	.word	0xcccccccd
 80011cc:	40020000 	.word	0x40020000
 80011d0:	bffdfbf8 	.word	0xbffdfbf8
 80011d4:	40020400 	.word	0x40020400

080011d8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e04f      	b.n	800128a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d008      	beq.n	8001208 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2204      	movs	r2, #4
 80011fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e040      	b.n	800128a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f022 020e 	bic.w	r2, r2, #14
 8001216:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001222:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001226:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f022 0201 	bic.w	r2, r2, #1
 8001236:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123c:	f003 021c 	and.w	r2, r3, #28
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001244:	2101      	movs	r1, #1
 8001246:	fa01 f202 	lsl.w	r2, r1, r2
 800124a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001254:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00c      	beq.n	8001278 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001268:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800126c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001276:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2201      	movs	r2, #1
 800127c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b084      	sub	sp, #16
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800129e:	2300      	movs	r3, #0
 80012a0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d005      	beq.n	80012ba <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2204      	movs	r2, #4
 80012b2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	73fb      	strb	r3, [r7, #15]
 80012b8:	e047      	b.n	800134a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f022 020e 	bic.w	r2, r2, #14
 80012c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f022 0201 	bic.w	r2, r2, #1
 80012d8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80012e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ee:	f003 021c 	and.w	r2, r3, #28
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f6:	2101      	movs	r1, #1
 80012f8:	fa01 f202 	lsl.w	r2, r1, r2
 80012fc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001306:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800130c:	2b00      	cmp	r3, #0
 800130e:	d00c      	beq.n	800132a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800131a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800131e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001328:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2201      	movs	r2, #1
 800132e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	4798      	blx	r3
    }
  }
  return status;
 800134a:	7bfb      	ldrb	r3, [r7, #15]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001370:	f003 031c 	and.w	r3, r3, #28
 8001374:	2204      	movs	r2, #4
 8001376:	409a      	lsls	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4013      	ands	r3, r2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d026      	beq.n	80013ce <HAL_DMA_IRQHandler+0x7a>
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	f003 0304 	and.w	r3, r3, #4
 8001386:	2b00      	cmp	r3, #0
 8001388:	d021      	beq.n	80013ce <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0320 	and.w	r3, r3, #32
 8001394:	2b00      	cmp	r3, #0
 8001396:	d107      	bne.n	80013a8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 0204 	bic.w	r2, r2, #4
 80013a6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ac:	f003 021c 	and.w	r2, r3, #28
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b4:	2104      	movs	r1, #4
 80013b6:	fa01 f202 	lsl.w	r2, r1, r2
 80013ba:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d071      	beq.n	80014a8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80013cc:	e06c      	b.n	80014a8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d2:	f003 031c 	and.w	r3, r3, #28
 80013d6:	2202      	movs	r2, #2
 80013d8:	409a      	lsls	r2, r3
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4013      	ands	r3, r2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d02e      	beq.n	8001440 <HAL_DMA_IRQHandler+0xec>
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d029      	beq.n	8001440 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0320 	and.w	r3, r3, #32
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d10b      	bne.n	8001412 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f022 020a 	bic.w	r2, r2, #10
 8001408:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2201      	movs	r2, #1
 800140e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001416:	f003 021c 	and.w	r2, r3, #28
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141e:	2102      	movs	r1, #2
 8001420:	fa01 f202 	lsl.w	r2, r1, r2
 8001424:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001432:	2b00      	cmp	r3, #0
 8001434:	d038      	beq.n	80014a8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800143e:	e033      	b.n	80014a8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001444:	f003 031c 	and.w	r3, r3, #28
 8001448:	2208      	movs	r2, #8
 800144a:	409a      	lsls	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4013      	ands	r3, r2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d02a      	beq.n	80014aa <HAL_DMA_IRQHandler+0x156>
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	2b00      	cmp	r3, #0
 800145c:	d025      	beq.n	80014aa <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 020e 	bic.w	r2, r2, #14
 800146c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001472:	f003 021c 	and.w	r2, r3, #28
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147a:	2101      	movs	r1, #1
 800147c:	fa01 f202 	lsl.w	r2, r1, r2
 8001480:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2201      	movs	r2, #1
 8001486:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800149c:	2b00      	cmp	r3, #0
 800149e:	d004      	beq.n	80014aa <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80014a8:	bf00      	nop
 80014aa:	bf00      	nop
}
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b17      	ldr	r3, [pc, #92]	@ (8001520 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d80a      	bhi.n	80014de <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014cc:	089b      	lsrs	r3, r3, #2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80014d4:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	6493      	str	r3, [r2, #72]	@ 0x48
 80014dc:	e007      	b.n	80014ee <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e2:	089b      	lsrs	r3, r3, #2
 80014e4:	009a      	lsls	r2, r3, #2
 80014e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001524 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80014e8:	4413      	add	r3, r2
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	3b08      	subs	r3, #8
 80014f6:	4a0c      	ldr	r2, [pc, #48]	@ (8001528 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80014f8:	fba2 2303 	umull	r2, r3, r2, r3
 80014fc:	091b      	lsrs	r3, r3, #4
 80014fe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4a0a      	ldr	r2, [pc, #40]	@ (800152c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001504:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f003 031f 	and.w	r3, r3, #31
 800150c:	2201      	movs	r2, #1
 800150e:	409a      	lsls	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001514:	bf00      	nop
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	40020407 	.word	0x40020407
 8001524:	4002081c 	.word	0x4002081c
 8001528:	cccccccd 	.word	0xcccccccd
 800152c:	40020880 	.word	0x40020880

08001530 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001540:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	4b0b      	ldr	r3, [pc, #44]	@ (8001574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001546:	4413      	add	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	461a      	mov	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a09      	ldr	r2, [pc, #36]	@ (8001578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8001554:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	3b01      	subs	r3, #1
 800155a:	f003 0303 	and.w	r3, r3, #3
 800155e:	2201      	movs	r2, #1
 8001560:	409a      	lsls	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001566:	bf00      	nop
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	1000823f 	.word	0x1000823f
 8001578:	40020940 	.word	0x40020940

0800157c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800157c:	b480      	push	{r7}
 800157e:	b087      	sub	sp, #28
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800158a:	e14c      	b.n	8001826 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	2101      	movs	r1, #1
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	fa01 f303 	lsl.w	r3, r1, r3
 8001598:	4013      	ands	r3, r2
 800159a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f000 813e 	beq.w	8001820 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 0303 	and.w	r3, r3, #3
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d005      	beq.n	80015bc <HAL_GPIO_Init+0x40>
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 0303 	and.w	r3, r3, #3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d130      	bne.n	800161e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	2203      	movs	r2, #3
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4013      	ands	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	68da      	ldr	r2, [r3, #12]
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015f2:	2201      	movs	r2, #1
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43db      	mvns	r3, r3
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	091b      	lsrs	r3, r3, #4
 8001608:	f003 0201 	and.w	r2, r3, #1
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4313      	orrs	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f003 0303 	and.w	r3, r3, #3
 8001626:	2b03      	cmp	r3, #3
 8001628:	d017      	beq.n	800165a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	2203      	movs	r2, #3
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43db      	mvns	r3, r3
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4013      	ands	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f003 0303 	and.w	r3, r3, #3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d123      	bne.n	80016ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	08da      	lsrs	r2, r3, #3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	3208      	adds	r2, #8
 800166e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001672:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	220f      	movs	r2, #15
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43db      	mvns	r3, r3
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	4013      	ands	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	691a      	ldr	r2, [r3, #16]
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	f003 0307 	and.w	r3, r3, #7
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4313      	orrs	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	08da      	lsrs	r2, r3, #3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3208      	adds	r2, #8
 80016a8:	6939      	ldr	r1, [r7, #16]
 80016aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	2203      	movs	r2, #3
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43db      	mvns	r3, r3
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	4013      	ands	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f003 0203 	and.w	r2, r3, #3
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 8098 	beq.w	8001820 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80016f0:	4a54      	ldr	r2, [pc, #336]	@ (8001844 <HAL_GPIO_Init+0x2c8>)
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	089b      	lsrs	r3, r3, #2
 80016f6:	3302      	adds	r3, #2
 80016f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	f003 0303 	and.w	r3, r3, #3
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	220f      	movs	r2, #15
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4013      	ands	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800171a:	d019      	beq.n	8001750 <HAL_GPIO_Init+0x1d4>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a4a      	ldr	r2, [pc, #296]	@ (8001848 <HAL_GPIO_Init+0x2cc>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d013      	beq.n	800174c <HAL_GPIO_Init+0x1d0>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a49      	ldr	r2, [pc, #292]	@ (800184c <HAL_GPIO_Init+0x2d0>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d00d      	beq.n	8001748 <HAL_GPIO_Init+0x1cc>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a48      	ldr	r2, [pc, #288]	@ (8001850 <HAL_GPIO_Init+0x2d4>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d007      	beq.n	8001744 <HAL_GPIO_Init+0x1c8>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a47      	ldr	r2, [pc, #284]	@ (8001854 <HAL_GPIO_Init+0x2d8>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d101      	bne.n	8001740 <HAL_GPIO_Init+0x1c4>
 800173c:	2304      	movs	r3, #4
 800173e:	e008      	b.n	8001752 <HAL_GPIO_Init+0x1d6>
 8001740:	2307      	movs	r3, #7
 8001742:	e006      	b.n	8001752 <HAL_GPIO_Init+0x1d6>
 8001744:	2303      	movs	r3, #3
 8001746:	e004      	b.n	8001752 <HAL_GPIO_Init+0x1d6>
 8001748:	2302      	movs	r3, #2
 800174a:	e002      	b.n	8001752 <HAL_GPIO_Init+0x1d6>
 800174c:	2301      	movs	r3, #1
 800174e:	e000      	b.n	8001752 <HAL_GPIO_Init+0x1d6>
 8001750:	2300      	movs	r3, #0
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	f002 0203 	and.w	r2, r2, #3
 8001758:	0092      	lsls	r2, r2, #2
 800175a:	4093      	lsls	r3, r2
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	4313      	orrs	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001762:	4938      	ldr	r1, [pc, #224]	@ (8001844 <HAL_GPIO_Init+0x2c8>)
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	089b      	lsrs	r3, r3, #2
 8001768:	3302      	adds	r3, #2
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001770:	4b39      	ldr	r3, [pc, #228]	@ (8001858 <HAL_GPIO_Init+0x2dc>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	43db      	mvns	r3, r3
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	4013      	ands	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d003      	beq.n	8001794 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	4313      	orrs	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001794:	4a30      	ldr	r2, [pc, #192]	@ (8001858 <HAL_GPIO_Init+0x2dc>)
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800179a:	4b2f      	ldr	r3, [pc, #188]	@ (8001858 <HAL_GPIO_Init+0x2dc>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	43db      	mvns	r3, r3
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	4013      	ands	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017be:	4a26      	ldr	r2, [pc, #152]	@ (8001858 <HAL_GPIO_Init+0x2dc>)
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80017c4:	4b24      	ldr	r3, [pc, #144]	@ (8001858 <HAL_GPIO_Init+0x2dc>)
 80017c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	43db      	mvns	r3, r3
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	4013      	ands	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017ea:	4a1b      	ldr	r2, [pc, #108]	@ (8001858 <HAL_GPIO_Init+0x2dc>)
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80017f2:	4b19      	ldr	r3, [pc, #100]	@ (8001858 <HAL_GPIO_Init+0x2dc>)
 80017f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80017f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	43db      	mvns	r3, r3
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	4013      	ands	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d003      	beq.n	8001818 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	4313      	orrs	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001818:	4a0f      	ldr	r2, [pc, #60]	@ (8001858 <HAL_GPIO_Init+0x2dc>)
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	3301      	adds	r3, #1
 8001824:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	fa22 f303 	lsr.w	r3, r2, r3
 8001830:	2b00      	cmp	r3, #0
 8001832:	f47f aeab 	bne.w	800158c <HAL_GPIO_Init+0x10>
  }
}
 8001836:	bf00      	nop
 8001838:	bf00      	nop
 800183a:	371c      	adds	r7, #28
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	40010000 	.word	0x40010000
 8001848:	48000400 	.word	0x48000400
 800184c:	48000800 	.word	0x48000800
 8001850:	48000c00 	.word	0x48000c00
 8001854:	48001000 	.word	0x48001000
 8001858:	58000800 	.word	0x58000800

0800185c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001860:	4b05      	ldr	r3, [pc, #20]	@ (8001878 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a04      	ldr	r2, [pc, #16]	@ (8001878 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001866:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800186a:	6013      	str	r3, [r2, #0]
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	58000400 	.word	0x58000400

0800187c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001880:	4b04      	ldr	r3, [pc, #16]	@ (8001894 <HAL_PWREx_GetVoltageRange+0x18>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8001888:	4618      	mov	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	58000400 	.word	0x58000400

08001898 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800189c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80018aa:	d101      	bne.n	80018b0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80018ac:	2301      	movs	r3, #1
 80018ae:	e000      	b.n	80018b2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80018c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018ce:	6013      	str	r3, [r2, #0]
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80018de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018ec:	6013      	str	r3, [r2, #0]
}
 80018ee:	bf00      	nop
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80018fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001906:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800190a:	d101      	bne.n	8001910 <LL_RCC_HSE_IsReady+0x18>
 800190c:	2301      	movs	r3, #1
 800190e:	e000      	b.n	8001912 <LL_RCC_HSE_IsReady+0x1a>
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001920:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800192a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800192e:	6013      	str	r3, [r2, #0]
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800193e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001948:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800194c:	6013      	str	r3, [r2, #0]
}
 800194e:	bf00      	nop
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800195c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001966:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800196a:	d101      	bne.n	8001970 <LL_RCC_HSI_IsReady+0x18>
 800196c:	2301      	movs	r3, #1
 800196e:	e000      	b.n	8001972 <LL_RCC_HSI_IsReady+0x1a>
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001984:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	061b      	lsls	r3, r3, #24
 8001992:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001996:	4313      	orrs	r3, r2
 8001998:	604b      	str	r3, [r1, #4]
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80019aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019b6:	f043 0301 	orr.w	r3, r3, #1
 80019ba:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80019be:	bf00      	nop
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80019cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019d8:	f023 0301 	bic.w	r3, r3, #1
 80019dc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80019ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d101      	bne.n	8001a02 <LL_RCC_HSI48_IsReady+0x18>
 80019fe:	2301      	movs	r3, #1
 8001a00:	e000      	b.n	8001a04 <LL_RCC_HSI48_IsReady+0x1a>
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a40:	f023 0301 	bic.w	r3, r3, #1
 8001a44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a62:	f043 0304 	orr.w	r3, r3, #4
 8001a66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001a6a:	bf00      	nop
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a84:	f023 0304 	bic.w	r3, r3, #4
 8001a88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001a9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d101      	bne.n	8001aae <LL_RCC_LSE_IsReady+0x18>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <LL_RCC_LSE_IsReady+0x1a>
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001abe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ac6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001ae0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ae8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001aec:	f023 0301 	bic.w	r3, r3, #1
 8001af0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001b02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d101      	bne.n	8001b16 <LL_RCC_LSI1_IsReady+0x18>
 8001b12:	2301      	movs	r3, #1
 8001b14:	e000      	b.n	8001b18 <LL_RCC_LSI1_IsReady+0x1a>
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001b26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b2e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b32:	f043 0304 	orr.w	r3, r3, #4
 8001b36:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001b3a:	bf00      	nop
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001b48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b54:	f023 0304 	bic.w	r3, r3, #4
 8001b58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001b6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b08      	cmp	r3, #8
 8001b78:	d101      	bne.n	8001b7e <LL_RCC_LSI2_IsReady+0x18>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <LL_RCC_LSI2_IsReady+0x1a>
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001b92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b9a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	021b      	lsls	r3, r3, #8
 8001ba2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001bbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	6013      	str	r3, [r2, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001bda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001be4:	f023 0301 	bic.w	r3, r3, #1
 8001be8:	6013      	str	r3, [r2, #0]
}
 8001bea:	bf00      	nop
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001bf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d101      	bne.n	8001c0a <LL_RCC_MSI_IsReady+0x16>
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <LL_RCC_MSI_IsReady+0x18>
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001c1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c28:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	600b      	str	r3, [r1, #0]
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001c44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c4e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2bb0      	cmp	r3, #176	@ 0xb0
 8001c54:	d901      	bls.n	8001c5a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001c56:	23b0      	movs	r3, #176	@ 0xb0
 8001c58:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001c5a:	687b      	ldr	r3, [r7, #4]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001c70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	021b      	lsls	r3, r3, #8
 8001c7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c82:	4313      	orrs	r3, r2
 8001c84:	604b      	str	r3, [r1, #4]
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001c9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f023 0203 	bic.w	r2, r3, #3
 8001ca4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	608b      	str	r3, [r1, #8]
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001cbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 030c 	and.w	r3, r3, #12
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001cda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ce4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	608b      	str	r3, [r1, #8]
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001d02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d06:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001d0a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001d2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d32:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001d36:	f023 020f 	bic.w	r2, r3, #15
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	091b      	lsrs	r3, r3, #4
 8001d3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d42:	4313      	orrs	r3, r2
 8001d44:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001d5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	608b      	str	r3, [r1, #8]
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001d84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	608b      	str	r3, [r1, #8]
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001da8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001dc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dc4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001dc8:	011b      	lsls	r3, r3, #4
 8001dca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001ddc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001df4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001e0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e1a:	6013      	str	r3, [r2, #0]
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001e2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e34:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e38:	6013      	str	r3, [r2, #0]
}
 8001e3a:	bf00      	nop
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001e48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e56:	d101      	bne.n	8001e5c <LL_RCC_PLL_IsReady+0x18>
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e000      	b.n	8001e5e <LL_RCC_PLL_IsReady+0x1a>
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001e6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	0a1b      	lsrs	r3, r3, #8
 8001e74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001e82:	b480      	push	{r7}
 8001e84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001e86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001e9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001eb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	f003 0303 	and.w	r3, r3, #3
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001ece:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ed8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001edc:	d101      	bne.n	8001ee2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e000      	b.n	8001ee4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001ef2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ef6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001efe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001f02:	d101      	bne.n	8001f08 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001f04:	2301      	movs	r3, #1
 8001f06:	e000      	b.n	8001f0a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001f18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f1c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001f20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f28:	d101      	bne.n	8001f2e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001f3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001f4c:	d101      	bne.n	8001f52 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e000      	b.n	8001f54 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001f62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f6c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001f70:	d101      	bne.n	8001f76 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001f72:	2301      	movs	r3, #1
 8001f74:	e000      	b.n	8001f78 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
	...

08001f84 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f84:	b590      	push	{r4, r7, lr}
 8001f86:	b08d      	sub	sp, #52	@ 0x34
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e363      	b.n	800265e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0320 	and.w	r3, r3, #32
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 808d 	beq.w	80020be <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fa4:	f7ff fe89 	bl	8001cba <LL_RCC_GetSysClkSource>
 8001fa8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001faa:	f7ff ff82 	bl	8001eb2 <LL_RCC_PLL_GetMainSource>
 8001fae:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d005      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x3e>
 8001fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fb8:	2b0c      	cmp	r3, #12
 8001fba:	d147      	bne.n	800204c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d144      	bne.n	800204c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e347      	b.n	800265e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8001fd2:	f7ff fe34 	bl	8001c3e <LL_RCC_MSI_GetRange>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	429c      	cmp	r4, r3
 8001fda:	d914      	bls.n	8002006 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f000 fd31 	bl	8002a48 <RCC_SetFlashLatencyFromMSIRange>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e336      	b.n	800265e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff fe0e 	bl	8001c16 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fe32 	bl	8001c68 <LL_RCC_MSI_SetCalibTrimming>
 8002004:	e013      	b.n	800202e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff fe03 	bl	8001c16 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fe27 	bl	8001c68 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201e:	4618      	mov	r0, r3
 8002020:	f000 fd12 	bl	8002a48 <RCC_SetFlashLatencyFromMSIRange>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e317      	b.n	800265e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800202e:	f000 fccb 	bl	80029c8 <HAL_RCC_GetHCLKFreq>
 8002032:	4603      	mov	r3, r0
 8002034:	4aa4      	ldr	r2, [pc, #656]	@ (80022c8 <HAL_RCC_OscConfig+0x344>)
 8002036:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002038:	4ba4      	ldr	r3, [pc, #656]	@ (80022cc <HAL_RCC_OscConfig+0x348>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe fe89 	bl	8000d54 <HAL_InitTick>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d039      	beq.n	80020bc <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e308      	b.n	800265e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d01e      	beq.n	8002092 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002054:	f7ff fdb0 	bl	8001bb8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002058:	f7fe feca 	bl	8000df0 <HAL_GetTick>
 800205c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002060:	f7fe fec6 	bl	8000df0 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e2f5      	b.n	800265e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002072:	f7ff fdbf 	bl	8001bf4 <LL_RCC_MSI_IsReady>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0f1      	beq.n	8002060 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff fdc8 	bl	8001c16 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff fdec 	bl	8001c68 <LL_RCC_MSI_SetCalibTrimming>
 8002090:	e015      	b.n	80020be <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002092:	f7ff fda0 	bl	8001bd6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002096:	f7fe feab 	bl	8000df0 <HAL_GetTick>
 800209a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800209e:	f7fe fea7 	bl	8000df0 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e2d6      	b.n	800265e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80020b0:	f7ff fda0 	bl	8001bf4 <LL_RCC_MSI_IsReady>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f1      	bne.n	800209e <HAL_RCC_OscConfig+0x11a>
 80020ba:	e000      	b.n	80020be <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80020bc:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d047      	beq.n	800215a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020ca:	f7ff fdf6 	bl	8001cba <LL_RCC_GetSysClkSource>
 80020ce:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020d0:	f7ff feef 	bl	8001eb2 <LL_RCC_PLL_GetMainSource>
 80020d4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d005      	beq.n	80020e8 <HAL_RCC_OscConfig+0x164>
 80020dc:	6a3b      	ldr	r3, [r7, #32]
 80020de:	2b0c      	cmp	r3, #12
 80020e0:	d108      	bne.n	80020f4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	2b03      	cmp	r3, #3
 80020e6:	d105      	bne.n	80020f4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d134      	bne.n	800215a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e2b4      	b.n	800265e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020fc:	d102      	bne.n	8002104 <HAL_RCC_OscConfig+0x180>
 80020fe:	f7ff fbdd 	bl	80018bc <LL_RCC_HSE_Enable>
 8002102:	e001      	b.n	8002108 <HAL_RCC_OscConfig+0x184>
 8002104:	f7ff fbe9 	bl	80018da <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d012      	beq.n	8002136 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002110:	f7fe fe6e 	bl	8000df0 <HAL_GetTick>
 8002114:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002118:	f7fe fe6a 	bl	8000df0 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b64      	cmp	r3, #100	@ 0x64
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e299      	b.n	800265e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800212a:	f7ff fbe5 	bl	80018f8 <LL_RCC_HSE_IsReady>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0f1      	beq.n	8002118 <HAL_RCC_OscConfig+0x194>
 8002134:	e011      	b.n	800215a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002136:	f7fe fe5b 	bl	8000df0 <HAL_GetTick>
 800213a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800213e:	f7fe fe57 	bl	8000df0 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b64      	cmp	r3, #100	@ 0x64
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e286      	b.n	800265e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002150:	f7ff fbd2 	bl	80018f8 <LL_RCC_HSE_IsReady>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f1      	bne.n	800213e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d04c      	beq.n	8002200 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002166:	f7ff fda8 	bl	8001cba <LL_RCC_GetSysClkSource>
 800216a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800216c:	f7ff fea1 	bl	8001eb2 <LL_RCC_PLL_GetMainSource>
 8002170:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	2b04      	cmp	r3, #4
 8002176:	d005      	beq.n	8002184 <HAL_RCC_OscConfig+0x200>
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	2b0c      	cmp	r3, #12
 800217c:	d10e      	bne.n	800219c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	2b02      	cmp	r3, #2
 8002182:	d10b      	bne.n	800219c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e266      	b.n	800265e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff fbf1 	bl	800197c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800219a:	e031      	b.n	8002200 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d019      	beq.n	80021d8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021a4:	f7ff fbba 	bl	800191c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a8:	f7fe fe22 	bl	8000df0 <HAL_GetTick>
 80021ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b0:	f7fe fe1e 	bl	8000df0 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e24d      	b.n	800265e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80021c2:	f7ff fbc9 	bl	8001958 <LL_RCC_HSI_IsReady>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0f1      	beq.n	80021b0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff fbd3 	bl	800197c <LL_RCC_HSI_SetCalibTrimming>
 80021d6:	e013      	b.n	8002200 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021d8:	f7ff fbaf 	bl	800193a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021dc:	f7fe fe08 	bl	8000df0 <HAL_GetTick>
 80021e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021e4:	f7fe fe04 	bl	8000df0 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e233      	b.n	800265e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80021f6:	f7ff fbaf 	bl	8001958 <LL_RCC_HSI_IsReady>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1f1      	bne.n	80021e4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0308 	and.w	r3, r3, #8
 8002208:	2b00      	cmp	r3, #0
 800220a:	d106      	bne.n	800221a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 80a3 	beq.w	8002360 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d076      	beq.n	8002310 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0310 	and.w	r3, r3, #16
 800222a:	2b00      	cmp	r3, #0
 800222c:	d046      	beq.n	80022bc <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800222e:	f7ff fc66 	bl	8001afe <LL_RCC_LSI1_IsReady>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d113      	bne.n	8002260 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002238:	f7ff fc3f 	bl	8001aba <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800223c:	f7fe fdd8 	bl	8000df0 <HAL_GetTick>
 8002240:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002244:	f7fe fdd4 	bl	8000df0 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e203      	b.n	800265e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002256:	f7ff fc52 	bl	8001afe <LL_RCC_LSI1_IsReady>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f1      	beq.n	8002244 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002260:	f7ff fc5f 	bl	8001b22 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002264:	f7fe fdc4 	bl	8000df0 <HAL_GetTick>
 8002268:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800226c:	f7fe fdc0 	bl	8000df0 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b03      	cmp	r3, #3
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e1ef      	b.n	800265e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800227e:	f7ff fc72 	bl	8001b66 <LL_RCC_LSI2_IsReady>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0f1      	beq.n	800226c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff fc7c 	bl	8001b8a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002292:	f7ff fc23 	bl	8001adc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002296:	f7fe fdab 	bl	8000df0 <HAL_GetTick>
 800229a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800229e:	f7fe fda7 	bl	8000df0 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e1d6      	b.n	800265e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80022b0:	f7ff fc25 	bl	8001afe <LL_RCC_LSI1_IsReady>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f1      	bne.n	800229e <HAL_RCC_OscConfig+0x31a>
 80022ba:	e051      	b.n	8002360 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80022bc:	f7ff fbfd 	bl	8001aba <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c0:	f7fe fd96 	bl	8000df0 <HAL_GetTick>
 80022c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80022c6:	e00c      	b.n	80022e2 <HAL_RCC_OscConfig+0x35e>
 80022c8:	20000008 	.word	0x20000008
 80022cc:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80022d0:	f7fe fd8e 	bl	8000df0 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e1bd      	b.n	800265e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80022e2:	f7ff fc0c 	bl	8001afe <LL_RCC_LSI1_IsReady>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f1      	beq.n	80022d0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80022ec:	f7ff fc2a 	bl	8001b44 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80022f2:	f7fe fd7d 	bl	8000df0 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b03      	cmp	r3, #3
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e1ac      	b.n	800265e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002304:	f7ff fc2f 	bl	8001b66 <LL_RCC_LSI2_IsReady>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f1      	bne.n	80022f2 <HAL_RCC_OscConfig+0x36e>
 800230e:	e027      	b.n	8002360 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002310:	f7ff fc18 	bl	8001b44 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002314:	f7fe fd6c 	bl	8000df0 <HAL_GetTick>
 8002318:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800231c:	f7fe fd68 	bl	8000df0 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b03      	cmp	r3, #3
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e197      	b.n	800265e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800232e:	f7ff fc1a 	bl	8001b66 <LL_RCC_LSI2_IsReady>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1f1      	bne.n	800231c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002338:	f7ff fbd0 	bl	8001adc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800233c:	f7fe fd58 	bl	8000df0 <HAL_GetTick>
 8002340:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002344:	f7fe fd54 	bl	8000df0 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e183      	b.n	800265e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002356:	f7ff fbd2 	bl	8001afe <LL_RCC_LSI1_IsReady>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1f1      	bne.n	8002344 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	d05b      	beq.n	8002424 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800236c:	4ba7      	ldr	r3, [pc, #668]	@ (800260c <HAL_RCC_OscConfig+0x688>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002374:	2b00      	cmp	r3, #0
 8002376:	d114      	bne.n	80023a2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002378:	f7ff fa70 	bl	800185c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800237c:	f7fe fd38 	bl	8000df0 <HAL_GetTick>
 8002380:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002384:	f7fe fd34 	bl	8000df0 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e163      	b.n	800265e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002396:	4b9d      	ldr	r3, [pc, #628]	@ (800260c <HAL_RCC_OscConfig+0x688>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0f0      	beq.n	8002384 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d102      	bne.n	80023b0 <HAL_RCC_OscConfig+0x42c>
 80023aa:	f7ff fb30 	bl	8001a0e <LL_RCC_LSE_Enable>
 80023ae:	e00c      	b.n	80023ca <HAL_RCC_OscConfig+0x446>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2b05      	cmp	r3, #5
 80023b6:	d104      	bne.n	80023c2 <HAL_RCC_OscConfig+0x43e>
 80023b8:	f7ff fb4b 	bl	8001a52 <LL_RCC_LSE_EnableBypass>
 80023bc:	f7ff fb27 	bl	8001a0e <LL_RCC_LSE_Enable>
 80023c0:	e003      	b.n	80023ca <HAL_RCC_OscConfig+0x446>
 80023c2:	f7ff fb35 	bl	8001a30 <LL_RCC_LSE_Disable>
 80023c6:	f7ff fb55 	bl	8001a74 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d014      	beq.n	80023fc <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d2:	f7fe fd0d 	bl	8000df0 <HAL_GetTick>
 80023d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80023d8:	e00a      	b.n	80023f0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023da:	f7fe fd09 	bl	8000df0 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e136      	b.n	800265e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80023f0:	f7ff fb51 	bl	8001a96 <LL_RCC_LSE_IsReady>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0ef      	beq.n	80023da <HAL_RCC_OscConfig+0x456>
 80023fa:	e013      	b.n	8002424 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fc:	f7fe fcf8 	bl	8000df0 <HAL_GetTick>
 8002400:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002402:	e00a      	b.n	800241a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002404:	f7fe fcf4 	bl	8000df0 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002412:	4293      	cmp	r3, r2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e121      	b.n	800265e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800241a:	f7ff fb3c 	bl	8001a96 <LL_RCC_LSE_IsReady>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1ef      	bne.n	8002404 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800242c:	2b00      	cmp	r3, #0
 800242e:	d02c      	beq.n	800248a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002434:	2b00      	cmp	r3, #0
 8002436:	d014      	beq.n	8002462 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002438:	f7ff fab5 	bl	80019a6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243c:	f7fe fcd8 	bl	8000df0 <HAL_GetTick>
 8002440:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002444:	f7fe fcd4 	bl	8000df0 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e103      	b.n	800265e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002456:	f7ff fac8 	bl	80019ea <LL_RCC_HSI48_IsReady>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0f1      	beq.n	8002444 <HAL_RCC_OscConfig+0x4c0>
 8002460:	e013      	b.n	800248a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002462:	f7ff fab1 	bl	80019c8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002466:	f7fe fcc3 	bl	8000df0 <HAL_GetTick>
 800246a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800246e:	f7fe fcbf 	bl	8000df0 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e0ee      	b.n	800265e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002480:	f7ff fab3 	bl	80019ea <LL_RCC_HSI48_IsReady>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f1      	bne.n	800246e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 80e4 	beq.w	800265c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002494:	f7ff fc11 	bl	8001cba <LL_RCC_GetSysClkSource>
 8002498:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800249a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	f040 80b4 	bne.w	8002614 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f003 0203 	and.w	r2, r3, #3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d123      	bne.n	8002502 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d11c      	bne.n	8002502 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	0a1b      	lsrs	r3, r3, #8
 80024cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d114      	bne.n	8002502 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d10d      	bne.n	8002502 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d106      	bne.n	8002502 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80024fe:	429a      	cmp	r2, r3
 8002500:	d05d      	beq.n	80025be <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	2b0c      	cmp	r3, #12
 8002506:	d058      	beq.n	80025ba <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002508:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e0a1      	b.n	800265e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800251a:	f7ff fc84 	bl	8001e26 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800251e:	f7fe fc67 	bl	8000df0 <HAL_GetTick>
 8002522:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002526:	f7fe fc63 	bl	8000df0 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e092      	b.n	800265e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002538:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1ef      	bne.n	8002526 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002546:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800254a:	68da      	ldr	r2, [r3, #12]
 800254c:	4b30      	ldr	r3, [pc, #192]	@ (8002610 <HAL_RCC_OscConfig+0x68c>)
 800254e:	4013      	ands	r3, r2
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002558:	4311      	orrs	r1, r2
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800255e:	0212      	lsls	r2, r2, #8
 8002560:	4311      	orrs	r1, r2
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002566:	4311      	orrs	r1, r2
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800256c:	4311      	orrs	r1, r2
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002572:	430a      	orrs	r2, r1
 8002574:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002578:	4313      	orrs	r3, r2
 800257a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800257c:	f7ff fc44 	bl	8001e08 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002580:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800258a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800258e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002590:	f7fe fc2e 	bl	8000df0 <HAL_GetTick>
 8002594:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002598:	f7fe fc2a 	bl	8000df0 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e059      	b.n	800265e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0ef      	beq.n	8002598 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025b8:	e050      	b.n	800265c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e04f      	b.n	800265e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d147      	bne.n	800265c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80025cc:	f7ff fc1c 	bl	8001e08 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025e0:	f7fe fc06 	bl	8000df0 <HAL_GetTick>
 80025e4:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e8:	f7fe fc02 	bl	8000df0 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e031      	b.n	800265e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0ef      	beq.n	80025e8 <HAL_RCC_OscConfig+0x664>
 8002608:	e028      	b.n	800265c <HAL_RCC_OscConfig+0x6d8>
 800260a:	bf00      	nop
 800260c:	58000400 	.word	0x58000400
 8002610:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	2b0c      	cmp	r3, #12
 8002618:	d01e      	beq.n	8002658 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800261a:	f7ff fc04 	bl	8001e26 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261e:	f7fe fbe7 	bl	8000df0 <HAL_GetTick>
 8002622:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002626:	f7fe fbe3 	bl	8000df0 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e012      	b.n	800265e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002638:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1ef      	bne.n	8002626 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002646:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800264a:	68da      	ldr	r2, [r3, #12]
 800264c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002650:	4b05      	ldr	r3, [pc, #20]	@ (8002668 <HAL_RCC_OscConfig+0x6e4>)
 8002652:	4013      	ands	r3, r2
 8002654:	60cb      	str	r3, [r1, #12]
 8002656:	e001      	b.n	800265c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e000      	b.n	800265e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3734      	adds	r7, #52	@ 0x34
 8002662:	46bd      	mov	sp, r7
 8002664:	bd90      	pop	{r4, r7, pc}
 8002666:	bf00      	nop
 8002668:	eefefffc 	.word	0xeefefffc

0800266c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e12d      	b.n	80028dc <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002680:	4b98      	ldr	r3, [pc, #608]	@ (80028e4 <HAL_RCC_ClockConfig+0x278>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	d91b      	bls.n	80026c6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268e:	4b95      	ldr	r3, [pc, #596]	@ (80028e4 <HAL_RCC_ClockConfig+0x278>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f023 0207 	bic.w	r2, r3, #7
 8002696:	4993      	ldr	r1, [pc, #588]	@ (80028e4 <HAL_RCC_ClockConfig+0x278>)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	4313      	orrs	r3, r2
 800269c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800269e:	f7fe fba7 	bl	8000df0 <HAL_GetTick>
 80026a2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80026a6:	f7fe fba3 	bl	8000df0 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e111      	b.n	80028dc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b8:	4b8a      	ldr	r3, [pc, #552]	@ (80028e4 <HAL_RCC_ClockConfig+0x278>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d1ef      	bne.n	80026a6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d016      	beq.n	8002700 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff fafb 	bl	8001cd2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80026dc:	f7fe fb88 	bl	8000df0 <HAL_GetTick>
 80026e0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80026e4:	f7fe fb84 	bl	8000df0 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e0f2      	b.n	80028dc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80026f6:	f7ff fbe8 	bl	8001eca <LL_RCC_IsActiveFlag_HPRE>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0f1      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0320 	and.w	r3, r3, #32
 8002708:	2b00      	cmp	r3, #0
 800270a:	d016      	beq.n	800273a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff faf2 	bl	8001cfa <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002716:	f7fe fb6b 	bl	8000df0 <HAL_GetTick>
 800271a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800271c:	e008      	b.n	8002730 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800271e:	f7fe fb67 	bl	8000df0 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e0d5      	b.n	80028dc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002730:	f7ff fbdd 	bl	8001eee <LL_RCC_IsActiveFlag_C2HPRE>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0f1      	beq.n	800271e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002742:	2b00      	cmp	r3, #0
 8002744:	d016      	beq.n	8002774 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff faeb 	bl	8001d26 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002750:	f7fe fb4e 	bl	8000df0 <HAL_GetTick>
 8002754:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002756:	e008      	b.n	800276a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002758:	f7fe fb4a 	bl	8000df0 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e0b8      	b.n	80028dc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800276a:	f7ff fbd3 	bl	8001f14 <LL_RCC_IsActiveFlag_SHDHPRE>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0f1      	beq.n	8002758 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b00      	cmp	r3, #0
 800277e:	d016      	beq.n	80027ae <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fae5 	bl	8001d54 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800278a:	f7fe fb31 	bl	8000df0 <HAL_GetTick>
 800278e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002792:	f7fe fb2d 	bl	8000df0 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e09b      	b.n	80028dc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80027a4:	f7ff fbc9 	bl	8001f3a <LL_RCC_IsActiveFlag_PPRE1>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0f1      	beq.n	8002792 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d017      	beq.n	80027ea <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff fadb 	bl	8001d7c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80027c6:	f7fe fb13 	bl	8000df0 <HAL_GetTick>
 80027ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80027ce:	f7fe fb0f 	bl	8000df0 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e07d      	b.n	80028dc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80027e0:	f7ff fbbd 	bl	8001f5e <LL_RCC_IsActiveFlag_PPRE2>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0f1      	beq.n	80027ce <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d043      	beq.n	800287e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d106      	bne.n	800280c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80027fe:	f7ff f87b 	bl	80018f8 <LL_RCC_HSE_IsReady>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d11e      	bne.n	8002846 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e067      	b.n	80028dc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b03      	cmp	r3, #3
 8002812:	d106      	bne.n	8002822 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002814:	f7ff fb16 	bl	8001e44 <LL_RCC_PLL_IsReady>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d113      	bne.n	8002846 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e05c      	b.n	80028dc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d106      	bne.n	8002838 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800282a:	f7ff f9e3 	bl	8001bf4 <LL_RCC_MSI_IsReady>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d108      	bne.n	8002846 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e051      	b.n	80028dc <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002838:	f7ff f88e 	bl	8001958 <LL_RCC_HSI_IsReady>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e04a      	b.n	80028dc <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff fa21 	bl	8001c92 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002850:	f7fe face 	bl	8000df0 <HAL_GetTick>
 8002854:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002856:	e00a      	b.n	800286e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002858:	f7fe faca 	bl	8000df0 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002866:	4293      	cmp	r3, r2
 8002868:	d901      	bls.n	800286e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e036      	b.n	80028dc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800286e:	f7ff fa24 	bl	8001cba <LL_RCC_GetSysClkSource>
 8002872:	4602      	mov	r2, r0
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	429a      	cmp	r2, r3
 800287c:	d1ec      	bne.n	8002858 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800287e:	4b19      	ldr	r3, [pc, #100]	@ (80028e4 <HAL_RCC_ClockConfig+0x278>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d21b      	bcs.n	80028c4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288c:	4b15      	ldr	r3, [pc, #84]	@ (80028e4 <HAL_RCC_ClockConfig+0x278>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f023 0207 	bic.w	r2, r3, #7
 8002894:	4913      	ldr	r1, [pc, #76]	@ (80028e4 <HAL_RCC_ClockConfig+0x278>)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	4313      	orrs	r3, r2
 800289a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800289c:	f7fe faa8 	bl	8000df0 <HAL_GetTick>
 80028a0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80028a4:	f7fe faa4 	bl	8000df0 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e012      	b.n	80028dc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b6:	4b0b      	ldr	r3, [pc, #44]	@ (80028e4 <HAL_RCC_ClockConfig+0x278>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d1ef      	bne.n	80028a4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80028c4:	f000 f880 	bl	80029c8 <HAL_RCC_GetHCLKFreq>
 80028c8:	4603      	mov	r3, r0
 80028ca:	4a07      	ldr	r2, [pc, #28]	@ (80028e8 <HAL_RCC_ClockConfig+0x27c>)
 80028cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80028ce:	f7fe fa9b 	bl	8000e08 <HAL_GetTickPrio>
 80028d2:	4603      	mov	r3, r0
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7fe fa3d 	bl	8000d54 <HAL_InitTick>
 80028da:	4603      	mov	r3, r0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	58004000 	.word	0x58004000
 80028e8:	20000008 	.word	0x20000008

080028ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028ec:	b590      	push	{r4, r7, lr}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028f2:	f7ff f9e2 	bl	8001cba <LL_RCC_GetSysClkSource>
 80028f6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10a      	bne.n	8002914 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80028fe:	f7ff f99e 	bl	8001c3e <LL_RCC_MSI_GetRange>
 8002902:	4603      	mov	r3, r0
 8002904:	091b      	lsrs	r3, r3, #4
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	4a2b      	ldr	r2, [pc, #172]	@ (80029b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800290c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	e04b      	b.n	80029ac <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b04      	cmp	r3, #4
 8002918:	d102      	bne.n	8002920 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800291a:	4b28      	ldr	r3, [pc, #160]	@ (80029bc <HAL_RCC_GetSysClockFreq+0xd0>)
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	e045      	b.n	80029ac <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b08      	cmp	r3, #8
 8002924:	d10a      	bne.n	800293c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002926:	f7fe ffb7 	bl	8001898 <LL_RCC_HSE_IsEnabledDiv2>
 800292a:	4603      	mov	r3, r0
 800292c:	2b01      	cmp	r3, #1
 800292e:	d102      	bne.n	8002936 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002930:	4b23      	ldr	r3, [pc, #140]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	e03a      	b.n	80029ac <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002936:	4b23      	ldr	r3, [pc, #140]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	e037      	b.n	80029ac <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800293c:	f7ff fab9 	bl	8001eb2 <LL_RCC_PLL_GetMainSource>
 8002940:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2b02      	cmp	r3, #2
 8002946:	d003      	beq.n	8002950 <HAL_RCC_GetSysClockFreq+0x64>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	2b03      	cmp	r3, #3
 800294c:	d003      	beq.n	8002956 <HAL_RCC_GetSysClockFreq+0x6a>
 800294e:	e00d      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002950:	4b1a      	ldr	r3, [pc, #104]	@ (80029bc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002952:	60bb      	str	r3, [r7, #8]
        break;
 8002954:	e015      	b.n	8002982 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002956:	f7fe ff9f 	bl	8001898 <LL_RCC_HSE_IsEnabledDiv2>
 800295a:	4603      	mov	r3, r0
 800295c:	2b01      	cmp	r3, #1
 800295e:	d102      	bne.n	8002966 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002960:	4b17      	ldr	r3, [pc, #92]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002962:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002964:	e00d      	b.n	8002982 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002966:	4b17      	ldr	r3, [pc, #92]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002968:	60bb      	str	r3, [r7, #8]
        break;
 800296a:	e00a      	b.n	8002982 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800296c:	f7ff f967 	bl	8001c3e <LL_RCC_MSI_GetRange>
 8002970:	4603      	mov	r3, r0
 8002972:	091b      	lsrs	r3, r3, #4
 8002974:	f003 030f 	and.w	r3, r3, #15
 8002978:	4a0f      	ldr	r2, [pc, #60]	@ (80029b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800297a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800297e:	60bb      	str	r3, [r7, #8]
        break;
 8002980:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002982:	f7ff fa71 	bl	8001e68 <LL_RCC_PLL_GetN>
 8002986:	4602      	mov	r2, r0
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	fb03 f402 	mul.w	r4, r3, r2
 800298e:	f7ff fa84 	bl	8001e9a <LL_RCC_PLL_GetDivider>
 8002992:	4603      	mov	r3, r0
 8002994:	091b      	lsrs	r3, r3, #4
 8002996:	3301      	adds	r3, #1
 8002998:	fbb4 f4f3 	udiv	r4, r4, r3
 800299c:	f7ff fa71 	bl	8001e82 <LL_RCC_PLL_GetR>
 80029a0:	4603      	mov	r3, r0
 80029a2:	0f5b      	lsrs	r3, r3, #29
 80029a4:	3301      	adds	r3, #1
 80029a6:	fbb4 f3f3 	udiv	r3, r4, r3
 80029aa:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80029ac:	68fb      	ldr	r3, [r7, #12]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3714      	adds	r7, #20
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd90      	pop	{r4, r7, pc}
 80029b6:	bf00      	nop
 80029b8:	0800641c 	.word	0x0800641c
 80029bc:	00f42400 	.word	0x00f42400
 80029c0:	003d0900 	.word	0x003d0900
 80029c4:	007a1200 	.word	0x007a1200

080029c8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029c8:	b598      	push	{r3, r4, r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80029cc:	f7ff ff8e 	bl	80028ec <HAL_RCC_GetSysClockFreq>
 80029d0:	4604      	mov	r4, r0
 80029d2:	f7ff f9e7 	bl	8001da4 <LL_RCC_GetAHBPrescaler>
 80029d6:	4603      	mov	r3, r0
 80029d8:	091b      	lsrs	r3, r3, #4
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	4a03      	ldr	r2, [pc, #12]	@ (80029ec <HAL_RCC_GetHCLKFreq+0x24>)
 80029e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	bd98      	pop	{r3, r4, r7, pc}
 80029ec:	080063bc 	.word	0x080063bc

080029f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029f0:	b598      	push	{r3, r4, r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80029f4:	f7ff ffe8 	bl	80029c8 <HAL_RCC_GetHCLKFreq>
 80029f8:	4604      	mov	r4, r0
 80029fa:	f7ff f9ed 	bl	8001dd8 <LL_RCC_GetAPB1Prescaler>
 80029fe:	4603      	mov	r3, r0
 8002a00:	0a1b      	lsrs	r3, r3, #8
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	4a04      	ldr	r2, [pc, #16]	@ (8002a18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0c:	f003 031f 	and.w	r3, r3, #31
 8002a10:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	bd98      	pop	{r3, r4, r7, pc}
 8002a18:	080063fc 	.word	0x080063fc

08002a1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a1c:	b598      	push	{r3, r4, r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002a20:	f7ff ffd2 	bl	80029c8 <HAL_RCC_GetHCLKFreq>
 8002a24:	4604      	mov	r4, r0
 8002a26:	f7ff f9e3 	bl	8001df0 <LL_RCC_GetAPB2Prescaler>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	0adb      	lsrs	r3, r3, #11
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	4a04      	ldr	r2, [pc, #16]	@ (8002a44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a38:	f003 031f 	and.w	r3, r3, #31
 8002a3c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	bd98      	pop	{r3, r4, r7, pc}
 8002a44:	080063fc 	.word	0x080063fc

08002a48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002a48:	b590      	push	{r4, r7, lr}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2bb0      	cmp	r3, #176	@ 0xb0
 8002a54:	d903      	bls.n	8002a5e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002a56:	4b15      	ldr	r3, [pc, #84]	@ (8002aac <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	e007      	b.n	8002a6e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	091b      	lsrs	r3, r3, #4
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	4a11      	ldr	r2, [pc, #68]	@ (8002aac <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a6c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002a6e:	f7ff f9a5 	bl	8001dbc <LL_RCC_GetAHB4Prescaler>
 8002a72:	4603      	mov	r3, r0
 8002a74:	091b      	lsrs	r3, r3, #4
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	4a0d      	ldr	r2, [pc, #52]	@ (8002ab0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a86:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a90:	0c9c      	lsrs	r4, r3, #18
 8002a92:	f7fe fef3 	bl	800187c <HAL_PWREx_GetVoltageRange>
 8002a96:	4603      	mov	r3, r0
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4620      	mov	r0, r4
 8002a9c:	f000 f80c 	bl	8002ab8 <RCC_SetFlashLatency>
 8002aa0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd90      	pop	{r4, r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	0800641c 	.word	0x0800641c
 8002ab0:	080063bc 	.word	0x080063bc
 8002ab4:	431bde83 	.word	0x431bde83

08002ab8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002ab8:	b590      	push	{r4, r7, lr}
 8002aba:	b093      	sub	sp, #76	@ 0x4c
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002ac2:	4b37      	ldr	r3, [pc, #220]	@ (8002ba0 <RCC_SetFlashLatency+0xe8>)
 8002ac4:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002ac8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002aca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002ace:	4a35      	ldr	r2, [pc, #212]	@ (8002ba4 <RCC_SetFlashLatency+0xec>)
 8002ad0:	f107 031c 	add.w	r3, r7, #28
 8002ad4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ad6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002ada:	4b33      	ldr	r3, [pc, #204]	@ (8002ba8 <RCC_SetFlashLatency+0xf0>)
 8002adc:	f107 040c 	add.w	r4, r7, #12
 8002ae0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ae2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002af0:	d11a      	bne.n	8002b28 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002af2:	2300      	movs	r3, #0
 8002af4:	643b      	str	r3, [r7, #64]	@ 0x40
 8002af6:	e013      	b.n	8002b20 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002af8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	3348      	adds	r3, #72	@ 0x48
 8002afe:	443b      	add	r3, r7
 8002b00:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d807      	bhi.n	8002b1a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002b0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	3348      	adds	r3, #72	@ 0x48
 8002b10:	443b      	add	r3, r7
 8002b12:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002b16:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8002b18:	e020      	b.n	8002b5c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002b1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b22:	2b03      	cmp	r3, #3
 8002b24:	d9e8      	bls.n	8002af8 <RCC_SetFlashLatency+0x40>
 8002b26:	e019      	b.n	8002b5c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002b28:	2300      	movs	r3, #0
 8002b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b2c:	e013      	b.n	8002b56 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	3348      	adds	r3, #72	@ 0x48
 8002b34:	443b      	add	r3, r7
 8002b36:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d807      	bhi.n	8002b50 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002b40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	3348      	adds	r3, #72	@ 0x48
 8002b46:	443b      	add	r3, r7
 8002b48:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002b4c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8002b4e:	e005      	b.n	8002b5c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002b50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b52:	3301      	adds	r3, #1
 8002b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d9e8      	bls.n	8002b2e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002b5c:	4b13      	ldr	r3, [pc, #76]	@ (8002bac <RCC_SetFlashLatency+0xf4>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f023 0207 	bic.w	r2, r3, #7
 8002b64:	4911      	ldr	r1, [pc, #68]	@ (8002bac <RCC_SetFlashLatency+0xf4>)
 8002b66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002b6c:	f7fe f940 	bl	8000df0 <HAL_GetTick>
 8002b70:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002b72:	e008      	b.n	8002b86 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002b74:	f7fe f93c 	bl	8000df0 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e007      	b.n	8002b96 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002b86:	4b09      	ldr	r3, [pc, #36]	@ (8002bac <RCC_SetFlashLatency+0xf4>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d1ef      	bne.n	8002b74 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	374c      	adds	r7, #76	@ 0x4c
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd90      	pop	{r4, r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	08006390 	.word	0x08006390
 8002ba4:	080063a0 	.word	0x080063a0
 8002ba8:	080063ac 	.word	0x080063ac
 8002bac:	58004000 	.word	0x58004000

08002bb0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002bb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bc2:	d101      	bne.n	8002bc8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e000      	b.n	8002bca <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <LL_RCC_HSE_IsReady>:
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002bd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002be6:	d101      	bne.n	8002bec <LL_RCC_HSE_IsReady+0x18>
 8002be8:	2301      	movs	r3, #1
 8002bea:	e000      	b.n	8002bee <LL_RCC_HSE_IsReady+0x1a>
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <LL_RCC_HSI_IsReady>:
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002bfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c0a:	d101      	bne.n	8002c10 <LL_RCC_HSI_IsReady+0x18>
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e000      	b.n	8002c12 <LL_RCC_HSI_IsReady+0x1a>
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <LL_RCC_HSI48_IsReady>:
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002c20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c24:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d101      	bne.n	8002c34 <LL_RCC_HSI48_IsReady+0x18>
 8002c30:	2301      	movs	r3, #1
 8002c32:	e000      	b.n	8002c36 <LL_RCC_HSI48_IsReady+0x1a>
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <LL_RCC_LSE_IsEnabled>:
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002c44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d101      	bne.n	8002c58 <LL_RCC_LSE_IsEnabled+0x18>
 8002c54:	2301      	movs	r3, #1
 8002c56:	e000      	b.n	8002c5a <LL_RCC_LSE_IsEnabled+0x1a>
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <LL_RCC_LSE_IsReady>:
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002c68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d101      	bne.n	8002c7c <LL_RCC_LSE_IsReady+0x18>
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e000      	b.n	8002c7e <LL_RCC_LSE_IsReady+0x1a>
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <LL_RCC_LSI1_IsReady>:
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002c8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d101      	bne.n	8002ca0 <LL_RCC_LSI1_IsReady+0x18>
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e000      	b.n	8002ca2 <LL_RCC_LSI1_IsReady+0x1a>
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <LL_RCC_LSI2_IsReady>:
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002cb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cb8:	f003 0308 	and.w	r3, r3, #8
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	d101      	bne.n	8002cc4 <LL_RCC_LSI2_IsReady+0x18>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e000      	b.n	8002cc6 <LL_RCC_LSI2_IsReady+0x1a>
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <LL_RCC_MSI_IsReady>:
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002cd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d101      	bne.n	8002ce6 <LL_RCC_MSI_IsReady+0x16>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <LL_RCC_MSI_IsReady+0x18>
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <LL_RCC_MSI_GetRange>:
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002cf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d02:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2bb0      	cmp	r3, #176	@ 0xb0
 8002d08:	d901      	bls.n	8002d0e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002d0a:	23b0      	movs	r3, #176	@ 0xb0
 8002d0c:	607b      	str	r3, [r7, #4]
  return msiRange;
 8002d0e:	687b      	ldr	r3, [r7, #4]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <LL_RCC_SetRFWKPClockSource>:
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002d24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d2c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d30:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <LL_RCC_GetRFWKPClockSource>:
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_RFWKPSEL));
 8002d4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d54:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <LL_RCC_GetAHBPrescaler>:
{
 8002d62:	b480      	push	{r7}
 8002d64:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002d66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <LL_RCC_GetAPB1Prescaler>:
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002d7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <LL_RCC_GetAPB2Prescaler>:
{
 8002d92:	b480      	push	{r7}
 8002d94:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002d96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <LL_RCC_SetSMPSClockSource>:
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002db2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db8:	f023 0203 	bic.w	r2, r3, #3
 8002dbc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <LL_RCC_GetSMPSClockSource>:
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSSWS));
 8002dd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ddc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <LL_RCC_SetSMPSPrescaler>:
{
 8002dea:	b480      	push	{r7}
 8002dec:	b083      	sub	sp, #12
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002df2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002dfc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <LL_RCC_GetSMPSPrescaler>:
{
 8002e12:	b480      	push	{r7}
 8002e14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV));
 8002e16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <LL_RCC_SetUSARTClockSource>:
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002e32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e3a:	f023 0203 	bic.w	r2, r3, #3
 8002e3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <LL_RCC_SetLPUARTClockSource>:
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002e5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e66:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e6a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <LL_RCC_SetI2CClockSource>:
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002e8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e8e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	091b      	lsrs	r3, r3, #4
 8002e96:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	401a      	ands	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002ea6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <LL_RCC_SetLPTIMClockSource>:
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002ec4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ec8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	0c1b      	lsrs	r3, r3, #16
 8002ed0:	041b      	lsls	r3, r3, #16
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	401a      	ands	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	041b      	lsls	r3, r3, #16
 8002eda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <LL_RCC_SetSAIClockSource>:
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002ef8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f00:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f04:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <LL_RCC_SetRNGClockSource>:
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002f24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f2c:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002f30:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <LL_RCC_SetCLK48ClockSource>:
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002f50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f58:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f5c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <LL_RCC_SetUSBClockSource>:
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f7ff ffe3 	bl	8002f48 <LL_RCC_SetCLK48ClockSource>
}
 8002f82:	bf00      	nop
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <LL_RCC_SetADCClockSource>:
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002f92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f9a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002f9e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr

08002fb6 <LL_RCC_GetUSARTClockSource>:
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8002fbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fc2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4013      	ands	r3, r2
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <LL_RCC_GetLPUARTClockSource>:
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b083      	sub	sp, #12
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002fde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fe2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4013      	ands	r3, r2
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <LL_RCC_GetI2CClockSource>:
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b083      	sub	sp, #12
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, I2Cx) >> 4) | (I2Cx << 4));
 8002ffe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003002:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4013      	ands	r3, r2
 800300a:	091a      	lsrs	r2, r3, #4
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	011b      	lsls	r3, r3, #4
 8003010:	4313      	orrs	r3, r2
}
 8003012:	4618      	mov	r0, r3
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <LL_RCC_GetLPTIMClockSource>:
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8003026:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800302a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4013      	ands	r3, r2
 8003032:	0c1a      	lsrs	r2, r3, #16
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4313      	orrs	r3, r2
}
 8003038:	4618      	mov	r0, r3
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <LL_RCC_GetSAIClockSource>:
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, SAIx));
 800304c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003050:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4013      	ands	r3, r2
}
 8003058:	4618      	mov	r0, r3
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <LL_RCC_GetRNGClockSource>:
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, RNGx));
 800306c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003070:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4013      	ands	r3, r2
}
 8003078:	4618      	mov	r0, r3
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <LL_RCC_GetCLK48ClockSource>:
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, CLK48x));
 800308c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003090:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4013      	ands	r3, r2
}
 8003098:	4618      	mov	r0, r3
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <LL_RCC_GetUSBClockSource>:
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetCLK48ClockSource(USBx);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7ff ffe9 	bl	8003084 <LL_RCC_GetCLK48ClockSource>
 80030b2:	4603      	mov	r3, r0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <LL_RCC_GetADCClockSource>:
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, ADCx));
 80030c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030c8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4013      	ands	r3, r2
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <LL_RCC_SetRTCClockSource>:
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80030e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <LL_RCC_GetRTCClockSource>:
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800310c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003114:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8003118:	4618      	mov	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <LL_RCC_ForceBackupDomainReset>:
{
 8003122:	b480      	push	{r7}
 8003124:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003126:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800312a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800312e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003132:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003136:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800313a:	bf00      	nop
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003148:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800314c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003150:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003154:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003158:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800315c:	bf00      	nop
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <LL_RCC_PLL_IsReady>:
{
 8003166:	b480      	push	{r7}
 8003168:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800316a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003174:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003178:	d101      	bne.n	800317e <LL_RCC_PLL_IsReady+0x18>
 800317a:	2301      	movs	r3, #1
 800317c:	e000      	b.n	8003180 <LL_RCC_PLL_IsReady+0x1a>
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <LL_RCC_PLL_GetN>:
{
 800318a:	b480      	push	{r7}
 800318c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800318e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	0a1b      	lsrs	r3, r3, #8
 8003196:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800319a:	4618      	mov	r0, r3
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <LL_RCC_PLL_GetP>:
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80031a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	f403 1378 	and.w	r3, r3, #4063232	@ 0x3e0000
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <LL_RCC_PLL_GetQ>:
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ));
 80031c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	f003 6360 	and.w	r3, r3, #234881024	@ 0xe000000
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <LL_RCC_PLL_GetDivider>:
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80031d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <LL_RCC_PLLSAI1_Enable>:
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80031f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80031fe:	6013      	str	r3, [r2, #0]
}
 8003200:	bf00      	nop
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <LL_RCC_PLLSAI1_Disable>:
{
 800320a:	b480      	push	{r7}
 800320c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800320e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003218:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800321c:	6013      	str	r3, [r2, #0]
}
 800321e:	bf00      	nop
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <LL_RCC_PLLSAI1_IsReady>:
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800322c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003236:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800323a:	d101      	bne.n	8003240 <LL_RCC_PLLSAI1_IsReady+0x18>
 800323c:	2301      	movs	r3, #1
 800323e:	e000      	b.n	8003242 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <LL_RCC_PLLSAI1_GetN>:
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLN) >> RCC_PLLSAI1CFGR_PLLN_Pos);
 8003250:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	0a1b      	lsrs	r3, r3, #8
 8003258:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800325c:	4618      	mov	r0, r3
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <LL_RCC_PLLSAI1_GetP>:
{
 8003266:	b480      	push	{r7}
 8003268:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLP));
 800326a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	f403 1378 	and.w	r3, r3, #4063232	@ 0x3e0000
}
 8003274:	4618      	mov	r0, r3
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <LL_RCC_PLLSAI1_GetQ>:
{
 800327e:	b480      	push	{r7}
 8003280:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLQ));
 8003282:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	f003 6360 	and.w	r3, r3, #234881024	@ 0xe000000
}
 800328c:	4618      	mov	r0, r3
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <LL_RCC_PLLSAI1_GetR>:
{
 8003296:	b480      	push	{r7}
 8003298:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLR));
 800329a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <LL_RCC_PLL_GetMainSource>:
{
 80032ae:	b480      	push	{r7}
 80032b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80032b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	f003 0303 	and.w	r3, r3, #3
}
 80032bc:	4618      	mov	r0, r3
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b088      	sub	sp, #32
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80032ce:	2300      	movs	r3, #0
 80032d0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80032d2:	2300      	movs	r3, #0
 80032d4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d034      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80032ea:	d021      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80032ec:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80032f0:	d81b      	bhi.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x64>
 80032f2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80032f6:	d01d      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80032f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80032fc:	d815      	bhi.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x64>
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00b      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003302:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003306:	d110      	bne.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003308:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003312:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003316:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003318:	e00d      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	3304      	adds	r3, #4
 800331e:	4618      	mov	r0, r3
 8003320:	f000 fd5d 	bl	8003dde <RCCEx_PLLSAI1_ConfigNP>
 8003324:	4603      	mov	r3, r0
 8003326:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003328:	e005      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	77fb      	strb	r3, [r7, #31]
        break;
 800332e:	e002      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003330:	bf00      	nop
 8003332:	e000      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003334:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003336:	7ffb      	ldrb	r3, [r7, #31]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d105      	bne.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff fdd5 	bl	8002ef0 <LL_RCC_SetSAIClockSource>
 8003346:	e001      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003348:	7ffb      	ldrb	r3, [r7, #31]
 800334a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003354:	2b00      	cmp	r3, #0
 8003356:	d046      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003358:	f7ff fed6 	bl	8003108 <LL_RCC_GetRTCClockSource>
 800335c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	429a      	cmp	r2, r3
 8003366:	d03c      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003368:	f7fe fa78 	bl	800185c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d105      	bne.n	800337e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff feb0 	bl	80030dc <LL_RCC_SetRTCClockSource>
 800337c:	e02e      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800337e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003382:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003386:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003388:	f7ff fecb 	bl	8003122 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800338c:	f7ff feda 	bl	8003144 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339a:	4313      	orrs	r3, r2
 800339c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800339e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80033a8:	f7ff fc4a 	bl	8002c40 <LL_RCC_LSE_IsEnabled>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d114      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033b2:	f7fd fd1d 	bl	8000df0 <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80033b8:	e00b      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ba:	f7fd fd19 	bl	8000df0 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d902      	bls.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	77fb      	strb	r3, [r7, #31]
              break;
 80033d0:	e004      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80033d2:	f7ff fc47 	bl	8002c64 <LL_RCC_LSE_IsReady>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d1ee      	bne.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80033dc:	7ffb      	ldrb	r3, [r7, #31]
 80033de:	77bb      	strb	r3, [r7, #30]
 80033e0:	e001      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e2:	7ffb      	ldrb	r3, [r7, #31]
 80033e4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d004      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7ff fd17 	bl	8002e2a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d004      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff fd22 	bl	8002e56 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0310 	and.w	r3, r3, #16
 800341a:	2b00      	cmp	r3, #0
 800341c:	d004      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003422:	4618      	mov	r0, r3
 8003424:	f7ff fd4a 	bl	8002ebc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0320 	and.w	r3, r3, #32
 8003430:	2b00      	cmp	r3, #0
 8003432:	d004      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff fd3f 	bl	8002ebc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0304 	and.w	r3, r3, #4
 8003446:	2b00      	cmp	r3, #0
 8003448:	d004      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	4618      	mov	r0, r3
 8003450:	f7ff fd17 	bl	8002e82 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0308 	and.w	r3, r3, #8
 800345c:	2b00      	cmp	r3, #0
 800345e:	d004      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff fd0c 	bl	8002e82 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003472:	2b00      	cmp	r3, #0
 8003474:	d022      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800347a:	4618      	mov	r0, r3
 800347c:	f7ff fd7a 	bl	8002f74 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003484:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003488:	d107      	bne.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800348a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003494:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003498:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800349e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034a2:	d10b      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3304      	adds	r3, #4
 80034a8:	4618      	mov	r0, r3
 80034aa:	f000 fcf3 	bl	8003e94 <RCCEx_PLLSAI1_ConfigNQ>
 80034ae:	4603      	mov	r3, r0
 80034b0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80034b2:	7ffb      	ldrb	r3, [r7, #31]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80034b8:	7ffb      	ldrb	r3, [r7, #31]
 80034ba:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d02b      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034d0:	d008      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80034da:	d003      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d105      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff fd17 	bl	8002f1c <LL_RCC_SetRNGClockSource>
 80034ee:	e00a      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	2000      	movs	r0, #0
 80034fc:	f7ff fd0e 	bl	8002f1c <LL_RCC_SetRNGClockSource>
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f7ff fd21 	bl	8002f48 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800350a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800350e:	d107      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003510:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800351a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800351e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003528:	2b00      	cmp	r3, #0
 800352a:	d022      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003530:	4618      	mov	r0, r3
 8003532:	f7ff fd2a 	bl	8002f8a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800353a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800353e:	d107      	bne.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003540:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800354a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800354e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003554:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003558:	d10b      	bne.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	3304      	adds	r3, #4
 800355e:	4618      	mov	r0, r3
 8003560:	f000 fcf3 	bl	8003f4a <RCCEx_PLLSAI1_ConfigNR>
 8003564:	4603      	mov	r3, r0
 8003566:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003568:	7ffb      	ldrb	r3, [r7, #31]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800356e:	7ffb      	ldrb	r3, [r7, #31]
 8003570:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d004      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff fbca 	bl	8002d1c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d009      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff fc26 	bl	8002dea <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff fc01 	bl	8002daa <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80035a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3720      	adds	r7, #32
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
	...

080035b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_RFWAKEUP  RFWKP peripheral clock
  *            @arg @ref RCC_PERIPHCLK_SMPS  SMPS peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80035b4:	b590      	push	{r4, r7, lr}
 80035b6:	b093      	sub	sp, #76	@ 0x4c
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80035bc:	2300      	movs	r3, #0
 80035be:	647b      	str	r3, [r7, #68]	@ 0x44

#if defined(RCC_SMPS_SUPPORT)
  uint32_t smps_prescaler_index = ((LL_RCC_GetSMPSPrescaler()) >> RCC_SMPSCR_SMPSDIV_Pos);
 80035c0:	f7ff fc27 	bl	8002e12 <LL_RCC_GetSMPSPrescaler>
 80035c4:	4603      	mov	r3, r0
 80035c6:	091b      	lsrs	r3, r3, #4
 80035c8:	643b      	str	r3, [r7, #64]	@ 0x40
#endif /* RCC_SMPS_SUPPORT */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035d0:	d12d      	bne.n	800362e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
  {
    uint32_t rtcClockSource = LL_RCC_GetRTCClockSource();
 80035d2:	f7ff fd99 	bl	8003108 <LL_RCC_GetRTCClockSource>
 80035d6:	6138      	str	r0, [r7, #16]

    if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_LSE) /* LSE clock used as RTC clock source */
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035de:	d109      	bne.n	80035f4 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 80035e0:	f7ff fb40 	bl	8002c64 <LL_RCC_LSE_IsReady>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	f040 83d2 	bne.w	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = LSE_VALUE;
 80035ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80035f2:	e3cd      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_LSI) /* LSI clock used as RTC clock source */
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035fa:	d110      	bne.n	800361e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 80035fc:	f7ff fb44 	bl	8002c88 <LL_RCC_LSI1_IsReady>
 8003600:	60f8      	str	r0, [r7, #12]
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 8003602:	f7ff fb53 	bl	8002cac <LL_RCC_LSI2_IsReady>
 8003606:	60b8      	str	r0, [r7, #8]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d003      	beq.n	8003616 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	2b01      	cmp	r3, #1
 8003612:	f040 83bd 	bne.w	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = LSI_VALUE;
 8003616:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800361a:	647b      	str	r3, [r7, #68]	@ 0x44
 800361c:	e3b8      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_HSE_DIV32) /* HSE clock used as RTC clock source */
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003624:	f040 83b4 	bne.w	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
    {
      frequency = HSE_VALUE / 32U;
 8003628:	4bab      	ldr	r3, [pc, #684]	@ (80038d8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>)
 800362a:	647b      	str	r3, [r7, #68]	@ 0x44
 800362c:	e3b0      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#if defined(SAI1)
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b40      	cmp	r3, #64	@ 0x40
 8003632:	d130      	bne.n	8003696 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
  {
    switch (LL_RCC_GetSAIClockSource(LL_RCC_SAI1_CLKSOURCE))
 8003634:	f44f 0040 	mov.w	r0, #12582912	@ 0xc00000
 8003638:	f7ff fd04 	bl	8003044 <LL_RCC_GetSAIClockSource>
 800363c:	4603      	mov	r3, r0
 800363e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003642:	d008      	beq.n	8003656 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8003644:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003648:	d822      	bhi.n	8003690 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00c      	beq.n	8003668 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 800364e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003652:	d013      	beq.n	800367c <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8003654:	e01c      	b.n	8003690 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
    {
      case LL_RCC_SAI1_CLKSOURCE_HSI:        /* HSI clock used as SAI1 clock source */
        if (LL_RCC_HSI_IsReady() == 1U)
 8003656:	f7ff facf 	bl	8002bf8 <LL_RCC_HSI_IsReady>
 800365a:	4603      	mov	r3, r0
 800365c:	2b01      	cmp	r3, #1
 800365e:	f040 8378 	bne.w	8003d52 <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
        {
          frequency = HSI_VALUE;
 8003662:	4b9e      	ldr	r3, [pc, #632]	@ (80038dc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8003664:	647b      	str	r3, [r7, #68]	@ 0x44
        }
        else
        {
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;
 8003666:	e374      	b.n	8003d52 <HAL_RCCEx_GetPeriphCLKFreq+0x79e>

      case LL_RCC_SAI1_CLKSOURCE_PLLSAI1:    /* PLLSAI1 clock used as SAI1 clock source */
        if (LL_RCC_PLLSAI1_IsReady() == 1U)
 8003668:	f7ff fdde 	bl	8003228 <LL_RCC_PLLSAI1_IsReady>
 800366c:	4603      	mov	r3, r0
 800366e:	2b01      	cmp	r3, #1
 8003670:	f040 8371 	bne.w	8003d56 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          frequency = RCC_PLLSAI1_GetFreqDomain_P();
 8003674:	f000 fdcc 	bl	8004210 <RCC_PLLSAI1_GetFreqDomain_P>
 8003678:	6478      	str	r0, [r7, #68]	@ 0x44
        }
        else
        {
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;
 800367a:	e36c      	b.n	8003d56 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>

      case LL_RCC_SAI1_CLKSOURCE_PLL:        /* PLL clock used as SAI1 clock source */
        if (LL_RCC_PLL_IsReady() == 1U)
 800367c:	f7ff fd73 	bl	8003166 <LL_RCC_PLL_IsReady>
 8003680:	4603      	mov	r3, r0
 8003682:	2b01      	cmp	r3, #1
 8003684:	f040 8369 	bne.w	8003d5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
        {
          frequency = RCC_PLL_GetFreqDomain_P();
 8003688:	f000 fcba 	bl	8004000 <RCC_PLL_GetFreqDomain_P>
 800368c:	6478      	str	r0, [r7, #68]	@ 0x44
        }
        else
        {
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;
 800368e:	e364      	b.n	8003d5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>

      default: /* External input clock used as SAI1 clock source */
        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8003690:	4b93      	ldr	r3, [pc, #588]	@ (80038e0 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8003692:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8003694:	e37c      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
    }
  }
#endif /* SAI1 */
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800369c:	d168      	bne.n	8003770 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
  {
    uint32_t rngClockSource = HAL_RCCEx_GetRngCLKSource();
 800369e:	f000 fb85 	bl	8003dac <HAL_RCCEx_GetRngCLKSource>
 80036a2:	61f8      	str	r0, [r7, #28]

    if (rngClockSource == RCC_RNGCLKSOURCE_LSI)             /* LSI clock used as RNG clock source */
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036aa:	d110      	bne.n	80036ce <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 80036ac:	f7ff faec 	bl	8002c88 <LL_RCC_LSI1_IsReady>
 80036b0:	61b8      	str	r0, [r7, #24]
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 80036b2:	f7ff fafb 	bl	8002cac <LL_RCC_LSI2_IsReady>
 80036b6:	6178      	str	r0, [r7, #20]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d003      	beq.n	80036c6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	f040 8365 	bne.w	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = LSI_VALUE;
 80036c6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80036ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80036cc:	e360      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_LSE)        /* LSE clock used as RNG clock source */
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80036d4:	d109      	bne.n	80036ea <HAL_RCCEx_GetPeriphCLKFreq+0x136>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 80036d6:	f7ff fac5 	bl	8002c64 <LL_RCC_LSE_IsReady>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b01      	cmp	r3, #1
 80036de:	f040 8357 	bne.w	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = LSE_VALUE;
 80036e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80036e8:	e352      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_PLL)        /* PLL clock divided by 3 used as RNG clock source */
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80036f0:	d10e      	bne.n	8003710 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
    {
      if (LL_RCC_PLL_IsReady() == 1U)
 80036f2:	f7ff fd38 	bl	8003166 <LL_RCC_PLL_IsReady>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	f040 8349 	bne.w	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = (RCC_PLL_GetFreqDomain_Q() / 3U);
 80036fe:	f000 fcd7 	bl	80040b0 <RCC_PLL_GetFreqDomain_Q>
 8003702:	4603      	mov	r3, r0
 8003704:	4a77      	ldr	r2, [pc, #476]	@ (80038e4 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8003706:	fba2 2303 	umull	r2, r3, r2, r3
 800370a:	085b      	lsrs	r3, r3, #1
 800370c:	647b      	str	r3, [r7, #68]	@ 0x44
 800370e:	e33f      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_MSI)        /* MSI clock divided by 3 used as RNG clock source */
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	f1b3 5fe0 	cmp.w	r3, #469762048	@ 0x1c000000
 8003716:	d114      	bne.n	8003742 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    {
      if (LL_RCC_MSI_IsReady() == 1U)
 8003718:	f7ff fada 	bl	8002cd0 <LL_RCC_MSI_IsReady>
 800371c:	4603      	mov	r3, r0
 800371e:	2b01      	cmp	r3, #1
 8003720:	f040 8336 	bne.w	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = (__LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange()) / 3U);
 8003724:	f7ff fae5 	bl	8002cf2 <LL_RCC_MSI_GetRange>
 8003728:	4603      	mov	r3, r0
 800372a:	091b      	lsrs	r3, r3, #4
 800372c:	f003 030f 	and.w	r3, r3, #15
 8003730:	4a6d      	ldr	r2, [pc, #436]	@ (80038e8 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 8003732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003736:	4a6b      	ldr	r2, [pc, #428]	@ (80038e4 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8003738:	fba2 2303 	umull	r2, r3, r2, r3
 800373c:	085b      	lsrs	r3, r3, #1
 800373e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003740:	e326      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
#if defined(SAI1)
    else if (rngClockSource == RCC_RNGCLKSOURCE_PLLSAI1)    /* PLLSAI1 clock used as SAI1 clock source */
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	f1b3 5fa0 	cmp.w	r3, #335544320	@ 0x14000000
 8003748:	d109      	bne.n	800375e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    {
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 800374a:	f7ff fd6d 	bl	8003228 <LL_RCC_PLLSAI1_IsReady>
 800374e:	4603      	mov	r3, r0
 8003750:	2b01      	cmp	r3, #1
 8003752:	f040 831d 	bne.w	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = RCC_PLLSAI1_GetFreqDomain_Q();
 8003756:	f000 fdb3 	bl	80042c0 <RCC_PLLSAI1_GetFreqDomain_Q>
 800375a:	6478      	str	r0, [r7, #68]	@ 0x44
 800375c:	e318      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
    }
#endif /* SAI1 */
    else                                                    /* HSI48 clock divided by 3 used as RNG clock source */
    {
#if defined(RCC_HSI48_SUPPORT)
      if (LL_RCC_HSI48_IsReady() == 1U)
 800375e:	f7ff fa5d 	bl	8002c1c <LL_RCC_HSI48_IsReady>
 8003762:	4603      	mov	r3, r0
 8003764:	2b01      	cmp	r3, #1
 8003766:	f040 8313 	bne.w	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = HSI48_VALUE / 3U;
 800376a:	4b5c      	ldr	r3, [pc, #368]	@ (80038dc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800376c:	647b      	str	r3, [r7, #68]	@ 0x44
 800376e:	e30f      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      /* Nothing to do as frequency already initialized to 0U */
#endif /* RCC_HSI48_SUPPORT */
    }
  }
#if defined(USB)
  else if (PeriphClk == RCC_PERIPHCLK_USB)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003776:	d13f      	bne.n	80037f8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  {
    switch (LL_RCC_GetUSBClockSource(LL_RCC_USB_CLKSOURCE))
 8003778:	f04f 6040 	mov.w	r0, #201326592	@ 0xc000000
 800377c:	f7ff fc92 	bl	80030a4 <LL_RCC_GetUSBClockSource>
 8003780:	4603      	mov	r3, r0
 8003782:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003786:	d01d      	beq.n	80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8003788:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800378c:	d82b      	bhi.n	80037e6 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
 800378e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003792:	d003      	beq.n	800379c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 8003794:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003798:	d00a      	beq.n	80037b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800379a:	e024      	b.n	80037e6 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
    {
#if defined(SAI1)
      case LL_RCC_USB_CLKSOURCE_PLLSAI1:       /* PLLSAI1 clock used as USB clock source */
        if (LL_RCC_PLLSAI1_IsReady() == 1U)
 800379c:	f7ff fd44 	bl	8003228 <LL_RCC_PLLSAI1_IsReady>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	f040 82db 	bne.w	8003d5e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
        {
          frequency = RCC_PLLSAI1_GetFreqDomain_Q();
 80037a8:	f000 fd8a 	bl	80042c0 <RCC_PLLSAI1_GetFreqDomain_Q>
 80037ac:	6478      	str	r0, [r7, #68]	@ 0x44
        }
        else
        {
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;
 80037ae:	e2d6      	b.n	8003d5e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
#endif /* SAI1 */

      case LL_RCC_USB_CLKSOURCE_PLL:           /* PLL clock used as USB clock source */
        if (LL_RCC_PLL_IsReady() == 1U)
 80037b0:	f7ff fcd9 	bl	8003166 <LL_RCC_PLL_IsReady>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	f040 82d3 	bne.w	8003d62 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
        {
          frequency = RCC_PLL_GetFreqDomain_Q();
 80037bc:	f000 fc78 	bl	80040b0 <RCC_PLL_GetFreqDomain_Q>
 80037c0:	6478      	str	r0, [r7, #68]	@ 0x44
        }
        else
        {
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;
 80037c2:	e2ce      	b.n	8003d62 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>

      case LL_RCC_USB_CLKSOURCE_MSI:           /* MSI clock used as USB clock source */
        if (LL_RCC_MSI_IsReady() == 1U)
 80037c4:	f7ff fa84 	bl	8002cd0 <LL_RCC_MSI_IsReady>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	f040 82cb 	bne.w	8003d66 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80037d0:	f7ff fa8f 	bl	8002cf2 <LL_RCC_MSI_GetRange>
 80037d4:	4603      	mov	r3, r0
 80037d6:	091b      	lsrs	r3, r3, #4
 80037d8:	f003 030f 	and.w	r3, r3, #15
 80037dc:	4a42      	ldr	r2, [pc, #264]	@ (80038e8 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 80037de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037e2:	647b      	str	r3, [r7, #68]	@ 0x44
        }
        else
        {
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;
 80037e4:	e2bf      	b.n	8003d66 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>

      default: /* HSI48 clock used as USB clock source */
        if (LL_RCC_HSI48_IsReady() == 1U)
 80037e6:	f7ff fa19 	bl	8002c1c <LL_RCC_HSI48_IsReady>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	f040 82bc 	bne.w	8003d6a <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
        {
          frequency = HSI48_VALUE;
 80037f2:	4b3e      	ldr	r3, [pc, #248]	@ (80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 80037f4:	647b      	str	r3, [r7, #68]	@ 0x44
        }
        else
        {
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;
 80037f6:	e2b8      	b.n	8003d6a <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
    }
  }
#endif /* USB */
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d140      	bne.n	8003880 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
  {
    switch (LL_RCC_GetUSARTClockSource(LL_RCC_USART1_CLKSOURCE))
 80037fe:	2003      	movs	r0, #3
 8003800:	f7ff fbd9 	bl	8002fb6 <LL_RCC_GetUSARTClockSource>
 8003804:	4603      	mov	r3, r0
 8003806:	2b03      	cmp	r3, #3
 8003808:	d013      	beq.n	8003832 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
 800380a:	2b03      	cmp	r3, #3
 800380c:	d81b      	bhi.n	8003846 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 800380e:	2b01      	cmp	r3, #1
 8003810:	d002      	beq.n	8003818 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8003812:	2b02      	cmp	r3, #2
 8003814:	d004      	beq.n	8003820 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8003816:	e016      	b.n	8003846 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        frequency = HAL_RCC_GetSysClockFreq();
 8003818:	f7ff f868 	bl	80028ec <HAL_RCC_GetSysClockFreq>
 800381c:	6478      	str	r0, [r7, #68]	@ 0x44
        break;
 800381e:	e2b7      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8003820:	f7ff f9ea 	bl	8002bf8 <LL_RCC_HSI_IsReady>
 8003824:	4603      	mov	r3, r0
 8003826:	2b01      	cmp	r3, #1
 8003828:	f040 82a1 	bne.w	8003d6e <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
        {
          frequency = HSI_VALUE;
 800382c:	4b2b      	ldr	r3, [pc, #172]	@ (80038dc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800382e:	647b      	str	r3, [r7, #68]	@ 0x44
        }
        else
        {
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;
 8003830:	e29d      	b.n	8003d6e <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8003832:	f7ff fa17 	bl	8002c64 <LL_RCC_LSE_IsReady>
 8003836:	4603      	mov	r3, r0
 8003838:	2b01      	cmp	r3, #1
 800383a:	f040 829a 	bne.w	8003d72 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
        {
          frequency = LSE_VALUE;
 800383e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003842:	647b      	str	r3, [r7, #68]	@ 0x44
        }
        else
        {
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;
 8003844:	e295      	b.n	8003d72 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>

      default: /* USART1 Clock is PCLK2 */
        frequency = __LL_RCC_CALC_PCLK2_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(),
 8003846:	f7ff f851 	bl	80028ec <HAL_RCC_GetSysClockFreq>
 800384a:	4604      	mov	r4, r0
 800384c:	f7ff fa89 	bl	8002d62 <LL_RCC_GetAHBPrescaler>
 8003850:	4603      	mov	r3, r0
 8003852:	091b      	lsrs	r3, r3, #4
 8003854:	f003 030f 	and.w	r3, r3, #15
 8003858:	4a25      	ldr	r2, [pc, #148]	@ (80038f0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 800385a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800385e:	fbb4 f4f3 	udiv	r4, r4, r3
 8003862:	f7ff fa96 	bl	8002d92 <LL_RCC_GetAPB2Prescaler>
 8003866:	4603      	mov	r3, r0
 8003868:	0adb      	lsrs	r3, r3, #11
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	4a21      	ldr	r2, [pc, #132]	@ (80038f4 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 8003870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003874:	f003 031f 	and.w	r3, r3, #31
 8003878:	fa24 f303 	lsr.w	r3, r4, r3
 800387c:	647b      	str	r3, [r7, #68]	@ 0x44
                                                                      LL_RCC_GetAHBPrescaler()),
                                             LL_RCC_GetAPB2Prescaler());
        break;
 800387e:	e287      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
    }
  }
#if defined(LPUART1)
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b02      	cmp	r3, #2
 8003884:	d155      	bne.n	8003932 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
  {
    switch (LL_RCC_GetLPUARTClockSource(LL_RCC_LPUART1_CLKSOURCE))
 8003886:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800388a:	f7ff fba4 	bl	8002fd6 <LL_RCC_GetLPUARTClockSource>
 800388e:	4603      	mov	r3, r0
 8003890:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003894:	d016      	beq.n	80038c4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8003896:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800389a:	d82d      	bhi.n	80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
 800389c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038a0:	d003      	beq.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 80038a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038a6:	d004      	beq.n	80038b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 80038a8:	e026      	b.n	80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
    {
      case LL_RCC_LPUART1_CLKSOURCE_SYSCLK: /* LPUART1 Clock is System Clock */
        frequency = HAL_RCC_GetSysClockFreq();
 80038aa:	f7ff f81f 	bl	80028ec <HAL_RCC_GetSysClockFreq>
 80038ae:	6478      	str	r0, [r7, #68]	@ 0x44
        break;
 80038b0:	e26e      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>

      case LL_RCC_LPUART1_CLKSOURCE_HSI:    /* LPUART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 80038b2:	f7ff f9a1 	bl	8002bf8 <LL_RCC_HSI_IsReady>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	f040 825c 	bne.w	8003d76 <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
        {
          frequency = HSI_VALUE;
 80038be:	4b07      	ldr	r3, [pc, #28]	@ (80038dc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80038c0:	647b      	str	r3, [r7, #68]	@ 0x44
        }
        else
        {
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;
 80038c2:	e258      	b.n	8003d76 <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>

      case LL_RCC_LPUART1_CLKSOURCE_LSE:    /* LPUART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 80038c4:	f7ff f9ce 	bl	8002c64 <LL_RCC_LSE_IsReady>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	f040 8255 	bne.w	8003d7a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
        {
          frequency = LSE_VALUE;
 80038d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038d4:	647b      	str	r3, [r7, #68]	@ 0x44
        }
        else
        {
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;
 80038d6:	e250      	b.n	8003d7a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 80038d8:	0003d090 	.word	0x0003d090
 80038dc:	00f42400 	.word	0x00f42400
 80038e0:	001fff68 	.word	0x001fff68
 80038e4:	aaaaaaab 	.word	0xaaaaaaab
 80038e8:	0800641c 	.word	0x0800641c
 80038ec:	02dc6c00 	.word	0x02dc6c00
 80038f0:	080063bc 	.word	0x080063bc
 80038f4:	080063fc 	.word	0x080063fc

      default: /* LPUART1 Clock is PCLK1 */
        frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(),
 80038f8:	f7fe fff8 	bl	80028ec <HAL_RCC_GetSysClockFreq>
 80038fc:	4604      	mov	r4, r0
 80038fe:	f7ff fa30 	bl	8002d62 <LL_RCC_GetAHBPrescaler>
 8003902:	4603      	mov	r3, r0
 8003904:	091b      	lsrs	r3, r3, #4
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	4aaf      	ldr	r2, [pc, #700]	@ (8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>)
 800390c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003910:	fbb4 f4f3 	udiv	r4, r4, r3
 8003914:	f7ff fa31 	bl	8002d7a <LL_RCC_GetAPB1Prescaler>
 8003918:	4603      	mov	r3, r0
 800391a:	0a1b      	lsrs	r3, r3, #8
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	4aaa      	ldr	r2, [pc, #680]	@ (8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0x618>)
 8003922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003926:	f003 031f 	and.w	r3, r3, #31
 800392a:	fa24 f303 	lsr.w	r3, r4, r3
 800392e:	647b      	str	r3, [r7, #68]	@ 0x44
                                                                      LL_RCC_GetAHBPrescaler()),
                                             LL_RCC_GetAPB1Prescaler());
        break;
 8003930:	e22e      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
    }
  }
#endif /* LPUART1 */
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003938:	d12a      	bne.n	8003990 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
  {
    switch (LL_RCC_GetADCClockSource(LL_RCC_ADC_CLKSOURCE))
 800393a:	f04f 5040 	mov.w	r0, #805306368	@ 0x30000000
 800393e:	f7ff fbbd 	bl	80030bc <LL_RCC_GetADCClockSource>
 8003942:	4603      	mov	r3, r0
 8003944:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003948:	d014      	beq.n	8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800394a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800394e:	f200 8216 	bhi.w	8003d7e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8003952:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003956:	d003      	beq.n	8003960 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8003958:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800395c:	d00e      	beq.n	800397c <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;

      default: /* No clock used as ADC clock source */
        break;
 800395e:	e20e      	b.n	8003d7e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
        if (LL_RCC_PLLSAI1_IsReady() == 1U)
 8003960:	f7ff fc62 	bl	8003228 <LL_RCC_PLLSAI1_IsReady>
 8003964:	4603      	mov	r3, r0
 8003966:	2b01      	cmp	r3, #1
 8003968:	f040 820b 	bne.w	8003d82 <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
          frequency = RCC_PLLSAI1_GetFreqDomain_R();
 800396c:	f000 fbf8 	bl	8004160 <RCC_PLLSAI1_GetFreqDomain_R>
 8003970:	6478      	str	r0, [r7, #68]	@ 0x44
        break;
 8003972:	e206      	b.n	8003d82 <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
        frequency = HAL_RCC_GetSysClockFreq();
 8003974:	f7fe ffba 	bl	80028ec <HAL_RCC_GetSysClockFreq>
 8003978:	6478      	str	r0, [r7, #68]	@ 0x44
        break;
 800397a:	e209      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        if (LL_RCC_PLL_IsReady() == 1U)
 800397c:	f7ff fbf3 	bl	8003166 <LL_RCC_PLL_IsReady>
 8003980:	4603      	mov	r3, r0
 8003982:	2b01      	cmp	r3, #1
 8003984:	f040 81ff 	bne.w	8003d86 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
          frequency = RCC_PLL_GetFreqDomain_P();
 8003988:	f000 fb3a 	bl	8004000 <RCC_PLL_GetFreqDomain_P>
 800398c:	6478      	str	r0, [r7, #68]	@ 0x44
        break;
 800398e:	e1fa      	b.n	8003d86 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b04      	cmp	r3, #4
 8003994:	d135      	bne.n	8003a02 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
  {
    switch (LL_RCC_GetI2CClockSource(LL_RCC_I2C1_CLKSOURCE))
 8003996:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
 800399a:	f7ff fb2c 	bl	8002ff6 <LL_RCC_GetI2CClockSource>
 800399e:	4603      	mov	r3, r0
 80039a0:	4a8b      	ldr	r2, [pc, #556]	@ (8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d003      	beq.n	80039ae <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 80039a6:	4a8b      	ldr	r2, [pc, #556]	@ (8003bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d004      	beq.n	80039b6 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 80039ac:	e00c      	b.n	80039c8 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
    {
      case LL_RCC_I2C1_CLKSOURCE_SYSCLK: /* I2C1 Clock is System Clock */
        frequency = HAL_RCC_GetSysClockFreq();
 80039ae:	f7fe ff9d 	bl	80028ec <HAL_RCC_GetSysClockFreq>
 80039b2:	6478      	str	r0, [r7, #68]	@ 0x44
        break;
 80039b4:	e1ec      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>

      case LL_RCC_I2C1_CLKSOURCE_HSI:    /* I2C1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 80039b6:	f7ff f91f 	bl	8002bf8 <LL_RCC_HSI_IsReady>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b01      	cmp	r3, #1
 80039be:	f040 81e4 	bne.w	8003d8a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
        {
          frequency = HSI_VALUE;
 80039c2:	4b85      	ldr	r3, [pc, #532]	@ (8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 80039c4:	647b      	str	r3, [r7, #68]	@ 0x44
        }
        else
        {
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;
 80039c6:	e1e0      	b.n	8003d8a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>

      default: /* I2C1 Clock is PCLK1 */
        frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(),
 80039c8:	f7fe ff90 	bl	80028ec <HAL_RCC_GetSysClockFreq>
 80039cc:	4604      	mov	r4, r0
 80039ce:	f7ff f9c8 	bl	8002d62 <LL_RCC_GetAHBPrescaler>
 80039d2:	4603      	mov	r3, r0
 80039d4:	091b      	lsrs	r3, r3, #4
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	4a7b      	ldr	r2, [pc, #492]	@ (8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>)
 80039dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039e0:	fbb4 f4f3 	udiv	r4, r4, r3
 80039e4:	f7ff f9c9 	bl	8002d7a <LL_RCC_GetAPB1Prescaler>
 80039e8:	4603      	mov	r3, r0
 80039ea:	0a1b      	lsrs	r3, r3, #8
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	4a76      	ldr	r2, [pc, #472]	@ (8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0x618>)
 80039f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f6:	f003 031f 	and.w	r3, r3, #31
 80039fa:	fa24 f303 	lsr.w	r3, r4, r3
 80039fe:	647b      	str	r3, [r7, #68]	@ 0x44
                                                                      LL_RCC_GetAHBPrescaler()),
                                             LL_RCC_GetAPB1Prescaler());
        break;
 8003a00:	e1c6      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
    }
  }
#if defined(I2C3)
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d135      	bne.n	8003a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  {
    switch (LL_RCC_GetI2CClockSource(LL_RCC_I2C3_CLKSOURCE))
 8003a08:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8003a0c:	f7ff faf3 	bl	8002ff6 <LL_RCC_GetI2CClockSource>
 8003a10:	4603      	mov	r3, r0
 8003a12:	4a72      	ldr	r2, [pc, #456]	@ (8003bdc <HAL_RCCEx_GetPeriphCLKFreq+0x628>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d003      	beq.n	8003a20 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
 8003a18:	4a71      	ldr	r2, [pc, #452]	@ (8003be0 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d004      	beq.n	8003a28 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
 8003a1e:	e00c      	b.n	8003a3a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      case LL_RCC_I2C3_CLKSOURCE_SYSCLK: /* I2C3 Clock is System Clock */
        frequency = HAL_RCC_GetSysClockFreq();
 8003a20:	f7fe ff64 	bl	80028ec <HAL_RCC_GetSysClockFreq>
 8003a24:	6478      	str	r0, [r7, #68]	@ 0x44
        break;
 8003a26:	e1b3      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>

      case LL_RCC_I2C3_CLKSOURCE_HSI: /* I2C3 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8003a28:	f7ff f8e6 	bl	8002bf8 <LL_RCC_HSI_IsReady>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	f040 81ad 	bne.w	8003d8e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          frequency = HSI_VALUE;
 8003a34:	4b68      	ldr	r3, [pc, #416]	@ (8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8003a36:	647b      	str	r3, [r7, #68]	@ 0x44
        }
        else
        {
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;
 8003a38:	e1a9      	b.n	8003d8e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>

      default: /* I2C3 Clock is PCLK1 */
        frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(),
 8003a3a:	f7fe ff57 	bl	80028ec <HAL_RCC_GetSysClockFreq>
 8003a3e:	4604      	mov	r4, r0
 8003a40:	f7ff f98f 	bl	8002d62 <LL_RCC_GetAHBPrescaler>
 8003a44:	4603      	mov	r3, r0
 8003a46:	091b      	lsrs	r3, r3, #4
 8003a48:	f003 030f 	and.w	r3, r3, #15
 8003a4c:	4a5e      	ldr	r2, [pc, #376]	@ (8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>)
 8003a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a52:	fbb4 f4f3 	udiv	r4, r4, r3
 8003a56:	f7ff f990 	bl	8002d7a <LL_RCC_GetAPB1Prescaler>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	0a1b      	lsrs	r3, r3, #8
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	4a5a      	ldr	r2, [pc, #360]	@ (8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0x618>)
 8003a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a68:	f003 031f 	and.w	r3, r3, #31
 8003a6c:	fa24 f303 	lsr.w	r3, r4, r3
 8003a70:	647b      	str	r3, [r7, #68]	@ 0x44
                                                                      LL_RCC_GetAHBPrescaler()),
                                             LL_RCC_GetAPB1Prescaler());
        break;
 8003a72:	e18d      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
    }
  }
#endif /* I2C3 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b10      	cmp	r3, #16
 8003a78:	d151      	bne.n	8003b1e <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
  {
    uint32_t lptimClockSource = LL_RCC_GetLPTIMClockSource(LL_RCC_LPTIM1_CLKSOURCE);
 8003a7a:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 8003a7e:	f7ff face 	bl	800301e <LL_RCC_GetLPTIMClockSource>
 8003a82:	62b8      	str	r0, [r7, #40]	@ 0x28

    if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_LSI) /* LPTIM1 Clock is LSI Osc. */
 8003a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a86:	4a57      	ldr	r2, [pc, #348]	@ (8003be4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d110      	bne.n	8003aae <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 8003a8c:	f7ff f8fc 	bl	8002c88 <LL_RCC_LSI1_IsReady>
 8003a90:	6278      	str	r0, [r7, #36]	@ 0x24
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 8003a92:	f7ff f90b 	bl	8002cac <LL_RCC_LSI2_IsReady>
 8003a96:	6238      	str	r0, [r7, #32]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 8003a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d003      	beq.n	8003aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	f040 8175 	bne.w	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = LSI_VALUE;
 8003aa6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003aaa:	647b      	str	r3, [r7, #68]	@ 0x44
 8003aac:	e170      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_HSI) /* LPTIM1 Clock is HSI Osc. */
 8003aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab0:	4a4d      	ldr	r2, [pc, #308]	@ (8003be8 <HAL_RCCEx_GetPeriphCLKFreq+0x634>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d108      	bne.n	8003ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 8003ab6:	f7ff f89f 	bl	8002bf8 <LL_RCC_HSI_IsReady>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	f040 8167 	bne.w	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = HSI_VALUE;
 8003ac2:	4b45      	ldr	r3, [pc, #276]	@ (8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8003ac4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ac6:	e163      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_LSE) /* LPTIM1 Clock is LSE Osc. */
 8003ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aca:	f1b3 1f0c 	cmp.w	r3, #786444	@ 0xc000c
 8003ace:	d109      	bne.n	8003ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 8003ad0:	f7ff f8c8 	bl	8002c64 <LL_RCC_LSE_IsReady>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	f040 815a 	bne.w	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = LSE_VALUE;
 8003adc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ae0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ae2:	e155      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else /* LPTIM1 Clock is PCLK1 */
    {
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(),
 8003ae4:	f7fe ff02 	bl	80028ec <HAL_RCC_GetSysClockFreq>
 8003ae8:	4604      	mov	r4, r0
 8003aea:	f7ff f93a 	bl	8002d62 <LL_RCC_GetAHBPrescaler>
 8003aee:	4603      	mov	r3, r0
 8003af0:	091b      	lsrs	r3, r3, #4
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	4a34      	ldr	r2, [pc, #208]	@ (8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>)
 8003af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003afc:	fbb4 f4f3 	udiv	r4, r4, r3
 8003b00:	f7ff f93b 	bl	8002d7a <LL_RCC_GetAPB1Prescaler>
 8003b04:	4603      	mov	r3, r0
 8003b06:	0a1b      	lsrs	r3, r3, #8
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	4a2f      	ldr	r2, [pc, #188]	@ (8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0x618>)
 8003b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b12:	f003 031f 	and.w	r3, r3, #31
 8003b16:	fa24 f303 	lsr.w	r3, r4, r3
 8003b1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b1c:	e138      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
                                                                    LL_RCC_GetAHBPrescaler()),
                                           LL_RCC_GetAPB1Prescaler());
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b20      	cmp	r3, #32
 8003b22:	d167      	bne.n	8003bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
  {
    uint32_t lptimClockSource = LL_RCC_GetLPTIMClockSource(LL_RCC_LPTIM2_CLKSOURCE);
 8003b24:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 8003b28:	f7ff fa79 	bl	800301e <LL_RCC_GetLPTIMClockSource>
 8003b2c:	6378      	str	r0, [r7, #52]	@ 0x34

    if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_LSI) /* LPTIM2 Clock is LSI Osc. */
 8003b2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b30:	4a2e      	ldr	r2, [pc, #184]	@ (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0x638>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d110      	bne.n	8003b58 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 8003b36:	f7ff f8a7 	bl	8002c88 <LL_RCC_LSI1_IsReady>
 8003b3a:	6338      	str	r0, [r7, #48]	@ 0x30
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 8003b3c:	f7ff f8b6 	bl	8002cac <LL_RCC_LSI2_IsReady>
 8003b40:	62f8      	str	r0, [r7, #44]	@ 0x2c
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 8003b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d003      	beq.n	8003b50 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8003b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	f040 8120 	bne.w	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = LSI_VALUE;
 8003b50:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003b54:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b56:	e11b      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_HSI) /* LPTIM2 Clock is HSI Osc. */
 8003b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b5a:	4a25      	ldr	r2, [pc, #148]	@ (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d108      	bne.n	8003b72 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 8003b60:	f7ff f84a 	bl	8002bf8 <LL_RCC_HSI_IsReady>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	f040 8112 	bne.w	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = HSI_VALUE;
 8003b6c:	4b1a      	ldr	r3, [pc, #104]	@ (8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8003b6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b70:	e10e      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_LSE) /* LPTIM2 Clock is LSE Osc. */
 8003b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b74:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 8003b78:	d109      	bne.n	8003b8e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 8003b7a:	f7ff f873 	bl	8002c64 <LL_RCC_LSE_IsReady>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	f040 8105 	bne.w	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = LSE_VALUE;
 8003b86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b8c:	e100      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else /* LPTIM2 Clock is PCLK1 */
    {
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(),
 8003b8e:	f7fe fead 	bl	80028ec <HAL_RCC_GetSysClockFreq>
 8003b92:	4604      	mov	r4, r0
 8003b94:	f7ff f8e5 	bl	8002d62 <LL_RCC_GetAHBPrescaler>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	091b      	lsrs	r3, r3, #4
 8003b9c:	f003 030f 	and.w	r3, r3, #15
 8003ba0:	4a09      	ldr	r2, [pc, #36]	@ (8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>)
 8003ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ba6:	fbb4 f4f3 	udiv	r4, r4, r3
 8003baa:	f7ff f8e6 	bl	8002d7a <LL_RCC_GetAPB1Prescaler>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	0a1b      	lsrs	r3, r3, #8
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	4a05      	ldr	r2, [pc, #20]	@ (8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0x618>)
 8003bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bbc:	f003 031f 	and.w	r3, r3, #31
 8003bc0:	fa24 f303 	lsr.w	r3, r4, r3
 8003bc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bc6:	e0e3      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8003bc8:	080063bc 	.word	0x080063bc
 8003bcc:	080063fc 	.word	0x080063fc
 8003bd0:	00030100 	.word	0x00030100
 8003bd4:	00030200 	.word	0x00030200
 8003bd8:	00f42400 	.word	0x00f42400
 8003bdc:	00301000 	.word	0x00301000
 8003be0:	00302000 	.word	0x00302000
 8003be4:	000c0004 	.word	0x000c0004
 8003be8:	000c0008 	.word	0x000c0008
 8003bec:	00300010 	.word	0x00300010
 8003bf0:	00300020 	.word	0x00300020
                                                                    LL_RCC_GetAHBPrescaler()),
                                           LL_RCC_GetAPB1Prescaler());
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_RFWAKEUP)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bfa:	d119      	bne.n	8003c30 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
  {
    uint32_t rfwkpClockSource = LL_RCC_GetRFWKPClockSource();
 8003bfc:	f7ff f8a4 	bl	8002d48 <LL_RCC_GetRFWKPClockSource>
 8003c00:	63b8      	str	r0, [r7, #56]	@ 0x38

    if (rfwkpClockSource == LL_RCC_RFWKP_CLKSOURCE_LSE) /* LSE clock used as RF Wakeup clock source */
 8003c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c08:	d109      	bne.n	8003c1e <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 8003c0a:	f7ff f82b 	bl	8002c64 <LL_RCC_LSE_IsReady>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	f040 80bd 	bne.w	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = LSE_VALUE;
 8003c16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c1c:	e0b8      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rfwkpClockSource == LL_RCC_RFWKP_CLKSOURCE_HSE_DIV1024) /* HSE clock used as RF Wakeup clock source */
 8003c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c20:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003c24:	f040 80b4 	bne.w	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
    {
      frequency = HSE_VALUE / 1024U;
 8003c28:	f641 6384 	movw	r3, #7812	@ 0x1e84
 8003c2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c2e:	e0af      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#if defined(RCC_SMPS_SUPPORT)
  else if (PeriphClk == RCC_PERIPHCLK_SMPS)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c36:	f040 80ab 	bne.w	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
  {
    uint32_t smpsClockSource = LL_RCC_GetSMPSClockSource();
 8003c3a:	f7ff f8ca 	bl	8002dd2 <LL_RCC_GetSMPSClockSource>
 8003c3e:	63f8      	str	r0, [r7, #60]	@ 0x3c

    if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_HSI) /* SMPS Clock source is HSI Osc. */
 8003c40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d115      	bne.n	8003c72 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 8003c46:	f7fe ffd7 	bl	8002bf8 <LL_RCC_HSI_IsReady>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	f040 809f 	bne.w	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = HSI_VALUE / SmpsPrescalerTable[smps_prescaler_index][0];
 8003c52:	4952      	ldr	r1, [pc, #328]	@ (8003d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>)
 8003c54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c56:	4613      	mov	r3, r2
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	4413      	add	r3, r2
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	440b      	add	r3, r1
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a4f      	ldr	r2, [pc, #316]	@ (8003da0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>)
 8003c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c68:	647b      	str	r3, [r7, #68]	@ 0x44
        frequency = frequency >> 1U; /* Systematic Div by 2 */
 8003c6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c6c:	085b      	lsrs	r3, r3, #1
 8003c6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c70:	e08e      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_HSE) /* SMPS Clock source is HSE Osc. */
 8003c72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c78:	d116      	bne.n	8003ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
    {
      if (LL_RCC_HSE_IsReady() == 1U)
 8003c7a:	f7fe ffab 	bl	8002bd4 <LL_RCC_HSE_IsReady>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	f040 8085 	bne.w	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = HSE_VALUE / SmpsPrescalerTable[smps_prescaler_index][5];
 8003c86:	4945      	ldr	r1, [pc, #276]	@ (8003d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>)
 8003c88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	4413      	add	r3, r2
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	440b      	add	r3, r1
 8003c94:	3314      	adds	r3, #20
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a42      	ldr	r2, [pc, #264]	@ (8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>)
 8003c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9e:	647b      	str	r3, [r7, #68]	@ 0x44
        frequency = frequency >> 1U; /* Systematic Div by 2 */
 8003ca0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ca2:	085b      	lsrs	r3, r3, #1
 8003ca4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ca6:	e073      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_MSI) /* SMPS Clock source is MSI Osc. */
 8003ca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003caa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cae:	d16f      	bne.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
    {
      switch (LL_RCC_MSI_GetRange())
 8003cb0:	f7ff f81f 	bl	8002cf2 <LL_RCC_MSI_GetRange>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2bb0      	cmp	r3, #176	@ 0xb0
 8003cb8:	d037      	beq.n	8003d2a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8003cba:	2bb0      	cmp	r3, #176	@ 0xb0
 8003cbc:	d844      	bhi.n	8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8003cbe:	2ba0      	cmp	r3, #160	@ 0xa0
 8003cc0:	d024      	beq.n	8003d0c <HAL_RCCEx_GetPeriphCLKFreq+0x758>
 8003cc2:	2ba0      	cmp	r3, #160	@ 0xa0
 8003cc4:	d840      	bhi.n	8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8003cc6:	2b80      	cmp	r3, #128	@ 0x80
 8003cc8:	d002      	beq.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 8003cca:	2b90      	cmp	r3, #144	@ 0x90
 8003ccc:	d00f      	beq.n	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
          break;
        case LL_RCC_MSIRANGE_11:
          frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_11) / SmpsPrescalerTable[smps_prescaler_index][1];
          break;
        default:
          break;
 8003cce:	e03b      	b.n	8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
          frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_8) / SmpsPrescalerTable[smps_prescaler_index][4];
 8003cd0:	4b35      	ldr	r3, [pc, #212]	@ (8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8003cd2:	6a19      	ldr	r1, [r3, #32]
 8003cd4:	4831      	ldr	r0, [pc, #196]	@ (8003d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>)
 8003cd6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003cd8:	4613      	mov	r3, r2
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	4413      	add	r3, r2
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	4403      	add	r3, r0
 8003ce2:	3310      	adds	r3, #16
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cea:	647b      	str	r3, [r7, #68]	@ 0x44
          break;
 8003cec:	e02d      	b.n	8003d4a <HAL_RCCEx_GetPeriphCLKFreq+0x796>
          frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_9) / SmpsPrescalerTable[smps_prescaler_index][3];
 8003cee:	4b2e      	ldr	r3, [pc, #184]	@ (8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8003cf0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003cf2:	482a      	ldr	r0, [pc, #168]	@ (8003d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>)
 8003cf4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	4413      	add	r3, r2
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	4403      	add	r3, r0
 8003d00:	330c      	adds	r3, #12
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d08:	647b      	str	r3, [r7, #68]	@ 0x44
          break;
 8003d0a:	e01e      	b.n	8003d4a <HAL_RCCEx_GetPeriphCLKFreq+0x796>
          frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_10) / SmpsPrescalerTable[smps_prescaler_index][2];
 8003d0c:	4b26      	ldr	r3, [pc, #152]	@ (8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8003d0e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003d10:	4822      	ldr	r0, [pc, #136]	@ (8003d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>)
 8003d12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d14:	4613      	mov	r3, r2
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	4413      	add	r3, r2
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	4403      	add	r3, r0
 8003d1e:	3308      	adds	r3, #8
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d26:	647b      	str	r3, [r7, #68]	@ 0x44
          break;
 8003d28:	e00f      	b.n	8003d4a <HAL_RCCEx_GetPeriphCLKFreq+0x796>
          frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_11) / SmpsPrescalerTable[smps_prescaler_index][1];
 8003d2a:	4b1f      	ldr	r3, [pc, #124]	@ (8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8003d2c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003d2e:	481b      	ldr	r0, [pc, #108]	@ (8003d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>)
 8003d30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d32:	4613      	mov	r3, r2
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	4413      	add	r3, r2
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	4403      	add	r3, r0
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d44:	647b      	str	r3, [r7, #68]	@ 0x44
          break;
 8003d46:	e000      	b.n	8003d4a <HAL_RCCEx_GetPeriphCLKFreq+0x796>
          break;
 8003d48:	bf00      	nop
      }
      frequency = frequency >> 1U; /* Systematic Div by 2 */
 8003d4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d4c:	085b      	lsrs	r3, r3, #1
 8003d4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d50:	e01e      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 8003d52:	bf00      	nop
 8003d54:	e01c      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 8003d56:	bf00      	nop
 8003d58:	e01a      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 8003d5a:	bf00      	nop
 8003d5c:	e018      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 8003d5e:	bf00      	nop
 8003d60:	e016      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 8003d62:	bf00      	nop
 8003d64:	e014      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 8003d66:	bf00      	nop
 8003d68:	e012      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 8003d6a:	bf00      	nop
 8003d6c:	e010      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 8003d6e:	bf00      	nop
 8003d70:	e00e      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 8003d72:	bf00      	nop
 8003d74:	e00c      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 8003d76:	bf00      	nop
 8003d78:	e00a      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 8003d7a:	bf00      	nop
 8003d7c:	e008      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 8003d7e:	bf00      	nop
 8003d80:	e006      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 8003d82:	bf00      	nop
 8003d84:	e004      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 8003d86:	bf00      	nop
 8003d88:	e002      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 8003d8a:	bf00      	nop
 8003d8c:	e000      	b.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 8003d8e:	bf00      	nop
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#endif /* RCC_SMPS_SUPPORT */

  return (frequency);
 8003d90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	374c      	adds	r7, #76	@ 0x4c
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd90      	pop	{r4, r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	0800645c 	.word	0x0800645c
 8003da0:	00f42400 	.word	0x00f42400
 8003da4:	007a1200 	.word	0x007a1200
 8003da8:	0800641c 	.word	0x0800641c

08003dac <HAL_RCCEx_GetRngCLKSource>:
  *
  *         (*) Value not defined in all devices.
  *
  */
uint32_t HAL_RCCEx_GetRngCLKSource(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
  uint32_t rng_clock_source = LL_RCC_GetRNGClockSource(LL_RCC_RNG_CLKSOURCE);
 8003db2:	f04f 4040 	mov.w	r0, #3221225472	@ 0xc0000000
 8003db6:	f7ff f955 	bl	8003064 <LL_RCC_GetRNGClockSource>
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t clk48_clock_source;

  /* RNG clock source originates from 48 MHz RC oscillator */
  if (rng_clock_source == RCC_RNGCLKSOURCE_CLK48)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d108      	bne.n	8003dd4 <HAL_RCCEx_GetRngCLKSource+0x28>
  {
    clk48_clock_source = LL_RCC_GetCLK48ClockSource(LL_RCC_CLK48_CLKSOURCE);
 8003dc2:	f04f 6040 	mov.w	r0, #201326592	@ 0xc000000
 8003dc6:	f7ff f95d 	bl	8003084 <LL_RCC_GetCLK48ClockSource>
 8003dca:	6038      	str	r0, [r7, #0]
    rng_clock_source = (CLK48_MASK | clk48_clock_source);
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dd2:	607b      	str	r3, [r7, #4]
  }

  return rng_clock_source;
 8003dd4:	687b      	ldr	r3, [r7, #4]
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b084      	sub	sp, #16
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003de6:	2300      	movs	r3, #0
 8003de8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003dea:	f7ff fa0e 	bl	800320a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003dee:	f7fc ffff 	bl	8000df0 <HAL_GetTick>
 8003df2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003df4:	e009      	b.n	8003e0a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003df6:	f7fc fffb 	bl	8000df0 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d902      	bls.n	8003e0a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	73fb      	strb	r3, [r7, #15]
      break;
 8003e08:	e004      	b.n	8003e14 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003e0a:	f7ff fa0d 	bl	8003228 <LL_RCC_PLLSAI1_IsReady>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1f0      	bne.n	8003df6 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003e14:	7bfb      	ldrb	r3, [r7, #15]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d137      	bne.n	8003e8a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003e1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	021b      	lsls	r3, r3, #8
 8003e2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003e32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e44:	4313      	orrs	r3, r2
 8003e46:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003e48:	f7ff f9d0 	bl	80031ec <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e4c:	f7fc ffd0 	bl	8000df0 <HAL_GetTick>
 8003e50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003e52:	e009      	b.n	8003e68 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e54:	f7fc ffcc 	bl	8000df0 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d902      	bls.n	8003e68 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	73fb      	strb	r3, [r7, #15]
        break;
 8003e66:	e004      	b.n	8003e72 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003e68:	f7ff f9de 	bl	8003228 <LL_RCC_PLLSAI1_IsReady>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d1f0      	bne.n	8003e54 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003e72:	7bfb      	ldrb	r3, [r7, #15]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d108      	bne.n	8003e8a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003e78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e7c:	691a      	ldr	r2, [r3, #16]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e86:	4313      	orrs	r3, r2
 8003e88:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003ea0:	f7ff f9b3 	bl	800320a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003ea4:	f7fc ffa4 	bl	8000df0 <HAL_GetTick>
 8003ea8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003eaa:	e009      	b.n	8003ec0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003eac:	f7fc ffa0 	bl	8000df0 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d902      	bls.n	8003ec0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	73fb      	strb	r3, [r7, #15]
      break;
 8003ebe:	e004      	b.n	8003eca <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003ec0:	f7ff f9b2 	bl	8003228 <LL_RCC_PLLSAI1_IsReady>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1f0      	bne.n	8003eac <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003eca:	7bfb      	ldrb	r3, [r7, #15]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d137      	bne.n	8003f40 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003ed0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	021b      	lsls	r3, r3, #8
 8003ee0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003ee8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003efa:	4313      	orrs	r3, r2
 8003efc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003efe:	f7ff f975 	bl	80031ec <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f02:	f7fc ff75 	bl	8000df0 <HAL_GetTick>
 8003f06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003f08:	e009      	b.n	8003f1e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f0a:	f7fc ff71 	bl	8000df0 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d902      	bls.n	8003f1e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	73fb      	strb	r3, [r7, #15]
        break;
 8003f1c:	e004      	b.n	8003f28 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003f1e:	f7ff f983 	bl	8003228 <LL_RCC_PLLSAI1_IsReady>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d1f0      	bne.n	8003f0a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003f28:	7bfb      	ldrb	r3, [r7, #15]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d108      	bne.n	8003f40 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003f2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f32:	691a      	ldr	r2, [r3, #16]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b084      	sub	sp, #16
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f52:	2300      	movs	r3, #0
 8003f54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003f56:	f7ff f958 	bl	800320a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003f5a:	f7fc ff49 	bl	8000df0 <HAL_GetTick>
 8003f5e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003f60:	e009      	b.n	8003f76 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f62:	f7fc ff45 	bl	8000df0 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d902      	bls.n	8003f76 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	73fb      	strb	r3, [r7, #15]
      break;
 8003f74:	e004      	b.n	8003f80 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003f76:	f7ff f957 	bl	8003228 <LL_RCC_PLLSAI1_IsReady>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1f0      	bne.n	8003f62 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003f80:	7bfb      	ldrb	r3, [r7, #15]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d137      	bne.n	8003ff6 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003f86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	021b      	lsls	r3, r3, #8
 8003f96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003f9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003fb4:	f7ff f91a 	bl	80031ec <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fb8:	f7fc ff1a 	bl	8000df0 <HAL_GetTick>
 8003fbc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003fbe:	e009      	b.n	8003fd4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fc0:	f7fc ff16 	bl	8000df0 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d902      	bls.n	8003fd4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	73fb      	strb	r3, [r7, #15]
        break;
 8003fd2:	e004      	b.n	8003fde <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003fd4:	f7ff f928 	bl	8003228 <LL_RCC_PLLSAI1_IsReady>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d1f0      	bne.n	8003fc0 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003fde:	7bfb      	ldrb	r3, [r7, #15]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d108      	bne.n	8003ff6 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003fe4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fe8:	691a      	ldr	r2, [r3, #16]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <RCC_PLL_GetFreqDomain_P>:
/**
  * @brief  Return PLL clock (PLLPCLK) frequency used for SAI domain
  * @retval PLLPCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_P(void)
{
 8004000:	b590      	push	{r4, r7, lr}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value / PLLM) * PLLN
     SAI Domain clock = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004006:	f7ff f952 	bl	80032ae <LL_RCC_PLL_GetMainSource>
 800400a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	2b03      	cmp	r3, #3
 8004010:	d017      	beq.n	8004042 <RCC_PLL_GetFreqDomain_P+0x42>
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	2b03      	cmp	r3, #3
 8004016:	d81f      	bhi.n	8004058 <RCC_PLL_GetFreqDomain_P+0x58>
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d003      	beq.n	8004026 <RCC_PLL_GetFreqDomain_P+0x26>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	2b02      	cmp	r3, #2
 8004022:	d00b      	beq.n	800403c <RCC_PLL_GetFreqDomain_P+0x3c>
 8004024:	e018      	b.n	8004058 <RCC_PLL_GetFreqDomain_P+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004026:	f7fe fe64 	bl	8002cf2 <LL_RCC_MSI_GetRange>
 800402a:	4603      	mov	r3, r0
 800402c:	091b      	lsrs	r3, r3, #4
 800402e:	f003 030f 	and.w	r3, r3, #15
 8004032:	4a1b      	ldr	r2, [pc, #108]	@ (80040a0 <RCC_PLL_GetFreqDomain_P+0xa0>)
 8004034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004038:	607b      	str	r3, [r7, #4]
      break;
 800403a:	e018      	b.n	800406e <RCC_PLL_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800403c:	4b19      	ldr	r3, [pc, #100]	@ (80040a4 <RCC_PLL_GetFreqDomain_P+0xa4>)
 800403e:	607b      	str	r3, [r7, #4]
      break;
 8004040:	e015      	b.n	800406e <RCC_PLL_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004042:	f7fe fdb5 	bl	8002bb0 <LL_RCC_HSE_IsEnabledDiv2>
 8004046:	4603      	mov	r3, r0
 8004048:	2b01      	cmp	r3, #1
 800404a:	d102      	bne.n	8004052 <RCC_PLL_GetFreqDomain_P+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 800404c:	4b16      	ldr	r3, [pc, #88]	@ (80040a8 <RCC_PLL_GetFreqDomain_P+0xa8>)
 800404e:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8004050:	e00d      	b.n	800406e <RCC_PLL_GetFreqDomain_P+0x6e>
        pllinputfreq = HSE_VALUE;
 8004052:	4b16      	ldr	r3, [pc, #88]	@ (80040ac <RCC_PLL_GetFreqDomain_P+0xac>)
 8004054:	607b      	str	r3, [r7, #4]
      break;
 8004056:	e00a      	b.n	800406e <RCC_PLL_GetFreqDomain_P+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004058:	f7fe fe4b 	bl	8002cf2 <LL_RCC_MSI_GetRange>
 800405c:	4603      	mov	r3, r0
 800405e:	091b      	lsrs	r3, r3, #4
 8004060:	f003 030f 	and.w	r3, r3, #15
 8004064:	4a0e      	ldr	r2, [pc, #56]	@ (80040a0 <RCC_PLL_GetFreqDomain_P+0xa0>)
 8004066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800406a:	607b      	str	r3, [r7, #4]
      break;
 800406c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800406e:	f7ff f88c 	bl	800318a <LL_RCC_PLL_GetN>
 8004072:	4602      	mov	r2, r0
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	fb03 f402 	mul.w	r4, r3, r2
 800407a:	f7ff f8ab 	bl	80031d4 <LL_RCC_PLL_GetDivider>
 800407e:	4603      	mov	r3, r0
 8004080:	091b      	lsrs	r3, r3, #4
 8004082:	3301      	adds	r3, #1
 8004084:	fbb4 f4f3 	udiv	r4, r4, r3
 8004088:	f7ff f88c 	bl	80031a4 <LL_RCC_PLL_GetP>
 800408c:	4603      	mov	r3, r0
 800408e:	0c5b      	lsrs	r3, r3, #17
 8004090:	3301      	adds	r3, #1
 8004092:	fbb4 f3f3 	udiv	r3, r4, r3
                                       LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
}
 8004096:	4618      	mov	r0, r3
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	bd90      	pop	{r4, r7, pc}
 800409e:	bf00      	nop
 80040a0:	0800641c 	.word	0x0800641c
 80040a4:	00f42400 	.word	0x00f42400
 80040a8:	003d0900 	.word	0x003d0900
 80040ac:	007a1200 	.word	0x007a1200

080040b0 <RCC_PLL_GetFreqDomain_Q>:
/**
  * @brief  Return PLL clock (PLLQCLK) frequency used for 48 MHz domain
  * @retval PLLQCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_Q(void)
{
 80040b0:	b590      	push	{r4, r7, lr}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLN
     48M Domain clock = PLL_VCO / PLLQ
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80040b6:	f7ff f8fa 	bl	80032ae <LL_RCC_PLL_GetMainSource>
 80040ba:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	2b03      	cmp	r3, #3
 80040c0:	d017      	beq.n	80040f2 <RCC_PLL_GetFreqDomain_Q+0x42>
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	2b03      	cmp	r3, #3
 80040c6:	d81f      	bhi.n	8004108 <RCC_PLL_GetFreqDomain_Q+0x58>
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d003      	beq.n	80040d6 <RCC_PLL_GetFreqDomain_Q+0x26>
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d00b      	beq.n	80040ec <RCC_PLL_GetFreqDomain_Q+0x3c>
 80040d4:	e018      	b.n	8004108 <RCC_PLL_GetFreqDomain_Q+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80040d6:	f7fe fe0c 	bl	8002cf2 <LL_RCC_MSI_GetRange>
 80040da:	4603      	mov	r3, r0
 80040dc:	091b      	lsrs	r3, r3, #4
 80040de:	f003 030f 	and.w	r3, r3, #15
 80040e2:	4a1b      	ldr	r2, [pc, #108]	@ (8004150 <RCC_PLL_GetFreqDomain_Q+0xa0>)
 80040e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040e8:	607b      	str	r3, [r7, #4]
      break;
 80040ea:	e018      	b.n	800411e <RCC_PLL_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80040ec:	4b19      	ldr	r3, [pc, #100]	@ (8004154 <RCC_PLL_GetFreqDomain_Q+0xa4>)
 80040ee:	607b      	str	r3, [r7, #4]
      break;
 80040f0:	e015      	b.n	800411e <RCC_PLL_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80040f2:	f7fe fd5d 	bl	8002bb0 <LL_RCC_HSE_IsEnabledDiv2>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d102      	bne.n	8004102 <RCC_PLL_GetFreqDomain_Q+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 80040fc:	4b16      	ldr	r3, [pc, #88]	@ (8004158 <RCC_PLL_GetFreqDomain_Q+0xa8>)
 80040fe:	607b      	str	r3, [r7, #4]
      else
      {
        pllinputfreq = HSE_VALUE;
      }

      break;
 8004100:	e00d      	b.n	800411e <RCC_PLL_GetFreqDomain_Q+0x6e>
        pllinputfreq = HSE_VALUE;
 8004102:	4b16      	ldr	r3, [pc, #88]	@ (800415c <RCC_PLL_GetFreqDomain_Q+0xac>)
 8004104:	607b      	str	r3, [r7, #4]
      break;
 8004106:	e00a      	b.n	800411e <RCC_PLL_GetFreqDomain_Q+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004108:	f7fe fdf3 	bl	8002cf2 <LL_RCC_MSI_GetRange>
 800410c:	4603      	mov	r3, r0
 800410e:	091b      	lsrs	r3, r3, #4
 8004110:	f003 030f 	and.w	r3, r3, #15
 8004114:	4a0e      	ldr	r2, [pc, #56]	@ (8004150 <RCC_PLL_GetFreqDomain_Q+0xa0>)
 8004116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800411a:	607b      	str	r3, [r7, #4]
      break;
 800411c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_48M_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800411e:	f7ff f834 	bl	800318a <LL_RCC_PLL_GetN>
 8004122:	4602      	mov	r2, r0
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	fb03 f402 	mul.w	r4, r3, r2
 800412a:	f7ff f853 	bl	80031d4 <LL_RCC_PLL_GetDivider>
 800412e:	4603      	mov	r3, r0
 8004130:	091b      	lsrs	r3, r3, #4
 8004132:	3301      	adds	r3, #1
 8004134:	fbb4 f4f3 	udiv	r4, r4, r3
 8004138:	f7ff f840 	bl	80031bc <LL_RCC_PLL_GetQ>
 800413c:	4603      	mov	r3, r0
 800413e:	0e5b      	lsrs	r3, r3, #25
 8004140:	3301      	adds	r3, #1
 8004142:	fbb4 f3f3 	udiv	r3, r4, r3
                                       LL_RCC_PLL_GetN(), LL_RCC_PLL_GetQ());
}
 8004146:	4618      	mov	r0, r3
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	bd90      	pop	{r4, r7, pc}
 800414e:	bf00      	nop
 8004150:	0800641c 	.word	0x0800641c
 8004154:	00f42400 	.word	0x00f42400
 8004158:	003d0900 	.word	0x003d0900
 800415c:	007a1200 	.word	0x007a1200

08004160 <RCC_PLLSAI1_GetFreqDomain_R>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1RCLK) frequency used for ADC domain
  * @retval PLLSAI1RCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_R(void)
{
 8004160:	b590      	push	{r4, r7, lr}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq;
  uint32_t pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* 48M Domain clock  = PLLSAI1_VCO / PLLSAI1R */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004166:	f7ff f8a2 	bl	80032ae <LL_RCC_PLL_GetMainSource>
 800416a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	2b03      	cmp	r3, #3
 8004170:	d017      	beq.n	80041a2 <RCC_PLLSAI1_GetFreqDomain_R+0x42>
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2b03      	cmp	r3, #3
 8004176:	d81f      	bhi.n	80041b8 <RCC_PLLSAI1_GetFreqDomain_R+0x58>
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d003      	beq.n	8004186 <RCC_PLLSAI1_GetFreqDomain_R+0x26>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b02      	cmp	r3, #2
 8004182:	d00b      	beq.n	800419c <RCC_PLLSAI1_GetFreqDomain_R+0x3c>
 8004184:	e018      	b.n	80041b8 <RCC_PLLSAI1_GetFreqDomain_R+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004186:	f7fe fdb4 	bl	8002cf2 <LL_RCC_MSI_GetRange>
 800418a:	4603      	mov	r3, r0
 800418c:	091b      	lsrs	r3, r3, #4
 800418e:	f003 030f 	and.w	r3, r3, #15
 8004192:	4a1b      	ldr	r2, [pc, #108]	@ (8004200 <RCC_PLLSAI1_GetFreqDomain_R+0xa0>)
 8004194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004198:	607b      	str	r3, [r7, #4]
      break;
 800419a:	e018      	b.n	80041ce <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 800419c:	4b19      	ldr	r3, [pc, #100]	@ (8004204 <RCC_PLLSAI1_GetFreqDomain_R+0xa4>)
 800419e:	607b      	str	r3, [r7, #4]
      break;
 80041a0:	e015      	b.n	80041ce <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80041a2:	f7fe fd05 	bl	8002bb0 <LL_RCC_HSE_IsEnabledDiv2>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d102      	bne.n	80041b2 <RCC_PLLSAI1_GetFreqDomain_R+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 80041ac:	4b16      	ldr	r3, [pc, #88]	@ (8004208 <RCC_PLLSAI1_GetFreqDomain_R+0xa8>)
 80041ae:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 80041b0:	e00d      	b.n	80041ce <RCC_PLLSAI1_GetFreqDomain_R+0x6e>
        pllinputfreq = HSE_VALUE;
 80041b2:	4b16      	ldr	r3, [pc, #88]	@ (800420c <RCC_PLLSAI1_GetFreqDomain_R+0xac>)
 80041b4:	607b      	str	r3, [r7, #4]
      break;
 80041b6:	e00a      	b.n	80041ce <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80041b8:	f7fe fd9b 	bl	8002cf2 <LL_RCC_MSI_GetRange>
 80041bc:	4603      	mov	r3, r0
 80041be:	091b      	lsrs	r3, r3, #4
 80041c0:	f003 030f 	and.w	r3, r3, #15
 80041c4:	4a0e      	ldr	r2, [pc, #56]	@ (8004200 <RCC_PLLSAI1_GetFreqDomain_R+0xa0>)
 80041c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041ca:	607b      	str	r3, [r7, #4]
      break;
 80041cc:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80041ce:	f7ff f83d 	bl	800324c <LL_RCC_PLLSAI1_GetN>
 80041d2:	4602      	mov	r2, r0
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	fb03 f402 	mul.w	r4, r3, r2
 80041da:	f7fe fffb 	bl	80031d4 <LL_RCC_PLL_GetDivider>
 80041de:	4603      	mov	r3, r0
 80041e0:	091b      	lsrs	r3, r3, #4
 80041e2:	3301      	adds	r3, #1
 80041e4:	fbb4 f4f3 	udiv	r4, r4, r3
 80041e8:	f7ff f855 	bl	8003296 <LL_RCC_PLLSAI1_GetR>
 80041ec:	4603      	mov	r3, r0
 80041ee:	0f5b      	lsrs	r3, r3, #29
 80041f0:	3301      	adds	r3, #1
 80041f2:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetR());
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd90      	pop	{r4, r7, pc}
 80041fe:	bf00      	nop
 8004200:	0800641c 	.word	0x0800641c
 8004204:	00f42400 	.word	0x00f42400
 8004208:	003d0900 	.word	0x003d0900
 800420c:	007a1200 	.word	0x007a1200

08004210 <RCC_PLLSAI1_GetFreqDomain_P>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1PCLK) frequency used for SAI domain
  * @retval PLLSAI1PCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_P(void)
{
 8004210:	b590      	push	{r4, r7, lr}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq;
  uint32_t pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* SAI Domain clock  = PLLSAI1_VCO / PLLSAI1P */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004216:	f7ff f84a 	bl	80032ae <LL_RCC_PLL_GetMainSource>
 800421a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	2b03      	cmp	r3, #3
 8004220:	d017      	beq.n	8004252 <RCC_PLLSAI1_GetFreqDomain_P+0x42>
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	2b03      	cmp	r3, #3
 8004226:	d81f      	bhi.n	8004268 <RCC_PLLSAI1_GetFreqDomain_P+0x58>
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d003      	beq.n	8004236 <RCC_PLLSAI1_GetFreqDomain_P+0x26>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b02      	cmp	r3, #2
 8004232:	d00b      	beq.n	800424c <RCC_PLLSAI1_GetFreqDomain_P+0x3c>
 8004234:	e018      	b.n	8004268 <RCC_PLLSAI1_GetFreqDomain_P+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004236:	f7fe fd5c 	bl	8002cf2 <LL_RCC_MSI_GetRange>
 800423a:	4603      	mov	r3, r0
 800423c:	091b      	lsrs	r3, r3, #4
 800423e:	f003 030f 	and.w	r3, r3, #15
 8004242:	4a1b      	ldr	r2, [pc, #108]	@ (80042b0 <RCC_PLLSAI1_GetFreqDomain_P+0xa0>)
 8004244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004248:	607b      	str	r3, [r7, #4]
      break;
 800424a:	e018      	b.n	800427e <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 800424c:	4b19      	ldr	r3, [pc, #100]	@ (80042b4 <RCC_PLLSAI1_GetFreqDomain_P+0xa4>)
 800424e:	607b      	str	r3, [r7, #4]
      break;
 8004250:	e015      	b.n	800427e <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004252:	f7fe fcad 	bl	8002bb0 <LL_RCC_HSE_IsEnabledDiv2>
 8004256:	4603      	mov	r3, r0
 8004258:	2b01      	cmp	r3, #1
 800425a:	d102      	bne.n	8004262 <RCC_PLLSAI1_GetFreqDomain_P+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 800425c:	4b16      	ldr	r3, [pc, #88]	@ (80042b8 <RCC_PLLSAI1_GetFreqDomain_P+0xa8>)
 800425e:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8004260:	e00d      	b.n	800427e <RCC_PLLSAI1_GetFreqDomain_P+0x6e>
        pllinputfreq = HSE_VALUE;
 8004262:	4b16      	ldr	r3, [pc, #88]	@ (80042bc <RCC_PLLSAI1_GetFreqDomain_P+0xac>)
 8004264:	607b      	str	r3, [r7, #4]
      break;
 8004266:	e00a      	b.n	800427e <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004268:	f7fe fd43 	bl	8002cf2 <LL_RCC_MSI_GetRange>
 800426c:	4603      	mov	r3, r0
 800426e:	091b      	lsrs	r3, r3, #4
 8004270:	f003 030f 	and.w	r3, r3, #15
 8004274:	4a0e      	ldr	r2, [pc, #56]	@ (80042b0 <RCC_PLLSAI1_GetFreqDomain_P+0xa0>)
 8004276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800427a:	607b      	str	r3, [r7, #4]
      break;
 800427c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_SAI_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800427e:	f7fe ffe5 	bl	800324c <LL_RCC_PLLSAI1_GetN>
 8004282:	4602      	mov	r2, r0
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	fb03 f402 	mul.w	r4, r3, r2
 800428a:	f7fe ffa3 	bl	80031d4 <LL_RCC_PLL_GetDivider>
 800428e:	4603      	mov	r3, r0
 8004290:	091b      	lsrs	r3, r3, #4
 8004292:	3301      	adds	r3, #1
 8004294:	fbb4 f4f3 	udiv	r4, r4, r3
 8004298:	f7fe ffe5 	bl	8003266 <LL_RCC_PLLSAI1_GetP>
 800429c:	4603      	mov	r3, r0
 800429e:	0c5b      	lsrs	r3, r3, #17
 80042a0:	3301      	adds	r3, #1
 80042a2:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetP());
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd90      	pop	{r4, r7, pc}
 80042ae:	bf00      	nop
 80042b0:	0800641c 	.word	0x0800641c
 80042b4:	00f42400 	.word	0x00f42400
 80042b8:	003d0900 	.word	0x003d0900
 80042bc:	007a1200 	.word	0x007a1200

080042c0 <RCC_PLLSAI1_GetFreqDomain_Q>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1QCLK) frequency used for 48Mhz domain
  * @retval PLLSAI1QCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_Q(void)
{
 80042c0:	b590      	push	{r4, r7, lr}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq;
  uint32_t pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* 48M Domain clock  = PLLSAI1_VCO / PLLSAI1Q */
  pllsource = LL_RCC_PLL_GetMainSource();
 80042c6:	f7fe fff2 	bl	80032ae <LL_RCC_PLL_GetMainSource>
 80042ca:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	2b03      	cmp	r3, #3
 80042d0:	d017      	beq.n	8004302 <RCC_PLLSAI1_GetFreqDomain_Q+0x42>
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	2b03      	cmp	r3, #3
 80042d6:	d81f      	bhi.n	8004318 <RCC_PLLSAI1_GetFreqDomain_Q+0x58>
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d003      	beq.n	80042e6 <RCC_PLLSAI1_GetFreqDomain_Q+0x26>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d00b      	beq.n	80042fc <RCC_PLLSAI1_GetFreqDomain_Q+0x3c>
 80042e4:	e018      	b.n	8004318 <RCC_PLLSAI1_GetFreqDomain_Q+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80042e6:	f7fe fd04 	bl	8002cf2 <LL_RCC_MSI_GetRange>
 80042ea:	4603      	mov	r3, r0
 80042ec:	091b      	lsrs	r3, r3, #4
 80042ee:	f003 030f 	and.w	r3, r3, #15
 80042f2:	4a1b      	ldr	r2, [pc, #108]	@ (8004360 <RCC_PLLSAI1_GetFreqDomain_Q+0xa0>)
 80042f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042f8:	607b      	str	r3, [r7, #4]
      break;
 80042fa:	e018      	b.n	800432e <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 80042fc:	4b19      	ldr	r3, [pc, #100]	@ (8004364 <RCC_PLLSAI1_GetFreqDomain_Q+0xa4>)
 80042fe:	607b      	str	r3, [r7, #4]
      break;
 8004300:	e015      	b.n	800432e <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004302:	f7fe fc55 	bl	8002bb0 <LL_RCC_HSE_IsEnabledDiv2>
 8004306:	4603      	mov	r3, r0
 8004308:	2b01      	cmp	r3, #1
 800430a:	d102      	bne.n	8004312 <RCC_PLLSAI1_GetFreqDomain_Q+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 800430c:	4b16      	ldr	r3, [pc, #88]	@ (8004368 <RCC_PLLSAI1_GetFreqDomain_Q+0xa8>)
 800430e:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8004310:	e00d      	b.n	800432e <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>
        pllinputfreq = HSE_VALUE;
 8004312:	4b16      	ldr	r3, [pc, #88]	@ (800436c <RCC_PLLSAI1_GetFreqDomain_Q+0xac>)
 8004314:	607b      	str	r3, [r7, #4]
      break;
 8004316:	e00a      	b.n	800432e <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004318:	f7fe fceb 	bl	8002cf2 <LL_RCC_MSI_GetRange>
 800431c:	4603      	mov	r3, r0
 800431e:	091b      	lsrs	r3, r3, #4
 8004320:	f003 030f 	and.w	r3, r3, #15
 8004324:	4a0e      	ldr	r2, [pc, #56]	@ (8004360 <RCC_PLLSAI1_GetFreqDomain_Q+0xa0>)
 8004326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800432a:	607b      	str	r3, [r7, #4]
      break;
 800432c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_48M_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800432e:	f7fe ff8d 	bl	800324c <LL_RCC_PLLSAI1_GetN>
 8004332:	4602      	mov	r2, r0
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	fb03 f402 	mul.w	r4, r3, r2
 800433a:	f7fe ff4b 	bl	80031d4 <LL_RCC_PLL_GetDivider>
 800433e:	4603      	mov	r3, r0
 8004340:	091b      	lsrs	r3, r3, #4
 8004342:	3301      	adds	r3, #1
 8004344:	fbb4 f4f3 	udiv	r4, r4, r3
 8004348:	f7fe ff99 	bl	800327e <LL_RCC_PLLSAI1_GetQ>
 800434c:	4603      	mov	r3, r0
 800434e:	0e5b      	lsrs	r3, r3, #25
 8004350:	3301      	adds	r3, #1
 8004352:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetQ());
}
 8004356:	4618      	mov	r0, r3
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	bd90      	pop	{r4, r7, pc}
 800435e:	bf00      	nop
 8004360:	0800641c 	.word	0x0800641c
 8004364:	00f42400 	.word	0x00f42400
 8004368:	003d0900 	.word	0x003d0900
 800436c:	007a1200 	.word	0x007a1200

08004370 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
 800437c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	2b02      	cmp	r3, #2
 8004382:	d904      	bls.n	800438e <HAL_SAI_InitProtocol+0x1e>
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	3b03      	subs	r3, #3
 8004388:	2b01      	cmp	r3, #1
 800438a:	d812      	bhi.n	80043b2 <HAL_SAI_InitProtocol+0x42>
 800438c:	e008      	b.n	80043a0 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	68b9      	ldr	r1, [r7, #8]
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 fbdb 	bl	8004b50 <SAI_InitI2S>
 800439a:	4603      	mov	r3, r0
 800439c:	75fb      	strb	r3, [r7, #23]
      break;
 800439e:	e00b      	b.n	80043b8 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	68b9      	ldr	r1, [r7, #8]
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f000 fc84 	bl	8004cb4 <SAI_InitPCM>
 80043ac:	4603      	mov	r3, r0
 80043ae:	75fb      	strb	r3, [r7, #23]
      break;
 80043b0:	e002      	b.n	80043b8 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	75fb      	strb	r3, [r7, #23]
      break;
 80043b6:	bf00      	nop
  }

  if (status == HAL_OK)
 80043b8:	7dfb      	ldrb	r3, [r7, #23]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d104      	bne.n	80043c8 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f000 f808 	bl	80043d4 <HAL_SAI_Init>
 80043c4:	4603      	mov	r3, r0
 80043c6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80043c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3718      	adds	r7, #24
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
	...

080043d4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e17c      	b.n	80046e0 <HAL_SAI_Init+0x30c>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d10e      	bne.n	800440e <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a5c      	ldr	r2, [pc, #368]	@ (8004568 <HAL_SAI_Init+0x194>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d107      	bne.n	800440a <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d103      	bne.n	800440a <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e168      	b.n	80046e0 <HAL_SAI_Init+0x30c>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d106      	bne.n	8004428 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f7fc fa78 	bl	8000918 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 fcc5 	bl	8004db8 <SAI_Disable>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e153      	b.n	80046e0 <HAL_SAI_Init+0x30c>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2202      	movs	r2, #2
 800443c:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.Synchro)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <HAL_SAI_Init+0x7a>
 8004448:	2b01      	cmp	r3, #1
 800444a:	d003      	beq.n	8004454 <HAL_SAI_Init+0x80>
 800444c:	e006      	b.n	800445c <HAL_SAI_Init+0x88>
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800444e:	2300      	movs	r3, #0
 8004450:	61bb      	str	r3, [r7, #24]
      break;
 8004452:	e006      	b.n	8004462 <HAL_SAI_Init+0x8e>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004454:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004458:	61bb      	str	r3, [r7, #24]
      break;
 800445a:	e002      	b.n	8004462 <HAL_SAI_Init+0x8e>
    default :
      syncen_bits = 0;
 800445c:	2300      	movs	r3, #0
 800445e:	61bb      	str	r3, [r7, #24]
      break;
 8004460:	bf00      	nop
  }

  SAI1->GCR = 0;
 8004462:	4b42      	ldr	r3, [pc, #264]	@ (800456c <HAL_SAI_Init+0x198>)
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d062      	beq.n	8004536 <HAL_SAI_Init+0x162>
  {
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004470:	2040      	movs	r0, #64	@ 0x40
 8004472:	f7ff f89f 	bl	80035b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004476:	60f8      	str	r0, [r7, #12]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004480:	d120      	bne.n	80044c4 <HAL_SAI_Init+0xf0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004486:	2b04      	cmp	r3, #4
 8004488:	d102      	bne.n	8004490 <HAL_SAI_Init+0xbc>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800448a:	2340      	movs	r3, #64	@ 0x40
 800448c:	613b      	str	r3, [r7, #16]
 800448e:	e00a      	b.n	80044a6 <HAL_SAI_Init+0xd2>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004494:	2b08      	cmp	r3, #8
 8004496:	d103      	bne.n	80044a0 <HAL_SAI_Init+0xcc>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8004498:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800449c:	613b      	str	r3, [r7, #16]
 800449e:	e002      	b.n	80044a6 <HAL_SAI_Init+0xd2>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044a4:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	4613      	mov	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	4413      	add	r3, r2
 80044ae:	005b      	lsls	r3, r3, #1
 80044b0:	4619      	mov	r1, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	fb02 f303 	mul.w	r3, r2, r3
 80044bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80044c0:	617b      	str	r3, [r7, #20]
 80044c2:	e017      	b.n	80044f4 <HAL_SAI_Init+0x120>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80044cc:	d101      	bne.n	80044d2 <HAL_SAI_Init+0xfe>
 80044ce:	2302      	movs	r3, #2
 80044d0:	e000      	b.n	80044d4 <HAL_SAI_Init+0x100>
 80044d2:	2301      	movs	r3, #1
 80044d4:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	4613      	mov	r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	4619      	mov	r1, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	fb02 f303 	mul.w	r3, r2, r3
 80044ec:	021b      	lsls	r3, r3, #8
 80044ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80044f2:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	4a1e      	ldr	r2, [pc, #120]	@ (8004570 <HAL_SAI_Init+0x19c>)
 80044f8:	fba2 2303 	umull	r2, r3, r2, r3
 80044fc:	08da      	lsrs	r2, r3, #3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8004502:	6979      	ldr	r1, [r7, #20]
 8004504:	4b1a      	ldr	r3, [pc, #104]	@ (8004570 <HAL_SAI_Init+0x19c>)
 8004506:	fba3 2301 	umull	r2, r3, r3, r1
 800450a:	08da      	lsrs	r2, r3, #3
 800450c:	4613      	mov	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	1aca      	subs	r2, r1, r3
 8004516:	2a08      	cmp	r2, #8
 8004518:	d904      	bls.n	8004524 <HAL_SAI_Init+0x150>
    {
      hsai->Init.Mckdiv += 1U;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451e:	1c5a      	adds	r2, r3, #1
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004528:	2b04      	cmp	r3, #4
 800452a:	d104      	bne.n	8004536 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004530:	085a      	lsrs	r2, r3, #1
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <HAL_SAI_Init+0x172>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	2b02      	cmp	r3, #2
 8004544:	d109      	bne.n	800455a <HAL_SAI_Init+0x186>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800454a:	2b01      	cmp	r3, #1
 800454c:	d101      	bne.n	8004552 <HAL_SAI_Init+0x17e>
 800454e:	2300      	movs	r3, #0
 8004550:	e001      	b.n	8004556 <HAL_SAI_Init+0x182>
 8004552:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004556:	61fb      	str	r3, [r7, #28]
 8004558:	e00e      	b.n	8004578 <HAL_SAI_Init+0x1a4>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800455e:	2b01      	cmp	r3, #1
 8004560:	d108      	bne.n	8004574 <HAL_SAI_Init+0x1a0>
 8004562:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004566:	e006      	b.n	8004576 <HAL_SAI_Init+0x1a2>
 8004568:	40015404 	.word	0x40015404
 800456c:	40015400 	.word	0x40015400
 8004570:	cccccccd 	.word	0xcccccccd
 8004574:	2300      	movs	r3, #0
 8004576:	61fb      	str	r3, [r7, #28]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6819      	ldr	r1, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	4b59      	ldr	r3, [pc, #356]	@ (80046e8 <HAL_SAI_Init+0x314>)
 8004584:	400b      	ands	r3, r1
 8004586:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6819      	ldr	r1, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004596:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800459c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045a2:	431a      	orrs	r2, r3
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 80045b0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80045bc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c2:	051b      	lsls	r3, r3, #20
 80045c4:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80045ca:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6812      	ldr	r2, [r2, #0]
 80045e4:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80045e8:	f023 030f 	bic.w	r3, r3, #15
 80045ec:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6859      	ldr	r1, [r3, #4]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	69da      	ldr	r2, [r3, #28]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045fc:	431a      	orrs	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	430a      	orrs	r2, r1
 800460a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6899      	ldr	r1, [r3, #8]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	4b35      	ldr	r3, [pc, #212]	@ (80046ec <HAL_SAI_Init+0x318>)
 8004618:	400b      	ands	r3, r1
 800461a:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6899      	ldr	r1, [r3, #8]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004626:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800462c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 8004632:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 8004638:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800463e:	3b01      	subs	r3, #1
 8004640:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8004642:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68d9      	ldr	r1, [r3, #12]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800465a:	400b      	ands	r3, r1
 800465c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68d9      	ldr	r1, [r3, #12]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800466c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004672:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004674:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800467a:	3b01      	subs	r3, #1
 800467c:	021b      	lsls	r3, r3, #8
 800467e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a18      	ldr	r2, [pc, #96]	@ (80046f0 <HAL_SAI_Init+0x31c>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d119      	bne.n	80046c6 <HAL_SAI_Init+0x2f2>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8004692:	4b18      	ldr	r3, [pc, #96]	@ (80046f4 <HAL_SAI_Init+0x320>)
 8004694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004696:	4a17      	ldr	r2, [pc, #92]	@ (80046f4 <HAL_SAI_Init+0x320>)
 8004698:	f023 0301 	bic.w	r3, r3, #1
 800469c:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d10e      	bne.n	80046c6 <HAL_SAI_Init+0x2f2>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046b0:	3b01      	subs	r3, #1
 80046b2:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80046b4:	490f      	ldr	r1, [pc, #60]	@ (80046f4 <HAL_SAI_Init+0x320>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 80046ba:	4b0e      	ldr	r3, [pc, #56]	@ (80046f4 <HAL_SAI_Init+0x320>)
 80046bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046be:	4a0d      	ldr	r2, [pc, #52]	@ (80046f4 <HAL_SAI_Init+0x320>)
 80046c0:	f043 0301 	orr.w	r3, r3, #1
 80046c4:	6453      	str	r3, [r2, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3720      	adds	r7, #32
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	f005c010 	.word	0xf005c010
 80046ec:	fff88000 	.word	0xfff88000
 80046f0:	40015404 	.word	0x40015404
 80046f4:	40015400 	.word	0x40015400

080046f8 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004700:	2300      	movs	r3, #0
 8004702:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800470a:	2b01      	cmp	r3, #1
 800470c:	d101      	bne.n	8004712 <HAL_SAI_Abort+0x1a>
 800470e:	2302      	movs	r3, #2
 8004710:	e057      	b.n	80047c2 <HAL_SAI_Abort+0xca>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 fb4c 	bl	8004db8 <SAI_Disable>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004734:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004738:	d129      	bne.n	800478e <HAL_SAI_Abort+0x96>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8004748:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b12      	cmp	r3, #18
 8004754:	d10a      	bne.n	800476c <HAL_SAI_Abort+0x74>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800475c:	2b00      	cmp	r3, #0
 800475e:	d005      	beq.n	800476c <HAL_SAI_Abort+0x74>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmatx);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004766:	4618      	mov	r0, r3
 8004768:	f7fc fd36 	bl	80011d8 <HAL_DMA_Abort>
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b22      	cmp	r3, #34	@ 0x22
 8004776:	d10a      	bne.n	800478e <HAL_SAI_Abort+0x96>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800477e:	2b00      	cmp	r3, #0
 8004780:	d005      	beq.n	800478e <HAL_SAI_Abort+0x96>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmarx);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004788:	4618      	mov	r0, r3
 800478a:	f7fc fd25 	bl	80011d8 <HAL_DMA_Abort>
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2200      	movs	r2, #0
 8004794:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800479e:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f042 0208 	orr.w	r2, r2, #8
 80047ae:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return status;
 80047c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
	...

080047cc <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b086      	sub	sp, #24
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 81a7 	beq.w	8004b30 <HAL_SAI_IRQHandler+0x364>
  {
    uint32_t itflags = hsai->Instance->SR;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f003 0308 	and.w	r3, r3, #8
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00a      	beq.n	800481a <HAL_SAI_IRQHandler+0x4e>
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	f003 0308 	and.w	r3, r3, #8
 800480a:	2b00      	cmp	r3, #0
 800480c:	d005      	beq.n	800481a <HAL_SAI_IRQHandler+0x4e>
    {
      hsai->InterruptServiceRoutine(hsai);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	4798      	blx	r3
 8004818:	e18a      	b.n	8004b30 <HAL_SAI_IRQHandler+0x364>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	2b00      	cmp	r3, #0
 8004822:	d01e      	beq.n	8004862 <HAL_SAI_IRQHandler+0x96>
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d019      	beq.n	8004862 <HAL_SAI_IRQHandler+0x96>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2201      	movs	r2, #1
 8004834:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b22      	cmp	r3, #34	@ 0x22
 8004840:	d101      	bne.n	8004846 <HAL_SAI_IRQHandler+0x7a>
 8004842:	2301      	movs	r3, #1
 8004844:	e000      	b.n	8004848 <HAL_SAI_IRQHandler+0x7c>
 8004846:	2302      	movs	r3, #2
 8004848:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f96e 	bl	8004b3c <HAL_SAI_ErrorCallback>
 8004860:	e166      	b.n	8004b30 <HAL_SAI_IRQHandler+0x364>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d013      	beq.n	8004894 <HAL_SAI_IRQHandler+0xc8>
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00e      	beq.n	8004894 <HAL_SAI_IRQHandler+0xc8>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2202      	movs	r2, #2
 800487c:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004884:	2b00      	cmp	r3, #0
 8004886:	f000 8153 	beq.w	8004b30 <HAL_SAI_IRQHandler+0x364>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004890:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 8004892:	e14d      	b.n	8004b30 <HAL_SAI_IRQHandler+0x364>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	f003 0320 	and.w	r3, r3, #32
 800489a:	2b00      	cmp	r3, #0
 800489c:	d05b      	beq.n	8004956 <HAL_SAI_IRQHandler+0x18a>
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	f003 0320 	and.w	r3, r3, #32
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d056      	beq.n	8004956 <HAL_SAI_IRQHandler+0x18a>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2220      	movs	r2, #32
 80048ae:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048b6:	f043 0204 	orr.w	r2, r3, #4
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d03e      	beq.n	8004948 <HAL_SAI_IRQHandler+0x17c>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d018      	beq.n	8004906 <HAL_SAI_IRQHandler+0x13a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048da:	4a97      	ldr	r2, [pc, #604]	@ (8004b38 <HAL_SAI_IRQHandler+0x36c>)
 80048dc:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7fc fcd6 	bl	8001296 <HAL_DMA_Abort_IT>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00a      	beq.n	8004906 <HAL_SAI_IRQHandler+0x13a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048f6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f91b 	bl	8004b3c <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 810a 	beq.w	8004b26 <HAL_SAI_IRQHandler+0x35a>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004918:	4a87      	ldr	r2, [pc, #540]	@ (8004b38 <HAL_SAI_IRQHandler+0x36c>)
 800491a:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004922:	4618      	mov	r0, r3
 8004924:	f7fc fcb7 	bl	8001296 <HAL_DMA_Abort_IT>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	f000 80fb 	beq.w	8004b26 <HAL_SAI_IRQHandler+0x35a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004936:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f8fb 	bl	8004b3c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004946:	e0ee      	b.n	8004b26 <HAL_SAI_IRQHandler+0x35a>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f7ff fed5 	bl	80046f8 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f8f4 	bl	8004b3c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004954:	e0e7      	b.n	8004b26 <HAL_SAI_IRQHandler+0x35a>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800495c:	2b00      	cmp	r3, #0
 800495e:	d05b      	beq.n	8004a18 <HAL_SAI_IRQHandler+0x24c>
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004966:	2b00      	cmp	r3, #0
 8004968:	d056      	beq.n	8004a18 <HAL_SAI_IRQHandler+0x24c>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2240      	movs	r2, #64	@ 0x40
 8004970:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004978:	f043 0208 	orr.w	r2, r3, #8
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d03e      	beq.n	8004a0a <HAL_SAI_IRQHandler+0x23e>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004992:	2b00      	cmp	r3, #0
 8004994:	d018      	beq.n	80049c8 <HAL_SAI_IRQHandler+0x1fc>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800499c:	4a66      	ldr	r2, [pc, #408]	@ (8004b38 <HAL_SAI_IRQHandler+0x36c>)
 800499e:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fc fc75 	bl	8001296 <HAL_DMA_Abort_IT>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00a      	beq.n	80049c8 <HAL_SAI_IRQHandler+0x1fc>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049b8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f8ba 	bl	8004b3c <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f000 80ab 	beq.w	8004b2a <HAL_SAI_IRQHandler+0x35e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049da:	4a57      	ldr	r2, [pc, #348]	@ (8004b38 <HAL_SAI_IRQHandler+0x36c>)
 80049dc:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7fc fc56 	bl	8001296 <HAL_DMA_Abort_IT>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 809c 	beq.w	8004b2a <HAL_SAI_IRQHandler+0x35e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049f8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f89a 	bl	8004b3c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004a08:	e08f      	b.n	8004b2a <HAL_SAI_IRQHandler+0x35e>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7ff fe74 	bl	80046f8 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 f893 	bl	8004b3c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004a16:	e088      	b.n	8004b2a <HAL_SAI_IRQHandler+0x35e>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	f003 0304 	and.w	r3, r3, #4
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d067      	beq.n	8004af2 <HAL_SAI_IRQHandler+0x326>
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	f003 0304 	and.w	r3, r3, #4
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d062      	beq.n	8004af2 <HAL_SAI_IRQHandler+0x326>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2204      	movs	r2, #4
 8004a32:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a3a:	f043 0220 	orr.w	r2, r3, #32
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d03c      	beq.n	8004ac8 <HAL_SAI_IRQHandler+0x2fc>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d018      	beq.n	8004a8a <HAL_SAI_IRQHandler+0x2be>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a5e:	4a36      	ldr	r2, [pc, #216]	@ (8004b38 <HAL_SAI_IRQHandler+0x36c>)
 8004a60:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7fc fc14 	bl	8001296 <HAL_DMA_Abort_IT>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00a      	beq.n	8004a8a <HAL_SAI_IRQHandler+0x2be>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a7a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 f859 	bl	8004b3c <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d04c      	beq.n	8004b2e <HAL_SAI_IRQHandler+0x362>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a9a:	4a27      	ldr	r2, [pc, #156]	@ (8004b38 <HAL_SAI_IRQHandler+0x36c>)
 8004a9c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7fc fbf6 	bl	8001296 <HAL_DMA_Abort_IT>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d03e      	beq.n	8004b2e <HAL_SAI_IRQHandler+0x362>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ab6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 f83b 	bl	8004b3c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004ac6:	e032      	b.n	8004b2e <HAL_SAI_IRQHandler+0x362>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2200      	movs	r2, #0
 8004ace:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004ad8:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f826 	bl	8004b3c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004af0:	e01d      	b.n	8004b2e <HAL_SAI_IRQHandler+0x362>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f003 0310 	and.w	r3, r3, #16
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d019      	beq.n	8004b30 <HAL_SAI_IRQHandler+0x364>
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	f003 0310 	and.w	r3, r3, #16
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d014      	beq.n	8004b30 <HAL_SAI_IRQHandler+0x364>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2210      	movs	r2, #16
 8004b0c:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b14:	f043 0210 	orr.w	r2, r3, #16
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f80c 	bl	8004b3c <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 8004b24:	e004      	b.n	8004b30 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004b26:	bf00      	nop
 8004b28:	e002      	b.n	8004b30 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004b2a:	bf00      	nop
 8004b2c:	e000      	b.n	8004b30 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004b2e:	bf00      	nop
}
 8004b30:	bf00      	nop
 8004b32:	3718      	adds	r7, #24
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	08004e2d 	.word	0x08004e2d

08004b3c <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
 8004b5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <SAI_InitI2S+0x2e>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d103      	bne.n	8004b86 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	651a      	str	r2, [r3, #80]	@ 0x50
 8004b84:	e002      	b.n	8004b8c <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004b92:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b9a:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e077      	b.n	8004ca6 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d107      	bne.n	8004bcc <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004bc8:	665a      	str	r2, [r3, #100]	@ 0x64
 8004bca:	e006      	b.n	8004bda <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004bd2:	661a      	str	r2, [r3, #96]	@ 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2b03      	cmp	r3, #3
 8004bde:	d84f      	bhi.n	8004c80 <SAI_InitI2S+0x130>
 8004be0:	a201      	add	r2, pc, #4	@ (adr r2, 8004be8 <SAI_InitI2S+0x98>)
 8004be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be6:	bf00      	nop
 8004be8:	08004bf9 	.word	0x08004bf9
 8004bec:	08004c1b 	.word	0x08004c1b
 8004bf0:	08004c3d 	.word	0x08004c3d
 8004bf4:	08004c5f 	.word	0x08004c5f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2280      	movs	r2, #128	@ 0x80
 8004bfc:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	085b      	lsrs	r3, r3, #1
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	085b      	lsrs	r3, r3, #1
 8004c0c:	011a      	lsls	r2, r3, #4
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2240      	movs	r2, #64	@ 0x40
 8004c16:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8004c18:	e035      	b.n	8004c86 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2280      	movs	r2, #128	@ 0x80
 8004c1e:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	085b      	lsrs	r3, r3, #1
 8004c24:	019a      	lsls	r2, r3, #6
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	085b      	lsrs	r3, r3, #1
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2280      	movs	r2, #128	@ 0x80
 8004c38:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8004c3a:	e024      	b.n	8004c86 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	22c0      	movs	r2, #192	@ 0xc0
 8004c40:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	085b      	lsrs	r3, r3, #1
 8004c46:	019a      	lsls	r2, r3, #6
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	085b      	lsrs	r3, r3, #1
 8004c50:	015a      	lsls	r2, r3, #5
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2280      	movs	r2, #128	@ 0x80
 8004c5a:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8004c5c:	e013      	b.n	8004c86 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	22e0      	movs	r2, #224	@ 0xe0
 8004c62:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	085b      	lsrs	r3, r3, #1
 8004c68:	019a      	lsls	r2, r3, #6
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	085b      	lsrs	r3, r3, #1
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2280      	movs	r2, #128	@ 0x80
 8004c7c:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8004c7e:	e002      	b.n	8004c86 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	75fb      	strb	r3, [r7, #23]
      break;
 8004c84:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d10b      	bne.n	8004ca4 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d102      	bne.n	8004c98 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2210      	movs	r2, #16
 8004c96:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d102      	bne.n	8004ca4 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2208      	movs	r2, #8
 8004ca2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 8004ca4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	371c      	adds	r7, #28
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop

08004cb4 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b087      	sub	sp, #28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
 8004cc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <SAI_InitPCM+0x2e>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d103      	bne.n	8004cea <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	651a      	str	r2, [r3, #80]	@ 0x50
 8004ce8:	e002      	b.n	8004cf0 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004cfc:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004d04:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004d18:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	2b04      	cmp	r3, #4
 8004d1e:	d103      	bne.n	8004d28 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2201      	movs	r2, #1
 8004d24:	659a      	str	r2, [r3, #88]	@ 0x58
 8004d26:	e002      	b.n	8004d2e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	220d      	movs	r2, #13
 8004d2c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b03      	cmp	r3, #3
 8004d32:	d837      	bhi.n	8004da4 <SAI_InitPCM+0xf0>
 8004d34:	a201      	add	r2, pc, #4	@ (adr r2, 8004d3c <SAI_InitPCM+0x88>)
 8004d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3a:	bf00      	nop
 8004d3c:	08004d4d 	.word	0x08004d4d
 8004d40:	08004d63 	.word	0x08004d63
 8004d44:	08004d79 	.word	0x08004d79
 8004d48:	08004d8f 	.word	0x08004d8f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2280      	movs	r2, #128	@ 0x80
 8004d50:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	011a      	lsls	r2, r3, #4
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2240      	movs	r2, #64	@ 0x40
 8004d5e:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8004d60:	e023      	b.n	8004daa <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2280      	movs	r2, #128	@ 0x80
 8004d66:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	015a      	lsls	r2, r3, #5
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2280      	movs	r2, #128	@ 0x80
 8004d74:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8004d76:	e018      	b.n	8004daa <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	22c0      	movs	r2, #192	@ 0xc0
 8004d7c:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	015a      	lsls	r2, r3, #5
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2280      	movs	r2, #128	@ 0x80
 8004d8a:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8004d8c:	e00d      	b.n	8004daa <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	22e0      	movs	r2, #224	@ 0xe0
 8004d92:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2280      	movs	r2, #128	@ 0x80
 8004da0:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8004da2:	e002      	b.n	8004daa <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	75fb      	strb	r3, [r7, #23]
      break;
 8004da8:	bf00      	nop
  }

  return status;
 8004daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	371c      	adds	r7, #28
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004dc0:	4b18      	ldr	r3, [pc, #96]	@ (8004e24 <SAI_Disable+0x6c>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a18      	ldr	r2, [pc, #96]	@ (8004e28 <SAI_Disable+0x70>)
 8004dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dca:	0b1b      	lsrs	r3, r3, #12
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004de2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10a      	bne.n	8004e00 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004df0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	72fb      	strb	r3, [r7, #11]
      break;
 8004dfe:	e009      	b.n	8004e14 <SAI_Disable+0x5c>
    }
    count--;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	3b01      	subs	r3, #1
 8004e04:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1e7      	bne.n	8004de4 <SAI_Disable+0x2c>

  return status;
 8004e14:	7afb      	ldrb	r3, [r7, #11]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	20000008 	.word	0x20000008
 8004e28:	95cbec1b 	.word	0x95cbec1b

08004e2c <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e38:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8004e48:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004e5a:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e62:	2b20      	cmp	r3, #32
 8004e64:	d00a      	beq.n	8004e7c <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f7ff ffa6 	bl	8004db8 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f042 0208 	orr.w	r2, r2, #8
 8004e7a:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f7ff fe55 	bl	8004b3c <HAL_SAI_ErrorCallback>
#endif
}
 8004e92:	bf00      	nop
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <LL_RCC_GetUSARTClockSource>:
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b083      	sub	sp, #12
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004ea2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ea6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4013      	ands	r3, r2
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <LL_RCC_GetLPUARTClockSource>:
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004ec2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ec6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4013      	ands	r3, r2
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b082      	sub	sp, #8
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d101      	bne.n	8004eec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e042      	b.n	8004f72 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d106      	bne.n	8004f04 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7fb fcc6 	bl	8000890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2224      	movs	r2, #36	@ 0x24
 8004f08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f022 0201 	bic.w	r2, r2, #1
 8004f1a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d002      	beq.n	8004f2a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 fa51 	bl	80053cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f826 	bl	8004f7c <UART_SetConfig>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d101      	bne.n	8004f3a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e01b      	b.n	8004f72 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f48:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f58:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f042 0201 	orr.w	r2, r2, #1
 8004f68:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 fad0 	bl	8005510 <UART_CheckIdleState>
 8004f70:	4603      	mov	r3, r0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
	...

08004f7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f80:	b08c      	sub	sp, #48	@ 0x30
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f86:	2300      	movs	r3, #0
 8004f88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	431a      	orrs	r2, r3
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	69db      	ldr	r3, [r3, #28]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	4baf      	ldr	r3, [pc, #700]	@ (8005268 <UART_SetConfig+0x2ec>)
 8004fac:	4013      	ands	r3, r2
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	6812      	ldr	r2, [r2, #0]
 8004fb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004fb4:	430b      	orrs	r3, r1
 8004fb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	68da      	ldr	r2, [r3, #12]
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4aa4      	ldr	r2, [pc, #656]	@ (800526c <UART_SetConfig+0x2f0>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d004      	beq.n	8004fe8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004ff2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	6812      	ldr	r2, [r2, #0]
 8004ffa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ffc:	430b      	orrs	r3, r1
 8004ffe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005006:	f023 010f 	bic.w	r1, r3, #15
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a95      	ldr	r2, [pc, #596]	@ (8005270 <UART_SetConfig+0x2f4>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d125      	bne.n	800506c <UART_SetConfig+0xf0>
 8005020:	2003      	movs	r0, #3
 8005022:	f7ff ff3a 	bl	8004e9a <LL_RCC_GetUSARTClockSource>
 8005026:	4603      	mov	r3, r0
 8005028:	2b03      	cmp	r3, #3
 800502a:	d81b      	bhi.n	8005064 <UART_SetConfig+0xe8>
 800502c:	a201      	add	r2, pc, #4	@ (adr r2, 8005034 <UART_SetConfig+0xb8>)
 800502e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005032:	bf00      	nop
 8005034:	08005045 	.word	0x08005045
 8005038:	08005055 	.word	0x08005055
 800503c:	0800504d 	.word	0x0800504d
 8005040:	0800505d 	.word	0x0800505d
 8005044:	2301      	movs	r3, #1
 8005046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800504a:	e042      	b.n	80050d2 <UART_SetConfig+0x156>
 800504c:	2302      	movs	r3, #2
 800504e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005052:	e03e      	b.n	80050d2 <UART_SetConfig+0x156>
 8005054:	2304      	movs	r3, #4
 8005056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800505a:	e03a      	b.n	80050d2 <UART_SetConfig+0x156>
 800505c:	2308      	movs	r3, #8
 800505e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005062:	e036      	b.n	80050d2 <UART_SetConfig+0x156>
 8005064:	2310      	movs	r3, #16
 8005066:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800506a:	e032      	b.n	80050d2 <UART_SetConfig+0x156>
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a7e      	ldr	r2, [pc, #504]	@ (800526c <UART_SetConfig+0x2f0>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d12a      	bne.n	80050cc <UART_SetConfig+0x150>
 8005076:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800507a:	f7ff ff1e 	bl	8004eba <LL_RCC_GetLPUARTClockSource>
 800507e:	4603      	mov	r3, r0
 8005080:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005084:	d01a      	beq.n	80050bc <UART_SetConfig+0x140>
 8005086:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800508a:	d81b      	bhi.n	80050c4 <UART_SetConfig+0x148>
 800508c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005090:	d00c      	beq.n	80050ac <UART_SetConfig+0x130>
 8005092:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005096:	d815      	bhi.n	80050c4 <UART_SetConfig+0x148>
 8005098:	2b00      	cmp	r3, #0
 800509a:	d003      	beq.n	80050a4 <UART_SetConfig+0x128>
 800509c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050a0:	d008      	beq.n	80050b4 <UART_SetConfig+0x138>
 80050a2:	e00f      	b.n	80050c4 <UART_SetConfig+0x148>
 80050a4:	2300      	movs	r3, #0
 80050a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050aa:	e012      	b.n	80050d2 <UART_SetConfig+0x156>
 80050ac:	2302      	movs	r3, #2
 80050ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050b2:	e00e      	b.n	80050d2 <UART_SetConfig+0x156>
 80050b4:	2304      	movs	r3, #4
 80050b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050ba:	e00a      	b.n	80050d2 <UART_SetConfig+0x156>
 80050bc:	2308      	movs	r3, #8
 80050be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050c2:	e006      	b.n	80050d2 <UART_SetConfig+0x156>
 80050c4:	2310      	movs	r3, #16
 80050c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050ca:	e002      	b.n	80050d2 <UART_SetConfig+0x156>
 80050cc:	2310      	movs	r3, #16
 80050ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a65      	ldr	r2, [pc, #404]	@ (800526c <UART_SetConfig+0x2f0>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	f040 8097 	bne.w	800520c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80050e2:	2b08      	cmp	r3, #8
 80050e4:	d823      	bhi.n	800512e <UART_SetConfig+0x1b2>
 80050e6:	a201      	add	r2, pc, #4	@ (adr r2, 80050ec <UART_SetConfig+0x170>)
 80050e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ec:	08005111 	.word	0x08005111
 80050f0:	0800512f 	.word	0x0800512f
 80050f4:	08005119 	.word	0x08005119
 80050f8:	0800512f 	.word	0x0800512f
 80050fc:	0800511f 	.word	0x0800511f
 8005100:	0800512f 	.word	0x0800512f
 8005104:	0800512f 	.word	0x0800512f
 8005108:	0800512f 	.word	0x0800512f
 800510c:	08005127 	.word	0x08005127
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005110:	f7fd fc6e 	bl	80029f0 <HAL_RCC_GetPCLK1Freq>
 8005114:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005116:	e010      	b.n	800513a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005118:	4b56      	ldr	r3, [pc, #344]	@ (8005274 <UART_SetConfig+0x2f8>)
 800511a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800511c:	e00d      	b.n	800513a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800511e:	f7fd fbe5 	bl	80028ec <HAL_RCC_GetSysClockFreq>
 8005122:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005124:	e009      	b.n	800513a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005126:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800512a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800512c:	e005      	b.n	800513a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800512e:	2300      	movs	r3, #0
 8005130:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005138:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800513a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 812b 	beq.w	8005398 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005146:	4a4c      	ldr	r2, [pc, #304]	@ (8005278 <UART_SetConfig+0x2fc>)
 8005148:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800514c:	461a      	mov	r2, r3
 800514e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005150:	fbb3 f3f2 	udiv	r3, r3, r2
 8005154:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	4613      	mov	r3, r2
 800515c:	005b      	lsls	r3, r3, #1
 800515e:	4413      	add	r3, r2
 8005160:	69ba      	ldr	r2, [r7, #24]
 8005162:	429a      	cmp	r2, r3
 8005164:	d305      	bcc.n	8005172 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	429a      	cmp	r2, r3
 8005170:	d903      	bls.n	800517a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005178:	e10e      	b.n	8005398 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800517a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517c:	2200      	movs	r2, #0
 800517e:	60bb      	str	r3, [r7, #8]
 8005180:	60fa      	str	r2, [r7, #12]
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005186:	4a3c      	ldr	r2, [pc, #240]	@ (8005278 <UART_SetConfig+0x2fc>)
 8005188:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800518c:	b29b      	uxth	r3, r3
 800518e:	2200      	movs	r2, #0
 8005190:	603b      	str	r3, [r7, #0]
 8005192:	607a      	str	r2, [r7, #4]
 8005194:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005198:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800519c:	f7fa ffee 	bl	800017c <__aeabi_uldivmod>
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	4610      	mov	r0, r2
 80051a6:	4619      	mov	r1, r3
 80051a8:	f04f 0200 	mov.w	r2, #0
 80051ac:	f04f 0300 	mov.w	r3, #0
 80051b0:	020b      	lsls	r3, r1, #8
 80051b2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80051b6:	0202      	lsls	r2, r0, #8
 80051b8:	6979      	ldr	r1, [r7, #20]
 80051ba:	6849      	ldr	r1, [r1, #4]
 80051bc:	0849      	lsrs	r1, r1, #1
 80051be:	2000      	movs	r0, #0
 80051c0:	460c      	mov	r4, r1
 80051c2:	4605      	mov	r5, r0
 80051c4:	eb12 0804 	adds.w	r8, r2, r4
 80051c8:	eb43 0905 	adc.w	r9, r3, r5
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	469a      	mov	sl, r3
 80051d4:	4693      	mov	fp, r2
 80051d6:	4652      	mov	r2, sl
 80051d8:	465b      	mov	r3, fp
 80051da:	4640      	mov	r0, r8
 80051dc:	4649      	mov	r1, r9
 80051de:	f7fa ffcd 	bl	800017c <__aeabi_uldivmod>
 80051e2:	4602      	mov	r2, r0
 80051e4:	460b      	mov	r3, r1
 80051e6:	4613      	mov	r3, r2
 80051e8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051ea:	6a3b      	ldr	r3, [r7, #32]
 80051ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051f0:	d308      	bcc.n	8005204 <UART_SetConfig+0x288>
 80051f2:	6a3b      	ldr	r3, [r7, #32]
 80051f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051f8:	d204      	bcs.n	8005204 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	6a3a      	ldr	r2, [r7, #32]
 8005200:	60da      	str	r2, [r3, #12]
 8005202:	e0c9      	b.n	8005398 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800520a:	e0c5      	b.n	8005398 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	69db      	ldr	r3, [r3, #28]
 8005210:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005214:	d16d      	bne.n	80052f2 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005216:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800521a:	3b01      	subs	r3, #1
 800521c:	2b07      	cmp	r3, #7
 800521e:	d82d      	bhi.n	800527c <UART_SetConfig+0x300>
 8005220:	a201      	add	r2, pc, #4	@ (adr r2, 8005228 <UART_SetConfig+0x2ac>)
 8005222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005226:	bf00      	nop
 8005228:	08005249 	.word	0x08005249
 800522c:	08005251 	.word	0x08005251
 8005230:	0800527d 	.word	0x0800527d
 8005234:	08005257 	.word	0x08005257
 8005238:	0800527d 	.word	0x0800527d
 800523c:	0800527d 	.word	0x0800527d
 8005240:	0800527d 	.word	0x0800527d
 8005244:	0800525f 	.word	0x0800525f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005248:	f7fd fbe8 	bl	8002a1c <HAL_RCC_GetPCLK2Freq>
 800524c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800524e:	e01b      	b.n	8005288 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005250:	4b08      	ldr	r3, [pc, #32]	@ (8005274 <UART_SetConfig+0x2f8>)
 8005252:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005254:	e018      	b.n	8005288 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005256:	f7fd fb49 	bl	80028ec <HAL_RCC_GetSysClockFreq>
 800525a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800525c:	e014      	b.n	8005288 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800525e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005262:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005264:	e010      	b.n	8005288 <UART_SetConfig+0x30c>
 8005266:	bf00      	nop
 8005268:	cfff69f3 	.word	0xcfff69f3
 800526c:	40008000 	.word	0x40008000
 8005270:	40013800 	.word	0x40013800
 8005274:	00f42400 	.word	0x00f42400
 8005278:	080064bc 	.word	0x080064bc
      default:
        pclk = 0U;
 800527c:	2300      	movs	r3, #0
 800527e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005286:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528a:	2b00      	cmp	r3, #0
 800528c:	f000 8084 	beq.w	8005398 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005294:	4a4b      	ldr	r2, [pc, #300]	@ (80053c4 <UART_SetConfig+0x448>)
 8005296:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800529a:	461a      	mov	r2, r3
 800529c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529e:	fbb3 f3f2 	udiv	r3, r3, r2
 80052a2:	005a      	lsls	r2, r3, #1
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	085b      	lsrs	r3, r3, #1
 80052aa:	441a      	add	r2, r3
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052b6:	6a3b      	ldr	r3, [r7, #32]
 80052b8:	2b0f      	cmp	r3, #15
 80052ba:	d916      	bls.n	80052ea <UART_SetConfig+0x36e>
 80052bc:	6a3b      	ldr	r3, [r7, #32]
 80052be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052c2:	d212      	bcs.n	80052ea <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	f023 030f 	bic.w	r3, r3, #15
 80052cc:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052ce:	6a3b      	ldr	r3, [r7, #32]
 80052d0:	085b      	lsrs	r3, r3, #1
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	f003 0307 	and.w	r3, r3, #7
 80052d8:	b29a      	uxth	r2, r3
 80052da:	8bfb      	ldrh	r3, [r7, #30]
 80052dc:	4313      	orrs	r3, r2
 80052de:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	8bfa      	ldrh	r2, [r7, #30]
 80052e6:	60da      	str	r2, [r3, #12]
 80052e8:	e056      	b.n	8005398 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80052f0:	e052      	b.n	8005398 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052f2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80052f6:	3b01      	subs	r3, #1
 80052f8:	2b07      	cmp	r3, #7
 80052fa:	d822      	bhi.n	8005342 <UART_SetConfig+0x3c6>
 80052fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005304 <UART_SetConfig+0x388>)
 80052fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005302:	bf00      	nop
 8005304:	08005325 	.word	0x08005325
 8005308:	0800532d 	.word	0x0800532d
 800530c:	08005343 	.word	0x08005343
 8005310:	08005333 	.word	0x08005333
 8005314:	08005343 	.word	0x08005343
 8005318:	08005343 	.word	0x08005343
 800531c:	08005343 	.word	0x08005343
 8005320:	0800533b 	.word	0x0800533b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005324:	f7fd fb7a 	bl	8002a1c <HAL_RCC_GetPCLK2Freq>
 8005328:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800532a:	e010      	b.n	800534e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800532c:	4b26      	ldr	r3, [pc, #152]	@ (80053c8 <UART_SetConfig+0x44c>)
 800532e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005330:	e00d      	b.n	800534e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005332:	f7fd fadb 	bl	80028ec <HAL_RCC_GetSysClockFreq>
 8005336:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005338:	e009      	b.n	800534e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800533a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800533e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005340:	e005      	b.n	800534e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8005342:	2300      	movs	r3, #0
 8005344:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800534c:	bf00      	nop
    }

    if (pclk != 0U)
 800534e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005350:	2b00      	cmp	r3, #0
 8005352:	d021      	beq.n	8005398 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005358:	4a1a      	ldr	r2, [pc, #104]	@ (80053c4 <UART_SetConfig+0x448>)
 800535a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800535e:	461a      	mov	r2, r3
 8005360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005362:	fbb3 f2f2 	udiv	r2, r3, r2
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	085b      	lsrs	r3, r3, #1
 800536c:	441a      	add	r2, r3
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	fbb2 f3f3 	udiv	r3, r2, r3
 8005376:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	2b0f      	cmp	r3, #15
 800537c:	d909      	bls.n	8005392 <UART_SetConfig+0x416>
 800537e:	6a3b      	ldr	r3, [r7, #32]
 8005380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005384:	d205      	bcs.n	8005392 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005386:	6a3b      	ldr	r3, [r7, #32]
 8005388:	b29a      	uxth	r2, r3
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	60da      	str	r2, [r3, #12]
 8005390:	e002      	b.n	8005398 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	2201      	movs	r2, #1
 800539c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	2200      	movs	r2, #0
 80053ac:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2200      	movs	r2, #0
 80053b2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80053b4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3730      	adds	r7, #48	@ 0x30
 80053bc:	46bd      	mov	sp, r7
 80053be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053c2:	bf00      	nop
 80053c4:	080064bc 	.word	0x080064bc
 80053c8:	00f42400 	.word	0x00f42400

080053cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053d8:	f003 0308 	and.w	r3, r3, #8
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00a      	beq.n	80053f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00a      	beq.n	8005418 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	430a      	orrs	r2, r1
 8005416:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800541c:	f003 0302 	and.w	r3, r3, #2
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00a      	beq.n	800543a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800543e:	f003 0304 	and.w	r3, r3, #4
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00a      	beq.n	800545c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	430a      	orrs	r2, r1
 800545a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005460:	f003 0310 	and.w	r3, r3, #16
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00a      	beq.n	800547e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	430a      	orrs	r2, r1
 800547c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005482:	f003 0320 	and.w	r3, r3, #32
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00a      	beq.n	80054a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	430a      	orrs	r2, r1
 800549e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d01a      	beq.n	80054e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054ca:	d10a      	bne.n	80054e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	430a      	orrs	r2, r1
 80054e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00a      	beq.n	8005504 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	430a      	orrs	r2, r1
 8005502:	605a      	str	r2, [r3, #4]
  }
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b098      	sub	sp, #96	@ 0x60
 8005514:	af02      	add	r7, sp, #8
 8005516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005520:	f7fb fc66 	bl	8000df0 <HAL_GetTick>
 8005524:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0308 	and.w	r3, r3, #8
 8005530:	2b08      	cmp	r3, #8
 8005532:	d12f      	bne.n	8005594 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005534:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800553c:	2200      	movs	r2, #0
 800553e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f88e 	bl	8005664 <UART_WaitOnFlagUntilTimeout>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d022      	beq.n	8005594 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005556:	e853 3f00 	ldrex	r3, [r3]
 800555a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800555c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800555e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005562:	653b      	str	r3, [r7, #80]	@ 0x50
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	461a      	mov	r2, r3
 800556a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800556c:	647b      	str	r3, [r7, #68]	@ 0x44
 800556e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005570:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005572:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005574:	e841 2300 	strex	r3, r2, [r1]
 8005578:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800557a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1e6      	bne.n	800554e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2220      	movs	r2, #32
 8005584:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e063      	b.n	800565c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0304 	and.w	r3, r3, #4
 800559e:	2b04      	cmp	r3, #4
 80055a0:	d149      	bne.n	8005636 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055a2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80055a6:	9300      	str	r3, [sp, #0]
 80055a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055aa:	2200      	movs	r2, #0
 80055ac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f857 	bl	8005664 <UART_WaitOnFlagUntilTimeout>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d03c      	beq.n	8005636 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c4:	e853 3f00 	ldrex	r3, [r3]
 80055c8:	623b      	str	r3, [r7, #32]
   return(result);
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	461a      	mov	r2, r3
 80055d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055da:	633b      	str	r3, [r7, #48]	@ 0x30
 80055dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055e2:	e841 2300 	strex	r3, r2, [r1]
 80055e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1e6      	bne.n	80055bc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	3308      	adds	r3, #8
 80055f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	e853 3f00 	ldrex	r3, [r3]
 80055fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f023 0301 	bic.w	r3, r3, #1
 8005604:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	3308      	adds	r3, #8
 800560c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800560e:	61fa      	str	r2, [r7, #28]
 8005610:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005612:	69b9      	ldr	r1, [r7, #24]
 8005614:	69fa      	ldr	r2, [r7, #28]
 8005616:	e841 2300 	strex	r3, r2, [r1]
 800561a:	617b      	str	r3, [r7, #20]
   return(result);
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1e5      	bne.n	80055ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2220      	movs	r2, #32
 8005626:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e012      	b.n	800565c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2220      	movs	r2, #32
 800563a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2220      	movs	r2, #32
 8005642:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3758      	adds	r7, #88	@ 0x58
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	603b      	str	r3, [r7, #0]
 8005670:	4613      	mov	r3, r2
 8005672:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005674:	e04f      	b.n	8005716 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800567c:	d04b      	beq.n	8005716 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800567e:	f7fb fbb7 	bl	8000df0 <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	429a      	cmp	r2, r3
 800568c:	d302      	bcc.n	8005694 <UART_WaitOnFlagUntilTimeout+0x30>
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e04e      	b.n	8005736 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0304 	and.w	r3, r3, #4
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d037      	beq.n	8005716 <UART_WaitOnFlagUntilTimeout+0xb2>
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	2b80      	cmp	r3, #128	@ 0x80
 80056aa:	d034      	beq.n	8005716 <UART_WaitOnFlagUntilTimeout+0xb2>
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	2b40      	cmp	r3, #64	@ 0x40
 80056b0:	d031      	beq.n	8005716 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	69db      	ldr	r3, [r3, #28]
 80056b8:	f003 0308 	and.w	r3, r3, #8
 80056bc:	2b08      	cmp	r3, #8
 80056be:	d110      	bne.n	80056e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2208      	movs	r2, #8
 80056c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f000 f838 	bl	800573e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2208      	movs	r2, #8
 80056d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e029      	b.n	8005736 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	69db      	ldr	r3, [r3, #28]
 80056e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056f0:	d111      	bne.n	8005716 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80056fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	f000 f81e 	bl	800573e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2220      	movs	r2, #32
 8005706:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e00f      	b.n	8005736 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	69da      	ldr	r2, [r3, #28]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	4013      	ands	r3, r2
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	429a      	cmp	r2, r3
 8005724:	bf0c      	ite	eq
 8005726:	2301      	moveq	r3, #1
 8005728:	2300      	movne	r3, #0
 800572a:	b2db      	uxtb	r3, r3
 800572c:	461a      	mov	r2, r3
 800572e:	79fb      	ldrb	r3, [r7, #7]
 8005730:	429a      	cmp	r2, r3
 8005732:	d0a0      	beq.n	8005676 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800573e:	b480      	push	{r7}
 8005740:	b095      	sub	sp, #84	@ 0x54
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800574e:	e853 3f00 	ldrex	r3, [r3]
 8005752:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005756:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800575a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	461a      	mov	r2, r3
 8005762:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005764:	643b      	str	r3, [r7, #64]	@ 0x40
 8005766:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005768:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800576a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800576c:	e841 2300 	strex	r3, r2, [r1]
 8005770:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1e6      	bne.n	8005746 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	3308      	adds	r3, #8
 800577e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005780:	6a3b      	ldr	r3, [r7, #32]
 8005782:	e853 3f00 	ldrex	r3, [r3]
 8005786:	61fb      	str	r3, [r7, #28]
   return(result);
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800578e:	f023 0301 	bic.w	r3, r3, #1
 8005792:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	3308      	adds	r3, #8
 800579a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800579c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800579e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057a4:	e841 2300 	strex	r3, r2, [r1]
 80057a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1e3      	bne.n	8005778 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d118      	bne.n	80057ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	e853 3f00 	ldrex	r3, [r3]
 80057c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	f023 0310 	bic.w	r3, r3, #16
 80057cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	461a      	mov	r2, r3
 80057d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057d6:	61bb      	str	r3, [r7, #24]
 80057d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057da:	6979      	ldr	r1, [r7, #20]
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	e841 2300 	strex	r3, r2, [r1]
 80057e2:	613b      	str	r3, [r7, #16]
   return(result);
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1e6      	bne.n	80057b8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2220      	movs	r2, #32
 80057ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80057fe:	bf00      	nop
 8005800:	3754      	adds	r7, #84	@ 0x54
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800580a:	b480      	push	{r7}
 800580c:	b085      	sub	sp, #20
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005818:	2b01      	cmp	r3, #1
 800581a:	d101      	bne.n	8005820 <HAL_UARTEx_DisableFifoMode+0x16>
 800581c:	2302      	movs	r3, #2
 800581e:	e027      	b.n	8005870 <HAL_UARTEx_DisableFifoMode+0x66>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2224      	movs	r2, #36	@ 0x24
 800582c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f022 0201 	bic.w	r2, r2, #1
 8005846:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800584e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2220      	movs	r2, #32
 8005862:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3714      	adds	r7, #20
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800588c:	2b01      	cmp	r3, #1
 800588e:	d101      	bne.n	8005894 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005890:	2302      	movs	r3, #2
 8005892:	e02d      	b.n	80058f0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2224      	movs	r2, #36	@ 0x24
 80058a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f022 0201 	bic.w	r2, r2, #1
 80058ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	430a      	orrs	r2, r1
 80058ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 f84f 	bl	8005974 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2220      	movs	r2, #32
 80058e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005908:	2b01      	cmp	r3, #1
 800590a:	d101      	bne.n	8005910 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800590c:	2302      	movs	r3, #2
 800590e:	e02d      	b.n	800596c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2224      	movs	r2, #36	@ 0x24
 800591c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f022 0201 	bic.w	r2, r2, #1
 8005936:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	430a      	orrs	r2, r1
 800594a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 f811 	bl	8005974 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2220      	movs	r2, #32
 800595e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005980:	2b00      	cmp	r3, #0
 8005982:	d108      	bne.n	8005996 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005994:	e031      	b.n	80059fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005996:	2308      	movs	r3, #8
 8005998:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800599a:	2308      	movs	r3, #8
 800599c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	0e5b      	lsrs	r3, r3, #25
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	f003 0307 	and.w	r3, r3, #7
 80059ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	0f5b      	lsrs	r3, r3, #29
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	f003 0307 	and.w	r3, r3, #7
 80059bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80059be:	7bbb      	ldrb	r3, [r7, #14]
 80059c0:	7b3a      	ldrb	r2, [r7, #12]
 80059c2:	4911      	ldr	r1, [pc, #68]	@ (8005a08 <UARTEx_SetNbDataToProcess+0x94>)
 80059c4:	5c8a      	ldrb	r2, [r1, r2]
 80059c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80059ca:	7b3a      	ldrb	r2, [r7, #12]
 80059cc:	490f      	ldr	r1, [pc, #60]	@ (8005a0c <UARTEx_SetNbDataToProcess+0x98>)
 80059ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80059d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059dc:	7bfb      	ldrb	r3, [r7, #15]
 80059de:	7b7a      	ldrb	r2, [r7, #13]
 80059e0:	4909      	ldr	r1, [pc, #36]	@ (8005a08 <UARTEx_SetNbDataToProcess+0x94>)
 80059e2:	5c8a      	ldrb	r2, [r1, r2]
 80059e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80059e8:	7b7a      	ldrb	r2, [r7, #13]
 80059ea:	4908      	ldr	r1, [pc, #32]	@ (8005a0c <UARTEx_SetNbDataToProcess+0x98>)
 80059ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80059fa:	bf00      	nop
 80059fc:	3714      	adds	r7, #20
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	080064d4 	.word	0x080064d4
 8005a0c:	080064dc 	.word	0x080064dc

08005a10 <std>:
 8005a10:	2300      	movs	r3, #0
 8005a12:	b510      	push	{r4, lr}
 8005a14:	4604      	mov	r4, r0
 8005a16:	e9c0 3300 	strd	r3, r3, [r0]
 8005a1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a1e:	6083      	str	r3, [r0, #8]
 8005a20:	8181      	strh	r1, [r0, #12]
 8005a22:	6643      	str	r3, [r0, #100]	@ 0x64
 8005a24:	81c2      	strh	r2, [r0, #14]
 8005a26:	6183      	str	r3, [r0, #24]
 8005a28:	4619      	mov	r1, r3
 8005a2a:	2208      	movs	r2, #8
 8005a2c:	305c      	adds	r0, #92	@ 0x5c
 8005a2e:	f000 f9e7 	bl	8005e00 <memset>
 8005a32:	4b0d      	ldr	r3, [pc, #52]	@ (8005a68 <std+0x58>)
 8005a34:	6263      	str	r3, [r4, #36]	@ 0x24
 8005a36:	4b0d      	ldr	r3, [pc, #52]	@ (8005a6c <std+0x5c>)
 8005a38:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a70 <std+0x60>)
 8005a3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8005a74 <std+0x64>)
 8005a40:	6323      	str	r3, [r4, #48]	@ 0x30
 8005a42:	4b0d      	ldr	r3, [pc, #52]	@ (8005a78 <std+0x68>)
 8005a44:	6224      	str	r4, [r4, #32]
 8005a46:	429c      	cmp	r4, r3
 8005a48:	d006      	beq.n	8005a58 <std+0x48>
 8005a4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005a4e:	4294      	cmp	r4, r2
 8005a50:	d002      	beq.n	8005a58 <std+0x48>
 8005a52:	33d0      	adds	r3, #208	@ 0xd0
 8005a54:	429c      	cmp	r4, r3
 8005a56:	d105      	bne.n	8005a64 <std+0x54>
 8005a58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a60:	f000 ba46 	b.w	8005ef0 <__retarget_lock_init_recursive>
 8005a64:	bd10      	pop	{r4, pc}
 8005a66:	bf00      	nop
 8005a68:	08005c51 	.word	0x08005c51
 8005a6c:	08005c73 	.word	0x08005c73
 8005a70:	08005cab 	.word	0x08005cab
 8005a74:	08005ccf 	.word	0x08005ccf
 8005a78:	20000224 	.word	0x20000224

08005a7c <stdio_exit_handler>:
 8005a7c:	4a02      	ldr	r2, [pc, #8]	@ (8005a88 <stdio_exit_handler+0xc>)
 8005a7e:	4903      	ldr	r1, [pc, #12]	@ (8005a8c <stdio_exit_handler+0x10>)
 8005a80:	4803      	ldr	r0, [pc, #12]	@ (8005a90 <stdio_exit_handler+0x14>)
 8005a82:	f000 b869 	b.w	8005b58 <_fwalk_sglue>
 8005a86:	bf00      	nop
 8005a88:	20000014 	.word	0x20000014
 8005a8c:	080061f1 	.word	0x080061f1
 8005a90:	20000024 	.word	0x20000024

08005a94 <cleanup_stdio>:
 8005a94:	6841      	ldr	r1, [r0, #4]
 8005a96:	4b0c      	ldr	r3, [pc, #48]	@ (8005ac8 <cleanup_stdio+0x34>)
 8005a98:	4299      	cmp	r1, r3
 8005a9a:	b510      	push	{r4, lr}
 8005a9c:	4604      	mov	r4, r0
 8005a9e:	d001      	beq.n	8005aa4 <cleanup_stdio+0x10>
 8005aa0:	f000 fba6 	bl	80061f0 <_fflush_r>
 8005aa4:	68a1      	ldr	r1, [r4, #8]
 8005aa6:	4b09      	ldr	r3, [pc, #36]	@ (8005acc <cleanup_stdio+0x38>)
 8005aa8:	4299      	cmp	r1, r3
 8005aaa:	d002      	beq.n	8005ab2 <cleanup_stdio+0x1e>
 8005aac:	4620      	mov	r0, r4
 8005aae:	f000 fb9f 	bl	80061f0 <_fflush_r>
 8005ab2:	68e1      	ldr	r1, [r4, #12]
 8005ab4:	4b06      	ldr	r3, [pc, #24]	@ (8005ad0 <cleanup_stdio+0x3c>)
 8005ab6:	4299      	cmp	r1, r3
 8005ab8:	d004      	beq.n	8005ac4 <cleanup_stdio+0x30>
 8005aba:	4620      	mov	r0, r4
 8005abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ac0:	f000 bb96 	b.w	80061f0 <_fflush_r>
 8005ac4:	bd10      	pop	{r4, pc}
 8005ac6:	bf00      	nop
 8005ac8:	20000224 	.word	0x20000224
 8005acc:	2000028c 	.word	0x2000028c
 8005ad0:	200002f4 	.word	0x200002f4

08005ad4 <global_stdio_init.part.0>:
 8005ad4:	b510      	push	{r4, lr}
 8005ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8005b04 <global_stdio_init.part.0+0x30>)
 8005ad8:	4c0b      	ldr	r4, [pc, #44]	@ (8005b08 <global_stdio_init.part.0+0x34>)
 8005ada:	4a0c      	ldr	r2, [pc, #48]	@ (8005b0c <global_stdio_init.part.0+0x38>)
 8005adc:	601a      	str	r2, [r3, #0]
 8005ade:	4620      	mov	r0, r4
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	2104      	movs	r1, #4
 8005ae4:	f7ff ff94 	bl	8005a10 <std>
 8005ae8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005aec:	2201      	movs	r2, #1
 8005aee:	2109      	movs	r1, #9
 8005af0:	f7ff ff8e 	bl	8005a10 <std>
 8005af4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005af8:	2202      	movs	r2, #2
 8005afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005afe:	2112      	movs	r1, #18
 8005b00:	f7ff bf86 	b.w	8005a10 <std>
 8005b04:	2000035c 	.word	0x2000035c
 8005b08:	20000224 	.word	0x20000224
 8005b0c:	08005a7d 	.word	0x08005a7d

08005b10 <__sfp_lock_acquire>:
 8005b10:	4801      	ldr	r0, [pc, #4]	@ (8005b18 <__sfp_lock_acquire+0x8>)
 8005b12:	f000 b9ee 	b.w	8005ef2 <__retarget_lock_acquire_recursive>
 8005b16:	bf00      	nop
 8005b18:	20000365 	.word	0x20000365

08005b1c <__sfp_lock_release>:
 8005b1c:	4801      	ldr	r0, [pc, #4]	@ (8005b24 <__sfp_lock_release+0x8>)
 8005b1e:	f000 b9e9 	b.w	8005ef4 <__retarget_lock_release_recursive>
 8005b22:	bf00      	nop
 8005b24:	20000365 	.word	0x20000365

08005b28 <__sinit>:
 8005b28:	b510      	push	{r4, lr}
 8005b2a:	4604      	mov	r4, r0
 8005b2c:	f7ff fff0 	bl	8005b10 <__sfp_lock_acquire>
 8005b30:	6a23      	ldr	r3, [r4, #32]
 8005b32:	b11b      	cbz	r3, 8005b3c <__sinit+0x14>
 8005b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b38:	f7ff bff0 	b.w	8005b1c <__sfp_lock_release>
 8005b3c:	4b04      	ldr	r3, [pc, #16]	@ (8005b50 <__sinit+0x28>)
 8005b3e:	6223      	str	r3, [r4, #32]
 8005b40:	4b04      	ldr	r3, [pc, #16]	@ (8005b54 <__sinit+0x2c>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1f5      	bne.n	8005b34 <__sinit+0xc>
 8005b48:	f7ff ffc4 	bl	8005ad4 <global_stdio_init.part.0>
 8005b4c:	e7f2      	b.n	8005b34 <__sinit+0xc>
 8005b4e:	bf00      	nop
 8005b50:	08005a95 	.word	0x08005a95
 8005b54:	2000035c 	.word	0x2000035c

08005b58 <_fwalk_sglue>:
 8005b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b5c:	4607      	mov	r7, r0
 8005b5e:	4688      	mov	r8, r1
 8005b60:	4614      	mov	r4, r2
 8005b62:	2600      	movs	r6, #0
 8005b64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b68:	f1b9 0901 	subs.w	r9, r9, #1
 8005b6c:	d505      	bpl.n	8005b7a <_fwalk_sglue+0x22>
 8005b6e:	6824      	ldr	r4, [r4, #0]
 8005b70:	2c00      	cmp	r4, #0
 8005b72:	d1f7      	bne.n	8005b64 <_fwalk_sglue+0xc>
 8005b74:	4630      	mov	r0, r6
 8005b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b7a:	89ab      	ldrh	r3, [r5, #12]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d907      	bls.n	8005b90 <_fwalk_sglue+0x38>
 8005b80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b84:	3301      	adds	r3, #1
 8005b86:	d003      	beq.n	8005b90 <_fwalk_sglue+0x38>
 8005b88:	4629      	mov	r1, r5
 8005b8a:	4638      	mov	r0, r7
 8005b8c:	47c0      	blx	r8
 8005b8e:	4306      	orrs	r6, r0
 8005b90:	3568      	adds	r5, #104	@ 0x68
 8005b92:	e7e9      	b.n	8005b68 <_fwalk_sglue+0x10>

08005b94 <_puts_r>:
 8005b94:	6a03      	ldr	r3, [r0, #32]
 8005b96:	b570      	push	{r4, r5, r6, lr}
 8005b98:	6884      	ldr	r4, [r0, #8]
 8005b9a:	4605      	mov	r5, r0
 8005b9c:	460e      	mov	r6, r1
 8005b9e:	b90b      	cbnz	r3, 8005ba4 <_puts_r+0x10>
 8005ba0:	f7ff ffc2 	bl	8005b28 <__sinit>
 8005ba4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ba6:	07db      	lsls	r3, r3, #31
 8005ba8:	d405      	bmi.n	8005bb6 <_puts_r+0x22>
 8005baa:	89a3      	ldrh	r3, [r4, #12]
 8005bac:	0598      	lsls	r0, r3, #22
 8005bae:	d402      	bmi.n	8005bb6 <_puts_r+0x22>
 8005bb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bb2:	f000 f99e 	bl	8005ef2 <__retarget_lock_acquire_recursive>
 8005bb6:	89a3      	ldrh	r3, [r4, #12]
 8005bb8:	0719      	lsls	r1, r3, #28
 8005bba:	d502      	bpl.n	8005bc2 <_puts_r+0x2e>
 8005bbc:	6923      	ldr	r3, [r4, #16]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d135      	bne.n	8005c2e <_puts_r+0x9a>
 8005bc2:	4621      	mov	r1, r4
 8005bc4:	4628      	mov	r0, r5
 8005bc6:	f000 f8c5 	bl	8005d54 <__swsetup_r>
 8005bca:	b380      	cbz	r0, 8005c2e <_puts_r+0x9a>
 8005bcc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005bd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005bd2:	07da      	lsls	r2, r3, #31
 8005bd4:	d405      	bmi.n	8005be2 <_puts_r+0x4e>
 8005bd6:	89a3      	ldrh	r3, [r4, #12]
 8005bd8:	059b      	lsls	r3, r3, #22
 8005bda:	d402      	bmi.n	8005be2 <_puts_r+0x4e>
 8005bdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bde:	f000 f989 	bl	8005ef4 <__retarget_lock_release_recursive>
 8005be2:	4628      	mov	r0, r5
 8005be4:	bd70      	pop	{r4, r5, r6, pc}
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	da04      	bge.n	8005bf4 <_puts_r+0x60>
 8005bea:	69a2      	ldr	r2, [r4, #24]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	dc17      	bgt.n	8005c20 <_puts_r+0x8c>
 8005bf0:	290a      	cmp	r1, #10
 8005bf2:	d015      	beq.n	8005c20 <_puts_r+0x8c>
 8005bf4:	6823      	ldr	r3, [r4, #0]
 8005bf6:	1c5a      	adds	r2, r3, #1
 8005bf8:	6022      	str	r2, [r4, #0]
 8005bfa:	7019      	strb	r1, [r3, #0]
 8005bfc:	68a3      	ldr	r3, [r4, #8]
 8005bfe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005c02:	3b01      	subs	r3, #1
 8005c04:	60a3      	str	r3, [r4, #8]
 8005c06:	2900      	cmp	r1, #0
 8005c08:	d1ed      	bne.n	8005be6 <_puts_r+0x52>
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	da11      	bge.n	8005c32 <_puts_r+0x9e>
 8005c0e:	4622      	mov	r2, r4
 8005c10:	210a      	movs	r1, #10
 8005c12:	4628      	mov	r0, r5
 8005c14:	f000 f85f 	bl	8005cd6 <__swbuf_r>
 8005c18:	3001      	adds	r0, #1
 8005c1a:	d0d7      	beq.n	8005bcc <_puts_r+0x38>
 8005c1c:	250a      	movs	r5, #10
 8005c1e:	e7d7      	b.n	8005bd0 <_puts_r+0x3c>
 8005c20:	4622      	mov	r2, r4
 8005c22:	4628      	mov	r0, r5
 8005c24:	f000 f857 	bl	8005cd6 <__swbuf_r>
 8005c28:	3001      	adds	r0, #1
 8005c2a:	d1e7      	bne.n	8005bfc <_puts_r+0x68>
 8005c2c:	e7ce      	b.n	8005bcc <_puts_r+0x38>
 8005c2e:	3e01      	subs	r6, #1
 8005c30:	e7e4      	b.n	8005bfc <_puts_r+0x68>
 8005c32:	6823      	ldr	r3, [r4, #0]
 8005c34:	1c5a      	adds	r2, r3, #1
 8005c36:	6022      	str	r2, [r4, #0]
 8005c38:	220a      	movs	r2, #10
 8005c3a:	701a      	strb	r2, [r3, #0]
 8005c3c:	e7ee      	b.n	8005c1c <_puts_r+0x88>
	...

08005c40 <puts>:
 8005c40:	4b02      	ldr	r3, [pc, #8]	@ (8005c4c <puts+0xc>)
 8005c42:	4601      	mov	r1, r0
 8005c44:	6818      	ldr	r0, [r3, #0]
 8005c46:	f7ff bfa5 	b.w	8005b94 <_puts_r>
 8005c4a:	bf00      	nop
 8005c4c:	20000020 	.word	0x20000020

08005c50 <__sread>:
 8005c50:	b510      	push	{r4, lr}
 8005c52:	460c      	mov	r4, r1
 8005c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c58:	f000 f8fc 	bl	8005e54 <_read_r>
 8005c5c:	2800      	cmp	r0, #0
 8005c5e:	bfab      	itete	ge
 8005c60:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005c62:	89a3      	ldrhlt	r3, [r4, #12]
 8005c64:	181b      	addge	r3, r3, r0
 8005c66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005c6a:	bfac      	ite	ge
 8005c6c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005c6e:	81a3      	strhlt	r3, [r4, #12]
 8005c70:	bd10      	pop	{r4, pc}

08005c72 <__swrite>:
 8005c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c76:	461f      	mov	r7, r3
 8005c78:	898b      	ldrh	r3, [r1, #12]
 8005c7a:	05db      	lsls	r3, r3, #23
 8005c7c:	4605      	mov	r5, r0
 8005c7e:	460c      	mov	r4, r1
 8005c80:	4616      	mov	r6, r2
 8005c82:	d505      	bpl.n	8005c90 <__swrite+0x1e>
 8005c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c88:	2302      	movs	r3, #2
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f000 f8d0 	bl	8005e30 <_lseek_r>
 8005c90:	89a3      	ldrh	r3, [r4, #12]
 8005c92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c9a:	81a3      	strh	r3, [r4, #12]
 8005c9c:	4632      	mov	r2, r6
 8005c9e:	463b      	mov	r3, r7
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ca6:	f000 b8e7 	b.w	8005e78 <_write_r>

08005caa <__sseek>:
 8005caa:	b510      	push	{r4, lr}
 8005cac:	460c      	mov	r4, r1
 8005cae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cb2:	f000 f8bd 	bl	8005e30 <_lseek_r>
 8005cb6:	1c43      	adds	r3, r0, #1
 8005cb8:	89a3      	ldrh	r3, [r4, #12]
 8005cba:	bf15      	itete	ne
 8005cbc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005cbe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005cc2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005cc6:	81a3      	strheq	r3, [r4, #12]
 8005cc8:	bf18      	it	ne
 8005cca:	81a3      	strhne	r3, [r4, #12]
 8005ccc:	bd10      	pop	{r4, pc}

08005cce <__sclose>:
 8005cce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cd2:	f000 b89d 	b.w	8005e10 <_close_r>

08005cd6 <__swbuf_r>:
 8005cd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd8:	460e      	mov	r6, r1
 8005cda:	4614      	mov	r4, r2
 8005cdc:	4605      	mov	r5, r0
 8005cde:	b118      	cbz	r0, 8005ce8 <__swbuf_r+0x12>
 8005ce0:	6a03      	ldr	r3, [r0, #32]
 8005ce2:	b90b      	cbnz	r3, 8005ce8 <__swbuf_r+0x12>
 8005ce4:	f7ff ff20 	bl	8005b28 <__sinit>
 8005ce8:	69a3      	ldr	r3, [r4, #24]
 8005cea:	60a3      	str	r3, [r4, #8]
 8005cec:	89a3      	ldrh	r3, [r4, #12]
 8005cee:	071a      	lsls	r2, r3, #28
 8005cf0:	d501      	bpl.n	8005cf6 <__swbuf_r+0x20>
 8005cf2:	6923      	ldr	r3, [r4, #16]
 8005cf4:	b943      	cbnz	r3, 8005d08 <__swbuf_r+0x32>
 8005cf6:	4621      	mov	r1, r4
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	f000 f82b 	bl	8005d54 <__swsetup_r>
 8005cfe:	b118      	cbz	r0, 8005d08 <__swbuf_r+0x32>
 8005d00:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005d04:	4638      	mov	r0, r7
 8005d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d08:	6823      	ldr	r3, [r4, #0]
 8005d0a:	6922      	ldr	r2, [r4, #16]
 8005d0c:	1a98      	subs	r0, r3, r2
 8005d0e:	6963      	ldr	r3, [r4, #20]
 8005d10:	b2f6      	uxtb	r6, r6
 8005d12:	4283      	cmp	r3, r0
 8005d14:	4637      	mov	r7, r6
 8005d16:	dc05      	bgt.n	8005d24 <__swbuf_r+0x4e>
 8005d18:	4621      	mov	r1, r4
 8005d1a:	4628      	mov	r0, r5
 8005d1c:	f000 fa68 	bl	80061f0 <_fflush_r>
 8005d20:	2800      	cmp	r0, #0
 8005d22:	d1ed      	bne.n	8005d00 <__swbuf_r+0x2a>
 8005d24:	68a3      	ldr	r3, [r4, #8]
 8005d26:	3b01      	subs	r3, #1
 8005d28:	60a3      	str	r3, [r4, #8]
 8005d2a:	6823      	ldr	r3, [r4, #0]
 8005d2c:	1c5a      	adds	r2, r3, #1
 8005d2e:	6022      	str	r2, [r4, #0]
 8005d30:	701e      	strb	r6, [r3, #0]
 8005d32:	6962      	ldr	r2, [r4, #20]
 8005d34:	1c43      	adds	r3, r0, #1
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d004      	beq.n	8005d44 <__swbuf_r+0x6e>
 8005d3a:	89a3      	ldrh	r3, [r4, #12]
 8005d3c:	07db      	lsls	r3, r3, #31
 8005d3e:	d5e1      	bpl.n	8005d04 <__swbuf_r+0x2e>
 8005d40:	2e0a      	cmp	r6, #10
 8005d42:	d1df      	bne.n	8005d04 <__swbuf_r+0x2e>
 8005d44:	4621      	mov	r1, r4
 8005d46:	4628      	mov	r0, r5
 8005d48:	f000 fa52 	bl	80061f0 <_fflush_r>
 8005d4c:	2800      	cmp	r0, #0
 8005d4e:	d0d9      	beq.n	8005d04 <__swbuf_r+0x2e>
 8005d50:	e7d6      	b.n	8005d00 <__swbuf_r+0x2a>
	...

08005d54 <__swsetup_r>:
 8005d54:	b538      	push	{r3, r4, r5, lr}
 8005d56:	4b29      	ldr	r3, [pc, #164]	@ (8005dfc <__swsetup_r+0xa8>)
 8005d58:	4605      	mov	r5, r0
 8005d5a:	6818      	ldr	r0, [r3, #0]
 8005d5c:	460c      	mov	r4, r1
 8005d5e:	b118      	cbz	r0, 8005d68 <__swsetup_r+0x14>
 8005d60:	6a03      	ldr	r3, [r0, #32]
 8005d62:	b90b      	cbnz	r3, 8005d68 <__swsetup_r+0x14>
 8005d64:	f7ff fee0 	bl	8005b28 <__sinit>
 8005d68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d6c:	0719      	lsls	r1, r3, #28
 8005d6e:	d422      	bmi.n	8005db6 <__swsetup_r+0x62>
 8005d70:	06da      	lsls	r2, r3, #27
 8005d72:	d407      	bmi.n	8005d84 <__swsetup_r+0x30>
 8005d74:	2209      	movs	r2, #9
 8005d76:	602a      	str	r2, [r5, #0]
 8005d78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d7c:	81a3      	strh	r3, [r4, #12]
 8005d7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d82:	e033      	b.n	8005dec <__swsetup_r+0x98>
 8005d84:	0758      	lsls	r0, r3, #29
 8005d86:	d512      	bpl.n	8005dae <__swsetup_r+0x5a>
 8005d88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d8a:	b141      	cbz	r1, 8005d9e <__swsetup_r+0x4a>
 8005d8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d90:	4299      	cmp	r1, r3
 8005d92:	d002      	beq.n	8005d9a <__swsetup_r+0x46>
 8005d94:	4628      	mov	r0, r5
 8005d96:	f000 f8af 	bl	8005ef8 <_free_r>
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d9e:	89a3      	ldrh	r3, [r4, #12]
 8005da0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005da4:	81a3      	strh	r3, [r4, #12]
 8005da6:	2300      	movs	r3, #0
 8005da8:	6063      	str	r3, [r4, #4]
 8005daa:	6923      	ldr	r3, [r4, #16]
 8005dac:	6023      	str	r3, [r4, #0]
 8005dae:	89a3      	ldrh	r3, [r4, #12]
 8005db0:	f043 0308 	orr.w	r3, r3, #8
 8005db4:	81a3      	strh	r3, [r4, #12]
 8005db6:	6923      	ldr	r3, [r4, #16]
 8005db8:	b94b      	cbnz	r3, 8005dce <__swsetup_r+0x7a>
 8005dba:	89a3      	ldrh	r3, [r4, #12]
 8005dbc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005dc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dc4:	d003      	beq.n	8005dce <__swsetup_r+0x7a>
 8005dc6:	4621      	mov	r1, r4
 8005dc8:	4628      	mov	r0, r5
 8005dca:	f000 fa5f 	bl	800628c <__smakebuf_r>
 8005dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dd2:	f013 0201 	ands.w	r2, r3, #1
 8005dd6:	d00a      	beq.n	8005dee <__swsetup_r+0x9a>
 8005dd8:	2200      	movs	r2, #0
 8005dda:	60a2      	str	r2, [r4, #8]
 8005ddc:	6962      	ldr	r2, [r4, #20]
 8005dde:	4252      	negs	r2, r2
 8005de0:	61a2      	str	r2, [r4, #24]
 8005de2:	6922      	ldr	r2, [r4, #16]
 8005de4:	b942      	cbnz	r2, 8005df8 <__swsetup_r+0xa4>
 8005de6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005dea:	d1c5      	bne.n	8005d78 <__swsetup_r+0x24>
 8005dec:	bd38      	pop	{r3, r4, r5, pc}
 8005dee:	0799      	lsls	r1, r3, #30
 8005df0:	bf58      	it	pl
 8005df2:	6962      	ldrpl	r2, [r4, #20]
 8005df4:	60a2      	str	r2, [r4, #8]
 8005df6:	e7f4      	b.n	8005de2 <__swsetup_r+0x8e>
 8005df8:	2000      	movs	r0, #0
 8005dfa:	e7f7      	b.n	8005dec <__swsetup_r+0x98>
 8005dfc:	20000020 	.word	0x20000020

08005e00 <memset>:
 8005e00:	4402      	add	r2, r0
 8005e02:	4603      	mov	r3, r0
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d100      	bne.n	8005e0a <memset+0xa>
 8005e08:	4770      	bx	lr
 8005e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e0e:	e7f9      	b.n	8005e04 <memset+0x4>

08005e10 <_close_r>:
 8005e10:	b538      	push	{r3, r4, r5, lr}
 8005e12:	4d06      	ldr	r5, [pc, #24]	@ (8005e2c <_close_r+0x1c>)
 8005e14:	2300      	movs	r3, #0
 8005e16:	4604      	mov	r4, r0
 8005e18:	4608      	mov	r0, r1
 8005e1a:	602b      	str	r3, [r5, #0]
 8005e1c:	f7fa fe83 	bl	8000b26 <_close>
 8005e20:	1c43      	adds	r3, r0, #1
 8005e22:	d102      	bne.n	8005e2a <_close_r+0x1a>
 8005e24:	682b      	ldr	r3, [r5, #0]
 8005e26:	b103      	cbz	r3, 8005e2a <_close_r+0x1a>
 8005e28:	6023      	str	r3, [r4, #0]
 8005e2a:	bd38      	pop	{r3, r4, r5, pc}
 8005e2c:	20000360 	.word	0x20000360

08005e30 <_lseek_r>:
 8005e30:	b538      	push	{r3, r4, r5, lr}
 8005e32:	4d07      	ldr	r5, [pc, #28]	@ (8005e50 <_lseek_r+0x20>)
 8005e34:	4604      	mov	r4, r0
 8005e36:	4608      	mov	r0, r1
 8005e38:	4611      	mov	r1, r2
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	602a      	str	r2, [r5, #0]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	f7fa fe98 	bl	8000b74 <_lseek>
 8005e44:	1c43      	adds	r3, r0, #1
 8005e46:	d102      	bne.n	8005e4e <_lseek_r+0x1e>
 8005e48:	682b      	ldr	r3, [r5, #0]
 8005e4a:	b103      	cbz	r3, 8005e4e <_lseek_r+0x1e>
 8005e4c:	6023      	str	r3, [r4, #0]
 8005e4e:	bd38      	pop	{r3, r4, r5, pc}
 8005e50:	20000360 	.word	0x20000360

08005e54 <_read_r>:
 8005e54:	b538      	push	{r3, r4, r5, lr}
 8005e56:	4d07      	ldr	r5, [pc, #28]	@ (8005e74 <_read_r+0x20>)
 8005e58:	4604      	mov	r4, r0
 8005e5a:	4608      	mov	r0, r1
 8005e5c:	4611      	mov	r1, r2
 8005e5e:	2200      	movs	r2, #0
 8005e60:	602a      	str	r2, [r5, #0]
 8005e62:	461a      	mov	r2, r3
 8005e64:	f7fa fe42 	bl	8000aec <_read>
 8005e68:	1c43      	adds	r3, r0, #1
 8005e6a:	d102      	bne.n	8005e72 <_read_r+0x1e>
 8005e6c:	682b      	ldr	r3, [r5, #0]
 8005e6e:	b103      	cbz	r3, 8005e72 <_read_r+0x1e>
 8005e70:	6023      	str	r3, [r4, #0]
 8005e72:	bd38      	pop	{r3, r4, r5, pc}
 8005e74:	20000360 	.word	0x20000360

08005e78 <_write_r>:
 8005e78:	b538      	push	{r3, r4, r5, lr}
 8005e7a:	4d07      	ldr	r5, [pc, #28]	@ (8005e98 <_write_r+0x20>)
 8005e7c:	4604      	mov	r4, r0
 8005e7e:	4608      	mov	r0, r1
 8005e80:	4611      	mov	r1, r2
 8005e82:	2200      	movs	r2, #0
 8005e84:	602a      	str	r2, [r5, #0]
 8005e86:	461a      	mov	r2, r3
 8005e88:	f7fa fc8e 	bl	80007a8 <_write>
 8005e8c:	1c43      	adds	r3, r0, #1
 8005e8e:	d102      	bne.n	8005e96 <_write_r+0x1e>
 8005e90:	682b      	ldr	r3, [r5, #0]
 8005e92:	b103      	cbz	r3, 8005e96 <_write_r+0x1e>
 8005e94:	6023      	str	r3, [r4, #0]
 8005e96:	bd38      	pop	{r3, r4, r5, pc}
 8005e98:	20000360 	.word	0x20000360

08005e9c <__errno>:
 8005e9c:	4b01      	ldr	r3, [pc, #4]	@ (8005ea4 <__errno+0x8>)
 8005e9e:	6818      	ldr	r0, [r3, #0]
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	20000020 	.word	0x20000020

08005ea8 <__libc_init_array>:
 8005ea8:	b570      	push	{r4, r5, r6, lr}
 8005eaa:	4d0d      	ldr	r5, [pc, #52]	@ (8005ee0 <__libc_init_array+0x38>)
 8005eac:	4c0d      	ldr	r4, [pc, #52]	@ (8005ee4 <__libc_init_array+0x3c>)
 8005eae:	1b64      	subs	r4, r4, r5
 8005eb0:	10a4      	asrs	r4, r4, #2
 8005eb2:	2600      	movs	r6, #0
 8005eb4:	42a6      	cmp	r6, r4
 8005eb6:	d109      	bne.n	8005ecc <__libc_init_array+0x24>
 8005eb8:	4d0b      	ldr	r5, [pc, #44]	@ (8005ee8 <__libc_init_array+0x40>)
 8005eba:	4c0c      	ldr	r4, [pc, #48]	@ (8005eec <__libc_init_array+0x44>)
 8005ebc:	f000 fa54 	bl	8006368 <_init>
 8005ec0:	1b64      	subs	r4, r4, r5
 8005ec2:	10a4      	asrs	r4, r4, #2
 8005ec4:	2600      	movs	r6, #0
 8005ec6:	42a6      	cmp	r6, r4
 8005ec8:	d105      	bne.n	8005ed6 <__libc_init_array+0x2e>
 8005eca:	bd70      	pop	{r4, r5, r6, pc}
 8005ecc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ed0:	4798      	blx	r3
 8005ed2:	3601      	adds	r6, #1
 8005ed4:	e7ee      	b.n	8005eb4 <__libc_init_array+0xc>
 8005ed6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eda:	4798      	blx	r3
 8005edc:	3601      	adds	r6, #1
 8005ede:	e7f2      	b.n	8005ec6 <__libc_init_array+0x1e>
 8005ee0:	080064ec 	.word	0x080064ec
 8005ee4:	080064ec 	.word	0x080064ec
 8005ee8:	080064ec 	.word	0x080064ec
 8005eec:	080064f0 	.word	0x080064f0

08005ef0 <__retarget_lock_init_recursive>:
 8005ef0:	4770      	bx	lr

08005ef2 <__retarget_lock_acquire_recursive>:
 8005ef2:	4770      	bx	lr

08005ef4 <__retarget_lock_release_recursive>:
 8005ef4:	4770      	bx	lr
	...

08005ef8 <_free_r>:
 8005ef8:	b538      	push	{r3, r4, r5, lr}
 8005efa:	4605      	mov	r5, r0
 8005efc:	2900      	cmp	r1, #0
 8005efe:	d041      	beq.n	8005f84 <_free_r+0x8c>
 8005f00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f04:	1f0c      	subs	r4, r1, #4
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	bfb8      	it	lt
 8005f0a:	18e4      	addlt	r4, r4, r3
 8005f0c:	f000 f8e0 	bl	80060d0 <__malloc_lock>
 8005f10:	4a1d      	ldr	r2, [pc, #116]	@ (8005f88 <_free_r+0x90>)
 8005f12:	6813      	ldr	r3, [r2, #0]
 8005f14:	b933      	cbnz	r3, 8005f24 <_free_r+0x2c>
 8005f16:	6063      	str	r3, [r4, #4]
 8005f18:	6014      	str	r4, [r2, #0]
 8005f1a:	4628      	mov	r0, r5
 8005f1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f20:	f000 b8dc 	b.w	80060dc <__malloc_unlock>
 8005f24:	42a3      	cmp	r3, r4
 8005f26:	d908      	bls.n	8005f3a <_free_r+0x42>
 8005f28:	6820      	ldr	r0, [r4, #0]
 8005f2a:	1821      	adds	r1, r4, r0
 8005f2c:	428b      	cmp	r3, r1
 8005f2e:	bf01      	itttt	eq
 8005f30:	6819      	ldreq	r1, [r3, #0]
 8005f32:	685b      	ldreq	r3, [r3, #4]
 8005f34:	1809      	addeq	r1, r1, r0
 8005f36:	6021      	streq	r1, [r4, #0]
 8005f38:	e7ed      	b.n	8005f16 <_free_r+0x1e>
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	b10b      	cbz	r3, 8005f44 <_free_r+0x4c>
 8005f40:	42a3      	cmp	r3, r4
 8005f42:	d9fa      	bls.n	8005f3a <_free_r+0x42>
 8005f44:	6811      	ldr	r1, [r2, #0]
 8005f46:	1850      	adds	r0, r2, r1
 8005f48:	42a0      	cmp	r0, r4
 8005f4a:	d10b      	bne.n	8005f64 <_free_r+0x6c>
 8005f4c:	6820      	ldr	r0, [r4, #0]
 8005f4e:	4401      	add	r1, r0
 8005f50:	1850      	adds	r0, r2, r1
 8005f52:	4283      	cmp	r3, r0
 8005f54:	6011      	str	r1, [r2, #0]
 8005f56:	d1e0      	bne.n	8005f1a <_free_r+0x22>
 8005f58:	6818      	ldr	r0, [r3, #0]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	6053      	str	r3, [r2, #4]
 8005f5e:	4408      	add	r0, r1
 8005f60:	6010      	str	r0, [r2, #0]
 8005f62:	e7da      	b.n	8005f1a <_free_r+0x22>
 8005f64:	d902      	bls.n	8005f6c <_free_r+0x74>
 8005f66:	230c      	movs	r3, #12
 8005f68:	602b      	str	r3, [r5, #0]
 8005f6a:	e7d6      	b.n	8005f1a <_free_r+0x22>
 8005f6c:	6820      	ldr	r0, [r4, #0]
 8005f6e:	1821      	adds	r1, r4, r0
 8005f70:	428b      	cmp	r3, r1
 8005f72:	bf04      	itt	eq
 8005f74:	6819      	ldreq	r1, [r3, #0]
 8005f76:	685b      	ldreq	r3, [r3, #4]
 8005f78:	6063      	str	r3, [r4, #4]
 8005f7a:	bf04      	itt	eq
 8005f7c:	1809      	addeq	r1, r1, r0
 8005f7e:	6021      	streq	r1, [r4, #0]
 8005f80:	6054      	str	r4, [r2, #4]
 8005f82:	e7ca      	b.n	8005f1a <_free_r+0x22>
 8005f84:	bd38      	pop	{r3, r4, r5, pc}
 8005f86:	bf00      	nop
 8005f88:	2000036c 	.word	0x2000036c

08005f8c <sbrk_aligned>:
 8005f8c:	b570      	push	{r4, r5, r6, lr}
 8005f8e:	4e0f      	ldr	r6, [pc, #60]	@ (8005fcc <sbrk_aligned+0x40>)
 8005f90:	460c      	mov	r4, r1
 8005f92:	6831      	ldr	r1, [r6, #0]
 8005f94:	4605      	mov	r5, r0
 8005f96:	b911      	cbnz	r1, 8005f9e <sbrk_aligned+0x12>
 8005f98:	f000 f9d6 	bl	8006348 <_sbrk_r>
 8005f9c:	6030      	str	r0, [r6, #0]
 8005f9e:	4621      	mov	r1, r4
 8005fa0:	4628      	mov	r0, r5
 8005fa2:	f000 f9d1 	bl	8006348 <_sbrk_r>
 8005fa6:	1c43      	adds	r3, r0, #1
 8005fa8:	d103      	bne.n	8005fb2 <sbrk_aligned+0x26>
 8005faa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005fae:	4620      	mov	r0, r4
 8005fb0:	bd70      	pop	{r4, r5, r6, pc}
 8005fb2:	1cc4      	adds	r4, r0, #3
 8005fb4:	f024 0403 	bic.w	r4, r4, #3
 8005fb8:	42a0      	cmp	r0, r4
 8005fba:	d0f8      	beq.n	8005fae <sbrk_aligned+0x22>
 8005fbc:	1a21      	subs	r1, r4, r0
 8005fbe:	4628      	mov	r0, r5
 8005fc0:	f000 f9c2 	bl	8006348 <_sbrk_r>
 8005fc4:	3001      	adds	r0, #1
 8005fc6:	d1f2      	bne.n	8005fae <sbrk_aligned+0x22>
 8005fc8:	e7ef      	b.n	8005faa <sbrk_aligned+0x1e>
 8005fca:	bf00      	nop
 8005fcc:	20000368 	.word	0x20000368

08005fd0 <_malloc_r>:
 8005fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fd4:	1ccd      	adds	r5, r1, #3
 8005fd6:	f025 0503 	bic.w	r5, r5, #3
 8005fda:	3508      	adds	r5, #8
 8005fdc:	2d0c      	cmp	r5, #12
 8005fde:	bf38      	it	cc
 8005fe0:	250c      	movcc	r5, #12
 8005fe2:	2d00      	cmp	r5, #0
 8005fe4:	4606      	mov	r6, r0
 8005fe6:	db01      	blt.n	8005fec <_malloc_r+0x1c>
 8005fe8:	42a9      	cmp	r1, r5
 8005fea:	d904      	bls.n	8005ff6 <_malloc_r+0x26>
 8005fec:	230c      	movs	r3, #12
 8005fee:	6033      	str	r3, [r6, #0]
 8005ff0:	2000      	movs	r0, #0
 8005ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ff6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80060cc <_malloc_r+0xfc>
 8005ffa:	f000 f869 	bl	80060d0 <__malloc_lock>
 8005ffe:	f8d8 3000 	ldr.w	r3, [r8]
 8006002:	461c      	mov	r4, r3
 8006004:	bb44      	cbnz	r4, 8006058 <_malloc_r+0x88>
 8006006:	4629      	mov	r1, r5
 8006008:	4630      	mov	r0, r6
 800600a:	f7ff ffbf 	bl	8005f8c <sbrk_aligned>
 800600e:	1c43      	adds	r3, r0, #1
 8006010:	4604      	mov	r4, r0
 8006012:	d158      	bne.n	80060c6 <_malloc_r+0xf6>
 8006014:	f8d8 4000 	ldr.w	r4, [r8]
 8006018:	4627      	mov	r7, r4
 800601a:	2f00      	cmp	r7, #0
 800601c:	d143      	bne.n	80060a6 <_malloc_r+0xd6>
 800601e:	2c00      	cmp	r4, #0
 8006020:	d04b      	beq.n	80060ba <_malloc_r+0xea>
 8006022:	6823      	ldr	r3, [r4, #0]
 8006024:	4639      	mov	r1, r7
 8006026:	4630      	mov	r0, r6
 8006028:	eb04 0903 	add.w	r9, r4, r3
 800602c:	f000 f98c 	bl	8006348 <_sbrk_r>
 8006030:	4581      	cmp	r9, r0
 8006032:	d142      	bne.n	80060ba <_malloc_r+0xea>
 8006034:	6821      	ldr	r1, [r4, #0]
 8006036:	1a6d      	subs	r5, r5, r1
 8006038:	4629      	mov	r1, r5
 800603a:	4630      	mov	r0, r6
 800603c:	f7ff ffa6 	bl	8005f8c <sbrk_aligned>
 8006040:	3001      	adds	r0, #1
 8006042:	d03a      	beq.n	80060ba <_malloc_r+0xea>
 8006044:	6823      	ldr	r3, [r4, #0]
 8006046:	442b      	add	r3, r5
 8006048:	6023      	str	r3, [r4, #0]
 800604a:	f8d8 3000 	ldr.w	r3, [r8]
 800604e:	685a      	ldr	r2, [r3, #4]
 8006050:	bb62      	cbnz	r2, 80060ac <_malloc_r+0xdc>
 8006052:	f8c8 7000 	str.w	r7, [r8]
 8006056:	e00f      	b.n	8006078 <_malloc_r+0xa8>
 8006058:	6822      	ldr	r2, [r4, #0]
 800605a:	1b52      	subs	r2, r2, r5
 800605c:	d420      	bmi.n	80060a0 <_malloc_r+0xd0>
 800605e:	2a0b      	cmp	r2, #11
 8006060:	d917      	bls.n	8006092 <_malloc_r+0xc2>
 8006062:	1961      	adds	r1, r4, r5
 8006064:	42a3      	cmp	r3, r4
 8006066:	6025      	str	r5, [r4, #0]
 8006068:	bf18      	it	ne
 800606a:	6059      	strne	r1, [r3, #4]
 800606c:	6863      	ldr	r3, [r4, #4]
 800606e:	bf08      	it	eq
 8006070:	f8c8 1000 	streq.w	r1, [r8]
 8006074:	5162      	str	r2, [r4, r5]
 8006076:	604b      	str	r3, [r1, #4]
 8006078:	4630      	mov	r0, r6
 800607a:	f000 f82f 	bl	80060dc <__malloc_unlock>
 800607e:	f104 000b 	add.w	r0, r4, #11
 8006082:	1d23      	adds	r3, r4, #4
 8006084:	f020 0007 	bic.w	r0, r0, #7
 8006088:	1ac2      	subs	r2, r0, r3
 800608a:	bf1c      	itt	ne
 800608c:	1a1b      	subne	r3, r3, r0
 800608e:	50a3      	strne	r3, [r4, r2]
 8006090:	e7af      	b.n	8005ff2 <_malloc_r+0x22>
 8006092:	6862      	ldr	r2, [r4, #4]
 8006094:	42a3      	cmp	r3, r4
 8006096:	bf0c      	ite	eq
 8006098:	f8c8 2000 	streq.w	r2, [r8]
 800609c:	605a      	strne	r2, [r3, #4]
 800609e:	e7eb      	b.n	8006078 <_malloc_r+0xa8>
 80060a0:	4623      	mov	r3, r4
 80060a2:	6864      	ldr	r4, [r4, #4]
 80060a4:	e7ae      	b.n	8006004 <_malloc_r+0x34>
 80060a6:	463c      	mov	r4, r7
 80060a8:	687f      	ldr	r7, [r7, #4]
 80060aa:	e7b6      	b.n	800601a <_malloc_r+0x4a>
 80060ac:	461a      	mov	r2, r3
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	42a3      	cmp	r3, r4
 80060b2:	d1fb      	bne.n	80060ac <_malloc_r+0xdc>
 80060b4:	2300      	movs	r3, #0
 80060b6:	6053      	str	r3, [r2, #4]
 80060b8:	e7de      	b.n	8006078 <_malloc_r+0xa8>
 80060ba:	230c      	movs	r3, #12
 80060bc:	6033      	str	r3, [r6, #0]
 80060be:	4630      	mov	r0, r6
 80060c0:	f000 f80c 	bl	80060dc <__malloc_unlock>
 80060c4:	e794      	b.n	8005ff0 <_malloc_r+0x20>
 80060c6:	6005      	str	r5, [r0, #0]
 80060c8:	e7d6      	b.n	8006078 <_malloc_r+0xa8>
 80060ca:	bf00      	nop
 80060cc:	2000036c 	.word	0x2000036c

080060d0 <__malloc_lock>:
 80060d0:	4801      	ldr	r0, [pc, #4]	@ (80060d8 <__malloc_lock+0x8>)
 80060d2:	f7ff bf0e 	b.w	8005ef2 <__retarget_lock_acquire_recursive>
 80060d6:	bf00      	nop
 80060d8:	20000364 	.word	0x20000364

080060dc <__malloc_unlock>:
 80060dc:	4801      	ldr	r0, [pc, #4]	@ (80060e4 <__malloc_unlock+0x8>)
 80060de:	f7ff bf09 	b.w	8005ef4 <__retarget_lock_release_recursive>
 80060e2:	bf00      	nop
 80060e4:	20000364 	.word	0x20000364

080060e8 <__sflush_r>:
 80060e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80060ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060f0:	0716      	lsls	r6, r2, #28
 80060f2:	4605      	mov	r5, r0
 80060f4:	460c      	mov	r4, r1
 80060f6:	d454      	bmi.n	80061a2 <__sflush_r+0xba>
 80060f8:	684b      	ldr	r3, [r1, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	dc02      	bgt.n	8006104 <__sflush_r+0x1c>
 80060fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006100:	2b00      	cmp	r3, #0
 8006102:	dd48      	ble.n	8006196 <__sflush_r+0xae>
 8006104:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006106:	2e00      	cmp	r6, #0
 8006108:	d045      	beq.n	8006196 <__sflush_r+0xae>
 800610a:	2300      	movs	r3, #0
 800610c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006110:	682f      	ldr	r7, [r5, #0]
 8006112:	6a21      	ldr	r1, [r4, #32]
 8006114:	602b      	str	r3, [r5, #0]
 8006116:	d030      	beq.n	800617a <__sflush_r+0x92>
 8006118:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800611a:	89a3      	ldrh	r3, [r4, #12]
 800611c:	0759      	lsls	r1, r3, #29
 800611e:	d505      	bpl.n	800612c <__sflush_r+0x44>
 8006120:	6863      	ldr	r3, [r4, #4]
 8006122:	1ad2      	subs	r2, r2, r3
 8006124:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006126:	b10b      	cbz	r3, 800612c <__sflush_r+0x44>
 8006128:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800612a:	1ad2      	subs	r2, r2, r3
 800612c:	2300      	movs	r3, #0
 800612e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006130:	6a21      	ldr	r1, [r4, #32]
 8006132:	4628      	mov	r0, r5
 8006134:	47b0      	blx	r6
 8006136:	1c43      	adds	r3, r0, #1
 8006138:	89a3      	ldrh	r3, [r4, #12]
 800613a:	d106      	bne.n	800614a <__sflush_r+0x62>
 800613c:	6829      	ldr	r1, [r5, #0]
 800613e:	291d      	cmp	r1, #29
 8006140:	d82b      	bhi.n	800619a <__sflush_r+0xb2>
 8006142:	4a2a      	ldr	r2, [pc, #168]	@ (80061ec <__sflush_r+0x104>)
 8006144:	410a      	asrs	r2, r1
 8006146:	07d6      	lsls	r6, r2, #31
 8006148:	d427      	bmi.n	800619a <__sflush_r+0xb2>
 800614a:	2200      	movs	r2, #0
 800614c:	6062      	str	r2, [r4, #4]
 800614e:	04d9      	lsls	r1, r3, #19
 8006150:	6922      	ldr	r2, [r4, #16]
 8006152:	6022      	str	r2, [r4, #0]
 8006154:	d504      	bpl.n	8006160 <__sflush_r+0x78>
 8006156:	1c42      	adds	r2, r0, #1
 8006158:	d101      	bne.n	800615e <__sflush_r+0x76>
 800615a:	682b      	ldr	r3, [r5, #0]
 800615c:	b903      	cbnz	r3, 8006160 <__sflush_r+0x78>
 800615e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006160:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006162:	602f      	str	r7, [r5, #0]
 8006164:	b1b9      	cbz	r1, 8006196 <__sflush_r+0xae>
 8006166:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800616a:	4299      	cmp	r1, r3
 800616c:	d002      	beq.n	8006174 <__sflush_r+0x8c>
 800616e:	4628      	mov	r0, r5
 8006170:	f7ff fec2 	bl	8005ef8 <_free_r>
 8006174:	2300      	movs	r3, #0
 8006176:	6363      	str	r3, [r4, #52]	@ 0x34
 8006178:	e00d      	b.n	8006196 <__sflush_r+0xae>
 800617a:	2301      	movs	r3, #1
 800617c:	4628      	mov	r0, r5
 800617e:	47b0      	blx	r6
 8006180:	4602      	mov	r2, r0
 8006182:	1c50      	adds	r0, r2, #1
 8006184:	d1c9      	bne.n	800611a <__sflush_r+0x32>
 8006186:	682b      	ldr	r3, [r5, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d0c6      	beq.n	800611a <__sflush_r+0x32>
 800618c:	2b1d      	cmp	r3, #29
 800618e:	d001      	beq.n	8006194 <__sflush_r+0xac>
 8006190:	2b16      	cmp	r3, #22
 8006192:	d11e      	bne.n	80061d2 <__sflush_r+0xea>
 8006194:	602f      	str	r7, [r5, #0]
 8006196:	2000      	movs	r0, #0
 8006198:	e022      	b.n	80061e0 <__sflush_r+0xf8>
 800619a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800619e:	b21b      	sxth	r3, r3
 80061a0:	e01b      	b.n	80061da <__sflush_r+0xf2>
 80061a2:	690f      	ldr	r7, [r1, #16]
 80061a4:	2f00      	cmp	r7, #0
 80061a6:	d0f6      	beq.n	8006196 <__sflush_r+0xae>
 80061a8:	0793      	lsls	r3, r2, #30
 80061aa:	680e      	ldr	r6, [r1, #0]
 80061ac:	bf08      	it	eq
 80061ae:	694b      	ldreq	r3, [r1, #20]
 80061b0:	600f      	str	r7, [r1, #0]
 80061b2:	bf18      	it	ne
 80061b4:	2300      	movne	r3, #0
 80061b6:	eba6 0807 	sub.w	r8, r6, r7
 80061ba:	608b      	str	r3, [r1, #8]
 80061bc:	f1b8 0f00 	cmp.w	r8, #0
 80061c0:	dde9      	ble.n	8006196 <__sflush_r+0xae>
 80061c2:	6a21      	ldr	r1, [r4, #32]
 80061c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80061c6:	4643      	mov	r3, r8
 80061c8:	463a      	mov	r2, r7
 80061ca:	4628      	mov	r0, r5
 80061cc:	47b0      	blx	r6
 80061ce:	2800      	cmp	r0, #0
 80061d0:	dc08      	bgt.n	80061e4 <__sflush_r+0xfc>
 80061d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061da:	81a3      	strh	r3, [r4, #12]
 80061dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80061e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061e4:	4407      	add	r7, r0
 80061e6:	eba8 0800 	sub.w	r8, r8, r0
 80061ea:	e7e7      	b.n	80061bc <__sflush_r+0xd4>
 80061ec:	dfbffffe 	.word	0xdfbffffe

080061f0 <_fflush_r>:
 80061f0:	b538      	push	{r3, r4, r5, lr}
 80061f2:	690b      	ldr	r3, [r1, #16]
 80061f4:	4605      	mov	r5, r0
 80061f6:	460c      	mov	r4, r1
 80061f8:	b913      	cbnz	r3, 8006200 <_fflush_r+0x10>
 80061fa:	2500      	movs	r5, #0
 80061fc:	4628      	mov	r0, r5
 80061fe:	bd38      	pop	{r3, r4, r5, pc}
 8006200:	b118      	cbz	r0, 800620a <_fflush_r+0x1a>
 8006202:	6a03      	ldr	r3, [r0, #32]
 8006204:	b90b      	cbnz	r3, 800620a <_fflush_r+0x1a>
 8006206:	f7ff fc8f 	bl	8005b28 <__sinit>
 800620a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d0f3      	beq.n	80061fa <_fflush_r+0xa>
 8006212:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006214:	07d0      	lsls	r0, r2, #31
 8006216:	d404      	bmi.n	8006222 <_fflush_r+0x32>
 8006218:	0599      	lsls	r1, r3, #22
 800621a:	d402      	bmi.n	8006222 <_fflush_r+0x32>
 800621c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800621e:	f7ff fe68 	bl	8005ef2 <__retarget_lock_acquire_recursive>
 8006222:	4628      	mov	r0, r5
 8006224:	4621      	mov	r1, r4
 8006226:	f7ff ff5f 	bl	80060e8 <__sflush_r>
 800622a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800622c:	07da      	lsls	r2, r3, #31
 800622e:	4605      	mov	r5, r0
 8006230:	d4e4      	bmi.n	80061fc <_fflush_r+0xc>
 8006232:	89a3      	ldrh	r3, [r4, #12]
 8006234:	059b      	lsls	r3, r3, #22
 8006236:	d4e1      	bmi.n	80061fc <_fflush_r+0xc>
 8006238:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800623a:	f7ff fe5b 	bl	8005ef4 <__retarget_lock_release_recursive>
 800623e:	e7dd      	b.n	80061fc <_fflush_r+0xc>

08006240 <__swhatbuf_r>:
 8006240:	b570      	push	{r4, r5, r6, lr}
 8006242:	460c      	mov	r4, r1
 8006244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006248:	2900      	cmp	r1, #0
 800624a:	b096      	sub	sp, #88	@ 0x58
 800624c:	4615      	mov	r5, r2
 800624e:	461e      	mov	r6, r3
 8006250:	da0d      	bge.n	800626e <__swhatbuf_r+0x2e>
 8006252:	89a3      	ldrh	r3, [r4, #12]
 8006254:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006258:	f04f 0100 	mov.w	r1, #0
 800625c:	bf14      	ite	ne
 800625e:	2340      	movne	r3, #64	@ 0x40
 8006260:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006264:	2000      	movs	r0, #0
 8006266:	6031      	str	r1, [r6, #0]
 8006268:	602b      	str	r3, [r5, #0]
 800626a:	b016      	add	sp, #88	@ 0x58
 800626c:	bd70      	pop	{r4, r5, r6, pc}
 800626e:	466a      	mov	r2, sp
 8006270:	f000 f848 	bl	8006304 <_fstat_r>
 8006274:	2800      	cmp	r0, #0
 8006276:	dbec      	blt.n	8006252 <__swhatbuf_r+0x12>
 8006278:	9901      	ldr	r1, [sp, #4]
 800627a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800627e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006282:	4259      	negs	r1, r3
 8006284:	4159      	adcs	r1, r3
 8006286:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800628a:	e7eb      	b.n	8006264 <__swhatbuf_r+0x24>

0800628c <__smakebuf_r>:
 800628c:	898b      	ldrh	r3, [r1, #12]
 800628e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006290:	079d      	lsls	r5, r3, #30
 8006292:	4606      	mov	r6, r0
 8006294:	460c      	mov	r4, r1
 8006296:	d507      	bpl.n	80062a8 <__smakebuf_r+0x1c>
 8006298:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800629c:	6023      	str	r3, [r4, #0]
 800629e:	6123      	str	r3, [r4, #16]
 80062a0:	2301      	movs	r3, #1
 80062a2:	6163      	str	r3, [r4, #20]
 80062a4:	b003      	add	sp, #12
 80062a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062a8:	ab01      	add	r3, sp, #4
 80062aa:	466a      	mov	r2, sp
 80062ac:	f7ff ffc8 	bl	8006240 <__swhatbuf_r>
 80062b0:	9f00      	ldr	r7, [sp, #0]
 80062b2:	4605      	mov	r5, r0
 80062b4:	4639      	mov	r1, r7
 80062b6:	4630      	mov	r0, r6
 80062b8:	f7ff fe8a 	bl	8005fd0 <_malloc_r>
 80062bc:	b948      	cbnz	r0, 80062d2 <__smakebuf_r+0x46>
 80062be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062c2:	059a      	lsls	r2, r3, #22
 80062c4:	d4ee      	bmi.n	80062a4 <__smakebuf_r+0x18>
 80062c6:	f023 0303 	bic.w	r3, r3, #3
 80062ca:	f043 0302 	orr.w	r3, r3, #2
 80062ce:	81a3      	strh	r3, [r4, #12]
 80062d0:	e7e2      	b.n	8006298 <__smakebuf_r+0xc>
 80062d2:	89a3      	ldrh	r3, [r4, #12]
 80062d4:	6020      	str	r0, [r4, #0]
 80062d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062da:	81a3      	strh	r3, [r4, #12]
 80062dc:	9b01      	ldr	r3, [sp, #4]
 80062de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80062e2:	b15b      	cbz	r3, 80062fc <__smakebuf_r+0x70>
 80062e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062e8:	4630      	mov	r0, r6
 80062ea:	f000 f81d 	bl	8006328 <_isatty_r>
 80062ee:	b128      	cbz	r0, 80062fc <__smakebuf_r+0x70>
 80062f0:	89a3      	ldrh	r3, [r4, #12]
 80062f2:	f023 0303 	bic.w	r3, r3, #3
 80062f6:	f043 0301 	orr.w	r3, r3, #1
 80062fa:	81a3      	strh	r3, [r4, #12]
 80062fc:	89a3      	ldrh	r3, [r4, #12]
 80062fe:	431d      	orrs	r5, r3
 8006300:	81a5      	strh	r5, [r4, #12]
 8006302:	e7cf      	b.n	80062a4 <__smakebuf_r+0x18>

08006304 <_fstat_r>:
 8006304:	b538      	push	{r3, r4, r5, lr}
 8006306:	4d07      	ldr	r5, [pc, #28]	@ (8006324 <_fstat_r+0x20>)
 8006308:	2300      	movs	r3, #0
 800630a:	4604      	mov	r4, r0
 800630c:	4608      	mov	r0, r1
 800630e:	4611      	mov	r1, r2
 8006310:	602b      	str	r3, [r5, #0]
 8006312:	f7fa fc14 	bl	8000b3e <_fstat>
 8006316:	1c43      	adds	r3, r0, #1
 8006318:	d102      	bne.n	8006320 <_fstat_r+0x1c>
 800631a:	682b      	ldr	r3, [r5, #0]
 800631c:	b103      	cbz	r3, 8006320 <_fstat_r+0x1c>
 800631e:	6023      	str	r3, [r4, #0]
 8006320:	bd38      	pop	{r3, r4, r5, pc}
 8006322:	bf00      	nop
 8006324:	20000360 	.word	0x20000360

08006328 <_isatty_r>:
 8006328:	b538      	push	{r3, r4, r5, lr}
 800632a:	4d06      	ldr	r5, [pc, #24]	@ (8006344 <_isatty_r+0x1c>)
 800632c:	2300      	movs	r3, #0
 800632e:	4604      	mov	r4, r0
 8006330:	4608      	mov	r0, r1
 8006332:	602b      	str	r3, [r5, #0]
 8006334:	f7fa fc13 	bl	8000b5e <_isatty>
 8006338:	1c43      	adds	r3, r0, #1
 800633a:	d102      	bne.n	8006342 <_isatty_r+0x1a>
 800633c:	682b      	ldr	r3, [r5, #0]
 800633e:	b103      	cbz	r3, 8006342 <_isatty_r+0x1a>
 8006340:	6023      	str	r3, [r4, #0]
 8006342:	bd38      	pop	{r3, r4, r5, pc}
 8006344:	20000360 	.word	0x20000360

08006348 <_sbrk_r>:
 8006348:	b538      	push	{r3, r4, r5, lr}
 800634a:	4d06      	ldr	r5, [pc, #24]	@ (8006364 <_sbrk_r+0x1c>)
 800634c:	2300      	movs	r3, #0
 800634e:	4604      	mov	r4, r0
 8006350:	4608      	mov	r0, r1
 8006352:	602b      	str	r3, [r5, #0]
 8006354:	f7fa fc1c 	bl	8000b90 <_sbrk>
 8006358:	1c43      	adds	r3, r0, #1
 800635a:	d102      	bne.n	8006362 <_sbrk_r+0x1a>
 800635c:	682b      	ldr	r3, [r5, #0]
 800635e:	b103      	cbz	r3, 8006362 <_sbrk_r+0x1a>
 8006360:	6023      	str	r3, [r4, #0]
 8006362:	bd38      	pop	{r3, r4, r5, pc}
 8006364:	20000360 	.word	0x20000360

08006368 <_init>:
 8006368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800636a:	bf00      	nop
 800636c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800636e:	bc08      	pop	{r3}
 8006370:	469e      	mov	lr, r3
 8006372:	4770      	bx	lr

08006374 <_fini>:
 8006374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006376:	bf00      	nop
 8006378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800637a:	bc08      	pop	{r3}
 800637c:	469e      	mov	lr, r3
 800637e:	4770      	bx	lr
